

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Dec 27 01:10:48 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 1.42
    40                           ; Generated 13/04/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F45K50 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataCOMRAM
    75  000C36                     __pidataCOMRAM:
    76                           	opt stack 0
    77                           
    78                           ;initializer for _hex
    79  000C36  01                 	db	low STR_1
    80  000C37  08                 	db	high STR_1
    81  0000                     _ANSELC	set	3933
    82  0000                     _ANSELA	set	3931
    83  0000                     _ADCON0	set	4034
    84  0000                     _OSCCONbits	set	4051
    85  0000                     _TXREG1	set	4013
    86  0000                     _TRISE	set	3990
    87  0000                     _TRISD	set	3989
    88  0000                     _TRISC	set	3988
    89  0000                     _TRISB	set	3987
    90  0000                     _TRISA	set	3986
    91  0000                     _PORTE	set	3972
    92  0000                     _PORTD	set	3971
    93  0000                     _PORTC	set	3970
    94  0000                     _PORTB	set	3969
    95  0000                     _PORTA	set	3968
    96  0000                     _PIE1bits	set	3997
    97  0000                     _INTCONbits	set	4082
    98  0000                     _RCONbits	set	4048
    99  0000                     _SPBRG1	set	4015
   100  0000                     _BAUDCON1bits	set	4024
   101  0000                     _TXSTA1bits	set	4012
   102  0000                     _RCREG1	set	4014
   103  0000                     _PIR1bits	set	3998
   104  0000                     _RCSTA1bits	set	4011
   105                           
   106                           	psect	smallconst
   107  000800                     __psmallconst:
   108                           	opt stack 0
   109  000800  00                 	db	0
   110  000801                     STR_1:
   111  000801  30                 	db	48	;'0'
   112  000802  31                 	db	49	;'1'
   113  000803  32                 	db	50	;'2'
   114  000804  33                 	db	51	;'3'
   115  000805  34                 	db	52	;'4'
   116  000806  35                 	db	53	;'5'
   117  000807  36                 	db	54	;'6'
   118  000808  37                 	db	55	;'7'
   119  000809  38                 	db	56	;'8'
   120  00080A  39                 	db	57	;'9'
   121  00080B  61                 	db	97	;'a'
   122  00080C  62                 	db	98	;'b'
   123  00080D  63                 	db	99	;'c'
   124  00080E  64                 	db	100	;'d'
   125  00080F  65                 	db	101	;'e'
   126  000810  66                 	db	102	;'f'
   127  000811  00                 	db	0
   128                           
   129                           ; #config settings
   130  000812  00                 	db	0	; dummy byte at the end
   131  0000                     
   132                           	psect	cinit
   133  000ADE                     __pcinit:
   134                           	opt stack 0
   135  000ADE                     start_initialization:
   136                           	opt stack 0
   137  000ADE                     __initialization:
   138                           	opt stack 0
   139                           
   140                           ; Initialize objects allocated to COMRAM (2 bytes)
   141                           ; load TBLPTR registers with __pidataCOMRAM
   142  000ADE  0E36               	movlw	low __pidataCOMRAM
   143  000AE0  6EF6               	movwf	tblptrl,c
   144  000AE2  0E0C               	movlw	high __pidataCOMRAM
   145  000AE4  6EF7               	movwf	tblptrh,c
   146  000AE6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   147  000AE8  6EF8               	movwf	tblptru,c
   148  000AEA  0009               	tblrd		*+	;fetch initializer
   149  000AEC  CFF5 F02E          	movff	tablat,__pdataCOMRAM
   150  000AF0  0009               	tblrd		*+	;fetch initializer
   151  000AF2  CFF5 F02F          	movff	tablat,__pdataCOMRAM+1
   152                           
   153                           ; Clear objects allocated to COMRAM (25 bytes)
   154  000AF6  EE00  F001         	lfsr	0,__pbssCOMRAM
   155  000AFA  0E19               	movlw	25
   156  000AFC                     clear_0:
   157  000AFC  6AEE               	clrf	postinc0,c
   158  000AFE  06E8               	decf	wreg,f,c
   159  000B00  E1FD               	bnz	clear_0
   160  000B02                     end_of_initialization:
   161                           	opt stack 0
   162  000B02                     __end_of__initialization:
   163                           	opt stack 0
   164  000B02  9030               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   165  000B04  9230               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   166  000B06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   167  000B08  6EF8               	movwf	tblptru,c
   168  000B0A  0100               	movlb	0
   169  000B0C  EF88  F005         	goto	_main	;jump to C main() function
   170                           tblptru	equ	0xFF8
   171                           tblptrh	equ	0xFF7
   172                           tblptrl	equ	0xFF6
   173                           tablat	equ	0xFF5
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	bssCOMRAM
   178  000001                     __pbssCOMRAM:
   179                           	opt stack 0
   180  000001                     _uartBuf:
   181                           	opt stack 0
   182  000001                     	ds	16
   183  000011                     _port:
   184                           	opt stack 0
   185  000011                     	ds	1
   186  000012                     _command:
   187                           	opt stack 0
   188  000012                     	ds	1
   189  000013                     _temp:
   190                           	opt stack 0
   191  000013                     	ds	1
   192  000014                     _checksumCalculated:
   193                           	opt stack 0
   194  000014                     	ds	1
   195  000015                     _checksum:
   196                           	opt stack 0
   197  000015                     	ds	1
   198  000016                     _value:
   199                           	opt stack 0
   200  000016                     	ds	1
   201  000017                     _state:
   202                           	opt stack 0
   203  000017                     	ds	1
   204  000018                     _uartWriteIndex:
   205                           	opt stack 0
   206  000018                     	ds	1
   207  000019                     _uartReadIndex:
   208                           	opt stack 0
   209  000019                     	ds	1
   210                           tblptru	equ	0xFF8
   211                           tblptrh	equ	0xFF7
   212                           tblptrl	equ	0xFF6
   213                           tablat	equ	0xFF5
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           
   217                           	psect	dataCOMRAM
   218  00002E                     __pdataCOMRAM:
   219                           	opt stack 0
   220  00002E                     _hex:
   221                           	opt stack 0
   222  00002E                     	ds	2
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	cstackCOMRAM
   231  00001A                     __pcstackCOMRAM:
   232                           	opt stack 0
   233  00001A                     ??_receiveData:
   234  00001A                     
   235                           ; 2 bytes @ 0x0
   236  00001A                     	ds	14
   237  000028                     writePortA@data:
   238                           	opt stack 0
   239  000028                     writePortB@data:
   240                           	opt stack 0
   241  000028                     writePortC@data:
   242                           	opt stack 0
   243  000028                     writePortD@data:
   244                           	opt stack 0
   245  000028                     writePortE@data:
   246                           	opt stack 0
   247  000028                     writeTrisA@data:
   248                           	opt stack 0
   249  000028                     writeTrisB@data:
   250                           	opt stack 0
   251  000028                     writeTrisC@data:
   252                           	opt stack 0
   253  000028                     writeTrisD@data:
   254                           	opt stack 0
   255  000028                     writeTrisE@data:
   256                           	opt stack 0
   257  000028                     readChar@data:
   258                           	opt stack 0
   259  000028                     writeChar@data:
   260                           	opt stack 0
   261  000028                     parseHex@x:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0xE
   265  000028                     	ds	1
   266  000029                     ??_writeHex:
   267                           
   268                           ; 1 bytes @ 0xF
   269  000029                     	ds	3
   270  00002C                     writeHex@data:
   271                           	opt stack 0
   272                           
   273                           ; 1 bytes @ 0x12
   274  00002C                     	ds	1
   275  00002D                     onData@d:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x13
   279  00002D                     	ds	1
   280  00002E                     tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           ; 1 bytes @ 0x14
   288 ;;
   289 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   290 ;;
   291 ;; *************** function _main *****************
   292 ;; Defined at:
   293 ;;		line 211 in file "main.c"
   294 ;; Parameters:    Size  Location     Type
   295 ;;		None
   296 ;; Auto vars:     Size  Location     Type
   297 ;;		None
   298 ;; Return value:  Size  Location     Type
   299 ;;                  2  129[None  ] int 
   300 ;; Registers used:
   301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   302 ;; Tracked objects:
   303 ;;		On entry : 0/0
   304 ;;		On exit  : 0/0
   305 ;;		Unchanged: 0/0
   306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   307 ;;      Params:         0       0       0       0       0       0       0       0       0
   308 ;;      Locals:         0       0       0       0       0       0       0       0       0
   309 ;;      Temps:          0       0       0       0       0       0       0       0       0
   310 ;;      Totals:         0       0       0       0       0       0       0       0       0
   311 ;;Total ram usage:        0 bytes
   312 ;; Hardware stack levels required when called:    4
   313 ;; This function calls:
   314 ;;		_initUart
   315 ;;		_onData
   316 ;;		_readChar
   317 ;; This function is called by:
   318 ;;		Startup code after reset
   319 ;; This function uses a non-reentrant model
   320 ;;
   321                           
   322                           	psect	text0
   323  000B10                     __ptext0:
   324                           	opt stack 0
   325  000B10                     _main:
   326                           	opt stack 27
   327                           
   328                           ;main.c: 214: OSCCONbits.IRCF = 7;
   329                           
   330                           ;incstack = 0
   331  000B10  88D3               	bsf	4051,4,c	;volatile
   332  000B12  8AD3               	bsf	4051,5,c	;volatile
   333  000B14  8CD3               	bsf	4051,6,c	;volatile
   334                           
   335                           ;main.c: 217: ANSELA = 0;
   336  000B16  0E00               	movlw	0
   337  000B18  010F               	movlb	15	; () banked
   338  000B1A  6F5B               	movwf	91,b	;volatile
   339                           
   340                           ;main.c: 218: ANSELC = 0;
   341  000B1C  0E00               	movlw	0
   342  000B1E  010F               	movlb	15	; () banked
   343  000B20  6F5D               	movwf	93,b	;volatile
   344                           
   345                           ;main.c: 221: ADCON0 = 0;
   346  000B22  0E00               	movlw	0
   347  000B24  6EC2               	movwf	4034,c	;volatile
   348                           
   349                           ; BSR set to: 15
   350                           ;main.c: 224: PORTC = 0xff;
   351  000B26  6882               	setf	3970,c	;volatile
   352                           
   353                           ; BSR set to: 15
   354                           ;main.c: 227: TRISA = 0xff;
   355  000B28  6892               	setf	3986,c	;volatile
   356                           
   357                           ; BSR set to: 15
   358                           ;main.c: 228: TRISB = 0xff;
   359  000B2A  6893               	setf	3987,c	;volatile
   360                           
   361                           ;main.c: 229: TRISC = 0b10111111;
   362  000B2C  0EBF               	movlw	191
   363  000B2E  6E94               	movwf	3988,c	;volatile
   364                           
   365                           ; BSR set to: 15
   366                           ;main.c: 230: TRISD = 0xff;
   367  000B30  6895               	setf	3989,c	;volatile
   368                           
   369                           ; BSR set to: 15
   370                           ;main.c: 232: initUart();
   371  000B32  ECCC  F005         	call	_initUart	;wreg free
   372  000B36                     l1199:
   373                           
   374                           ;main.c: 236: onData(readChar());
   375  000B36  ECA0  F005         	call	_readChar	;wreg free
   376  000B3A  EC0A  F004         	call	_onData
   377  000B3E  D7FB               	goto	l1199
   378  000B40                     __end_of_main:
   379                           	opt stack 0
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           
   387 ;; *************** function _readChar *****************
   388 ;; Defined at:
   389 ;;		line 195 in file "main.c"
   390 ;; Parameters:    Size  Location     Type
   391 ;;		None
   392 ;; Auto vars:     Size  Location     Type
   393 ;;  data            1   14[COMRAM] unsigned char 
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      unsigned char 
   396 ;; Registers used:
   397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   398 ;; Tracked objects:
   399 ;;		On entry : 0/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   403 ;;      Params:         0       0       0       0       0       0       0       0       0
   404 ;;      Locals:         1       0       0       0       0       0       0       0       0
   405 ;;      Temps:          0       0       0       0       0       0       0       0       0
   406 ;;      Totals:         1       0       0       0       0       0       0       0       0
   407 ;;Total ram usage:        1 bytes
   408 ;; Hardware stack levels used:    1
   409 ;; Hardware stack levels required when called:    1
   410 ;; This function calls:
   411 ;;		Nothing
   412 ;; This function is called by:
   413 ;;		_main
   414 ;; This function uses a non-reentrant model
   415 ;;
   416                           
   417                           	psect	text1
   418  000B40                     __ptext1:
   419                           	opt stack 0
   420  000B40                     _readChar:
   421                           	opt stack 29
   422  000B40                     l975:
   423  000B40  5018               	movf	_uartWriteIndex,w,c	;volatile
   424  000B42  1819               	xorwf	_uartReadIndex,w,c	;volatile
   425  000B44  B4D8               	btfsc	status,2,c
   426  000B46  D7FC               	goto	l975
   427                           
   428                           ;main.c: 199: data = uartBuf[uartReadIndex];
   429  000B48  5019               	movf	_uartReadIndex,w,c	;volatile
   430  000B4A  0D01               	mullw	1
   431  000B4C  0E01               	movlw	low _uartBuf
   432  000B4E  24F3               	addwf	prodl,w,c
   433  000B50  6ED9               	movwf	fsr2l,c
   434  000B52  0E00               	movlw	high _uartBuf
   435  000B54  20F4               	addwfc	prodh,w,c
   436  000B56  6EDA               	movwf	fsr2h,c
   437  000B58  50DF               	movf	indf2,w,c
   438  000B5A  6E28               	movwf	readChar@data,c
   439                           
   440                           ;main.c: 200: uartReadIndex++;
   441  000B5C  2A19               	incf	_uartReadIndex,f,c	;volatile
   442                           
   443                           ;main.c: 201: if (uartReadIndex == 16) uartReadIndex = 0;
   444  000B5E  0E10               	movlw	16
   445  000B60  1819               	xorwf	_uartReadIndex,w,c	;volatile
   446  000B62  A4D8               	btfss	status,2,c
   447  000B64  D002               	goto	l118
   448  000B66  0E00               	movlw	0
   449  000B68  6E19               	movwf	_uartReadIndex,c	;volatile
   450  000B6A                     l118:
   451                           
   452                           ;main.c: 202: return data;
   453  000B6A  5028               	movf	readChar@data,w,c
   454  000B6C  0012               	return	
   455  000B6E                     __end_of_readChar:
   456                           	opt stack 0
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           prodh	equ	0xFF4
   462                           prodl	equ	0xFF3
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           indf2	equ	0xFDF
   466                           fsr2h	equ	0xFDA
   467                           fsr2l	equ	0xFD9
   468                           status	equ	0xFD8
   469                           
   470 ;; *************** function _onData *****************
   471 ;; Defined at:
   472 ;;		line 76 in file "receiver.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;  d               1    wreg     unsigned char 
   475 ;; Auto vars:     Size  Location     Type
   476 ;;  d               1   19[COMRAM] unsigned char 
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   486 ;;      Params:         0       0       0       0       0       0       0       0       0
   487 ;;      Locals:         1       0       0       0       0       0       0       0       0
   488 ;;      Temps:          0       0       0       0       0       0       0       0       0
   489 ;;      Totals:         1       0       0       0       0       0       0       0       0
   490 ;;Total ram usage:        1 bytes
   491 ;; Hardware stack levels used:    1
   492 ;; Hardware stack levels required when called:    3
   493 ;; This function calls:
   494 ;;		_error
   495 ;;		_parseHex
   496 ;;		_readPortA
   497 ;;		_readPortB
   498 ;;		_readPortC
   499 ;;		_readPortD
   500 ;;		_readPortE
   501 ;;		_writeHex
   502 ;;		_writePortA
   503 ;;		_writePortB
   504 ;;		_writePortC
   505 ;;		_writePortD
   506 ;;		_writePortE
   507 ;;		_writeTrisA
   508 ;;		_writeTrisB
   509 ;;		_writeTrisC
   510 ;;		_writeTrisD
   511 ;;		_writeTrisE
   512 ;; This function is called by:
   513 ;;		_main
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text2
   518  000814                     __ptext2:
   519                           	opt stack 0
   520  000814                     _onData:
   521                           	opt stack 27
   522                           
   523                           ;incstack = 0
   524                           ;onData@d stored from wreg
   525  000814  6E2D               	movwf	onData@d,c
   526                           
   527                           ;receiver.c: 78: switch (state) {
   528  000816  D122               	goto	l1171
   529  000818                     l989:
   530                           
   531                           ;receiver.c: 80: if (d == '<') {
   532  000818  0E3C               	movlw	60
   533  00081A  182D               	xorwf	onData@d,w,c
   534  00081C  A4D8               	btfss	status,2,c
   535  00081E  0012               	return	
   536                           
   537                           ;receiver.c: 81: state = STATE_COMMAND;
   538  000820  0E01               	movlw	1
   539  000822  6E17               	movwf	_state,c
   540                           
   541                           ;receiver.c: 82: checksumCalculated = 0;
   542  000824  0E00               	movlw	0
   543  000826  6E14               	movwf	_checksumCalculated,c
   544                           
   545                           ;receiver.c: 83: }
   546                           ;receiver.c: 84: break;
   547  000828  0012               	return	
   548  00082A                     l993:
   549                           
   550                           ;receiver.c: 86: checksumCalculated ^= d;
   551  00082A  502D               	movf	onData@d,w,c
   552  00082C  1A14               	xorwf	_checksumCalculated,f,c
   553                           
   554                           ;receiver.c: 87: state = STATE_PORT;
   555  00082E  0E02               	movlw	2
   556  000830  6E17               	movwf	_state,c
   557                           
   558                           ;receiver.c: 88: if (d == 'r') {
   559  000832  0E72               	movlw	114
   560  000834  182D               	xorwf	onData@d,w,c
   561  000836  A4D8               	btfss	status,2,c
   562  000838  D003               	goto	l1001
   563                           
   564                           ;receiver.c: 89: command = COMMAND_READ;
   565  00083A  0E00               	movlw	0
   566  00083C  6E12               	movwf	_command,c
   567                           
   568                           ;receiver.c: 90: } else if (d == 'w') {
   569  00083E  0012               	return	
   570  000840                     l1001:
   571  000840  0E77               	movlw	119
   572  000842  182D               	xorwf	onData@d,w,c
   573  000844  A4D8               	btfss	status,2,c
   574  000846  D003               	goto	l1005
   575                           
   576                           ;receiver.c: 91: command = COMMAND_WRITE;
   577  000848  0E01               	movlw	1
   578  00084A  6E12               	movwf	_command,c
   579                           
   580                           ;receiver.c: 92: } else if (d == 't') {
   581  00084C  0012               	return	
   582  00084E                     l1005:
   583  00084E  0E74               	movlw	116
   584  000850  182D               	xorwf	onData@d,w,c
   585  000852  A4D8               	btfss	status,2,c
   586  000854  D003               	goto	l1009
   587                           
   588                           ;receiver.c: 93: command = COMMAND_TRIS;
   589  000856  0E02               	movlw	2
   590  000858  6E12               	movwf	_command,c
   591                           
   592                           ;receiver.c: 94: } else {
   593  00085A  0012               	return	
   594  00085C                     l1009:
   595                           
   596                           ;receiver.c: 95: error();
   597  00085C  ECE1  F005         	call	_error	;wreg free
   598                           
   599                           ;receiver.c: 96: }
   600                           ;receiver.c: 97: break;
   601  000860  0012               	return	
   602  000862                     l1011:
   603                           
   604                           ;receiver.c: 99: checksumCalculated ^= d;
   605  000862  502D               	movf	onData@d,w,c
   606  000864  1A14               	xorwf	_checksumCalculated,f,c
   607                           
   608                           ;receiver.c: 100: if (command == COMMAND_READ) {
   609  000866  5012               	movf	_command,w,c
   610  000868  A4D8               	btfss	status,2,c
   611  00086A  D002               	goto	l1017
   612                           
   613                           ;receiver.c: 101: state = STATE_CHECKSUM_HIGH_NIBBLE;
   614  00086C  0E05               	movlw	5
   615  00086E  D001               	goto	L1
   616  000870                     l1017:
   617                           
   618                           ;receiver.c: 103: state = STATE_VALUE_HIGH_NIBBLE;
   619  000870  0E03               	movlw	3
   620  000872                     L1:
   621  000872  6E17               	movwf	_state,c
   622                           
   623                           ;receiver.c: 104: }
   624                           ;receiver.c: 105: if (d == 'a') {
   625  000874  0E61               	movlw	97
   626  000876  182D               	xorwf	onData@d,w,c
   627  000878  A4D8               	btfss	status,2,c
   628  00087A  D003               	goto	l1023
   629                           
   630                           ;receiver.c: 106: port = PORT_A;
   631  00087C  0E00               	movlw	0
   632  00087E  6E11               	movwf	_port,c
   633                           
   634                           ;receiver.c: 107: } else if (d == 'b') {
   635  000880  0012               	return	
   636  000882                     l1023:
   637  000882  0E62               	movlw	98
   638  000884  182D               	xorwf	onData@d,w,c
   639  000886  A4D8               	btfss	status,2,c
   640  000888  D003               	goto	l1027
   641                           
   642                           ;receiver.c: 108: port = PORT_B;
   643  00088A  0E01               	movlw	1
   644  00088C  6E11               	movwf	_port,c
   645                           
   646                           ;receiver.c: 109: } else if (d == 'c') {
   647  00088E  0012               	return	
   648  000890                     l1027:
   649  000890  0E63               	movlw	99
   650  000892  182D               	xorwf	onData@d,w,c
   651  000894  A4D8               	btfss	status,2,c
   652  000896  D003               	goto	l1031
   653                           
   654                           ;receiver.c: 110: port = PORT_C;
   655  000898  0E02               	movlw	2
   656  00089A  6E11               	movwf	_port,c
   657                           
   658                           ;receiver.c: 111: } else if (d == 'd') {
   659  00089C  0012               	return	
   660  00089E                     l1031:
   661  00089E  0E64               	movlw	100
   662  0008A0  182D               	xorwf	onData@d,w,c
   663  0008A2  A4D8               	btfss	status,2,c
   664  0008A4  D003               	goto	l1035
   665                           
   666                           ;receiver.c: 112: port = PORT_D;
   667  0008A6  0E03               	movlw	3
   668  0008A8  6E11               	movwf	_port,c
   669                           
   670                           ;receiver.c: 113: } else if (d == 'e') {
   671  0008AA  0012               	return	
   672  0008AC                     l1035:
   673  0008AC  0E65               	movlw	101
   674  0008AE  182D               	xorwf	onData@d,w,c
   675  0008B0  A4D8               	btfss	status,2,c
   676  0008B2  D003               	goto	l1039
   677                           
   678                           ;receiver.c: 114: port = PORT_E;
   679  0008B4  0E04               	movlw	4
   680  0008B6  6E11               	movwf	_port,c
   681                           
   682                           ;receiver.c: 115: } else {
   683  0008B8  0012               	return	
   684  0008BA                     l1039:
   685                           
   686                           ;receiver.c: 116: error();
   687  0008BA  ECE1  F005         	call	_error	;wreg free
   688                           
   689                           ;receiver.c: 117: }
   690                           ;receiver.c: 118: break;
   691  0008BE  0012               	return	
   692  0008C0                     l1041:
   693                           
   694                           ;receiver.c: 120: checksumCalculated ^= d;
   695  0008C0  502D               	movf	onData@d,w,c
   696  0008C2  1A14               	xorwf	_checksumCalculated,f,c
   697                           
   698                           ;receiver.c: 121: temp = parseHex(d);
   699  0008C4  502D               	movf	onData@d,w,c
   700  0008C6  ECB7  F005         	call	_parseHex
   701  0008CA  6E13               	movwf	_temp,c
   702                           
   703                           ;receiver.c: 122: if (temp < 0) {
   704  0008CC  AE13               	btfss	_temp,7,c
   705  0008CE  D003               	goto	l1049
   706                           
   707                           ;receiver.c: 123: error();
   708  0008D0  ECE1  F005         	call	_error	;wreg free
   709                           
   710                           ;receiver.c: 124: } else {
   711  0008D4  0012               	return	
   712  0008D6                     l1049:
   713                           
   714                           ;receiver.c: 125: state = STATE_VALUE_LOW_NIBBLE;
   715  0008D6  0E04               	movlw	4
   716  0008D8  6E17               	movwf	_state,c
   717                           
   718                           ;receiver.c: 126: value = (uint8_t) temp;
   719  0008DA  C013  F016         	movff	_temp,_value
   720                           
   721                           ;receiver.c: 127: value <<= 4;
   722  0008DE  3A16               	swapf	_value,f,c
   723  0008E0  0EF0               	movlw	240
   724  0008E2  1616               	andwf	_value,f,c
   725                           
   726                           ;receiver.c: 128: }
   727                           ;receiver.c: 129: break;
   728  0008E4  0012               	return	
   729  0008E6                     l1055:
   730                           
   731                           ;receiver.c: 131: checksumCalculated ^= d;
   732  0008E6  502D               	movf	onData@d,w,c
   733  0008E8  1A14               	xorwf	_checksumCalculated,f,c
   734                           
   735                           ;receiver.c: 132: temp = parseHex(d);
   736  0008EA  502D               	movf	onData@d,w,c
   737  0008EC  ECB7  F005         	call	_parseHex
   738  0008F0  6E13               	movwf	_temp,c
   739                           
   740                           ;receiver.c: 133: if (temp < 0) {
   741  0008F2  AE13               	btfss	_temp,7,c
   742  0008F4  D003               	goto	l1063
   743                           
   744                           ;receiver.c: 134: error();
   745  0008F6  ECE1  F005         	call	_error	;wreg free
   746                           
   747                           ;receiver.c: 135: } else {
   748  0008FA  0012               	return	
   749  0008FC                     l1063:
   750                           
   751                           ;receiver.c: 136: state = STATE_CHECKSUM_HIGH_NIBBLE;
   752  0008FC  0E05               	movlw	5
   753  0008FE  6E17               	movwf	_state,c
   754                           
   755                           ;receiver.c: 137: value |= (uint8_t) temp;
   756  000900  5013               	movf	_temp,w,c
   757  000902  1216               	iorwf	_value,f,c
   758                           
   759                           ;receiver.c: 138: }
   760                           ;receiver.c: 139: break;
   761  000904  0012               	return	
   762  000906                     l1067:
   763                           
   764                           ;receiver.c: 141: temp = parseHex(d);
   765  000906  502D               	movf	onData@d,w,c
   766  000908  ECB7  F005         	call	_parseHex
   767  00090C  6E13               	movwf	_temp,c
   768                           
   769                           ;receiver.c: 142: if (temp < 0) {
   770  00090E  AE13               	btfss	_temp,7,c
   771  000910  D003               	goto	l1073
   772                           
   773                           ;receiver.c: 143: error();
   774  000912  ECE1  F005         	call	_error	;wreg free
   775                           
   776                           ;receiver.c: 144: } else {
   777  000916  0012               	return	
   778  000918                     l1073:
   779                           
   780                           ;receiver.c: 145: state = STATE_CHECKSUM_LOW_NIBBLE;
   781  000918  0E06               	movlw	6
   782  00091A  6E17               	movwf	_state,c
   783                           
   784                           ;receiver.c: 146: checksum = (uint8_t) temp;
   785  00091C  C013  F015         	movff	_temp,_checksum
   786                           
   787                           ;receiver.c: 147: checksum <<= 4;
   788  000920  3A15               	swapf	_checksum,f,c
   789  000922  0EF0               	movlw	240
   790  000924  1615               	andwf	_checksum,f,c
   791                           
   792                           ;receiver.c: 148: }
   793                           ;receiver.c: 149: break;
   794  000926  0012               	return	
   795  000928                     l1079:
   796                           
   797                           ;receiver.c: 151: temp = parseHex(d);
   798  000928  502D               	movf	onData@d,w,c
   799  00092A  ECB7  F005         	call	_parseHex
   800  00092E  6E13               	movwf	_temp,c
   801                           
   802                           ;receiver.c: 152: if (temp < 0) {
   803  000930  AE13               	btfss	_temp,7,c
   804  000932  D003               	goto	l1085
   805                           
   806                           ;receiver.c: 153: error();
   807  000934  ECE1  F005         	call	_error	;wreg free
   808                           
   809                           ;receiver.c: 154: } else {
   810  000938  0012               	return	
   811  00093A                     l1085:
   812                           
   813                           ;receiver.c: 155: state = STATE_END;
   814  00093A  0E07               	movlw	7
   815  00093C  6E17               	movwf	_state,c
   816                           
   817                           ;receiver.c: 156: checksum |= (uint8_t) temp;
   818  00093E  5013               	movf	_temp,w,c
   819  000940  1215               	iorwf	_checksum,f,c
   820                           
   821                           ;receiver.c: 157: }
   822                           ;receiver.c: 158: break;
   823  000942  0012               	return	
   824  000944                     l1089:
   825                           
   826                           ;receiver.c: 160: if (d == '>') {
   827  000944  0E3E               	movlw	62
   828  000946  182D               	xorwf	onData@d,w,c
   829  000948  A4D8               	btfss	status,2,c
   830  00094A  D085               	goto	l1167
   831                           
   832                           ;receiver.c: 161: state = STATE_IDLE;
   833  00094C  0E00               	movlw	0
   834  00094E  6E17               	movwf	_state,c
   835                           
   836                           ;receiver.c: 162: if (checksumCalculated == checksum) {
   837  000950  5015               	movf	_checksum,w,c
   838  000952  1814               	xorwf	_checksumCalculated,w,c
   839  000954  A4D8               	btfss	status,2,c
   840  000956  D07C               	goto	l1165
   841                           
   842                           ;receiver.c: 163: if (command == COMMAND_WRITE) {
   843  000958  0412               	decf	_command,w,c
   844  00095A  A4D8               	btfss	status,2,c
   845  00095C  D026               	goto	l1117
   846                           
   847                           ;receiver.c: 164: if (port == PORT_A) {
   848  00095E  5011               	movf	_port,w,c
   849  000960  A4D8               	btfss	status,2,c
   850  000962  D004               	goto	l1101
   851                           
   852                           ;receiver.c: 165: writePortA(value);
   853  000964  5016               	movf	_value,w,c
   854  000966  EC0D  F006         	call	_writePortA
   855                           
   856                           ;receiver.c: 166: } else if (port == PORT_B) {
   857  00096A  D048               	goto	l1139
   858  00096C                     l1101:
   859  00096C  0411               	decf	_port,w,c
   860  00096E  A4D8               	btfss	status,2,c
   861  000970  D004               	goto	l1105
   862                           
   863                           ;receiver.c: 167: writePortB(value);
   864  000972  5016               	movf	_value,w,c
   865  000974  EC09  F006         	call	_writePortB
   866                           
   867                           ;receiver.c: 168: } else if (port == PORT_C) {
   868  000978  D041               	goto	l1139
   869  00097A                     l1105:
   870  00097A  0E02               	movlw	2
   871  00097C  1811               	xorwf	_port,w,c
   872  00097E  A4D8               	btfss	status,2,c
   873  000980  D004               	goto	l1109
   874                           
   875                           ;receiver.c: 169: writePortC(value);
   876  000982  5016               	movf	_value,w,c
   877  000984  EC05  F006         	call	_writePortC
   878                           
   879                           ;receiver.c: 170: } else if (port == PORT_D) {
   880  000988  D039               	goto	l1139
   881  00098A                     l1109:
   882  00098A  0E03               	movlw	3
   883  00098C  1811               	xorwf	_port,w,c
   884  00098E  A4D8               	btfss	status,2,c
   885  000990  D004               	goto	l1113
   886                           
   887                           ;receiver.c: 171: writePortD(value);
   888  000992  5016               	movf	_value,w,c
   889  000994  EC01  F006         	call	_writePortD
   890                           
   891                           ;receiver.c: 172: } else if (port == PORT_E) {
   892  000998  D031               	goto	l1139
   893  00099A                     l1113:
   894  00099A  0E04               	movlw	4
   895  00099C  1811               	xorwf	_port,w,c
   896  00099E  A4D8               	btfss	status,2,c
   897  0009A0  D02D               	goto	l1139
   898                           
   899                           ;receiver.c: 173: writePortE(value);
   900  0009A2  5016               	movf	_value,w,c
   901  0009A4  ECFD  F005         	call	_writePortE
   902                           
   903                           ;receiver.c: 174: }
   904                           ;receiver.c: 175: } else if (command == COMMAND_TRIS) {
   905  0009A8  D029               	goto	l1139
   906  0009AA                     l1117:
   907  0009AA  0E02               	movlw	2
   908  0009AC  1812               	xorwf	_command,w,c
   909  0009AE  A4D8               	btfss	status,2,c
   910  0009B0  D025               	goto	l1139
   911                           
   912                           ;receiver.c: 176: if (port == PORT_A) {
   913  0009B2  5011               	movf	_port,w,c
   914  0009B4  A4D8               	btfss	status,2,c
   915  0009B6  D004               	goto	l1123
   916                           
   917                           ;receiver.c: 177: writeTrisA(value);
   918  0009B8  5016               	movf	_value,w,c
   919  0009BA  ECF9  F005         	call	_writeTrisA
   920                           
   921                           ;receiver.c: 178: } else if (port == PORT_B) {
   922  0009BE  D01E               	goto	l1139
   923  0009C0                     l1123:
   924  0009C0  0411               	decf	_port,w,c
   925  0009C2  A4D8               	btfss	status,2,c
   926  0009C4  D004               	goto	l1127
   927                           
   928                           ;receiver.c: 179: writeTrisB(value);
   929  0009C6  5016               	movf	_value,w,c
   930  0009C8  ECF5  F005         	call	_writeTrisB
   931                           
   932                           ;receiver.c: 180: } else if (port == PORT_C) {
   933  0009CC  D017               	goto	l1139
   934  0009CE                     l1127:
   935  0009CE  0E02               	movlw	2
   936  0009D0  1811               	xorwf	_port,w,c
   937  0009D2  A4D8               	btfss	status,2,c
   938  0009D4  D004               	goto	l1131
   939                           
   940                           ;receiver.c: 181: writeTrisC(value);
   941  0009D6  5016               	movf	_value,w,c
   942  0009D8  ECDB  F005         	call	_writeTrisC
   943                           
   944                           ;receiver.c: 182: } else if (port == PORT_D) {
   945  0009DC  D00F               	goto	l1139
   946  0009DE                     l1131:
   947  0009DE  0E03               	movlw	3
   948  0009E0  1811               	xorwf	_port,w,c
   949  0009E2  A4D8               	btfss	status,2,c
   950  0009E4  D004               	goto	l1135
   951                           
   952                           ;receiver.c: 183: writeTrisD(value);
   953  0009E6  5016               	movf	_value,w,c
   954  0009E8  ECF1  F005         	call	_writeTrisD
   955                           
   956                           ;receiver.c: 184: } else if (port == PORT_E) {
   957  0009EC  D007               	goto	l1139
   958  0009EE                     l1135:
   959  0009EE  0E04               	movlw	4
   960  0009F0  1811               	xorwf	_port,w,c
   961  0009F2  A4D8               	btfss	status,2,c
   962  0009F4  D003               	goto	l1139
   963                           
   964                           ;receiver.c: 185: writeTrisE(value);
   965  0009F6  5016               	movf	_value,w,c
   966  0009F8  ECED  F005         	call	_writeTrisE
   967  0009FC                     l1139:
   968                           
   969                           ;receiver.c: 186: }
   970                           ;receiver.c: 187: }
   971                           ;receiver.c: 188: if (port == PORT_A) {
   972  0009FC  5011               	movf	_port,w,c
   973  0009FE  A4D8               	btfss	status,2,c
   974  000A00  D003               	goto	l1143
   975                           
   976                           ;receiver.c: 189: value = readPortA();
   977  000A02  EC19  F006         	call	_readPortA	;wreg free
   978  000A06  D01A               	goto	L5
   979  000A08                     l1143:
   980  000A08  0411               	decf	_port,w,c
   981  000A0A  A4D8               	btfss	status,2,c
   982  000A0C  D003               	goto	l1147
   983                           
   984                           ;receiver.c: 191: value = readPortB();
   985  000A0E  EC17  F006         	call	_readPortB	;wreg free
   986  000A12  D014               	goto	L5
   987  000A14                     l1147:
   988  000A14  0E02               	movlw	2
   989  000A16  1811               	xorwf	_port,w,c
   990  000A18  A4D8               	btfss	status,2,c
   991  000A1A  D003               	goto	l1151
   992                           
   993                           ;receiver.c: 193: value = readPortC();
   994  000A1C  EC15  F006         	call	_readPortC	;wreg free
   995  000A20  D00D               	goto	L5
   996  000A22                     l1151:
   997  000A22  0E03               	movlw	3
   998  000A24  1811               	xorwf	_port,w,c
   999  000A26  A4D8               	btfss	status,2,c
  1000  000A28  D003               	goto	l1155
  1001                           
  1002                           ;receiver.c: 195: value = readPortD();
  1003  000A2A  EC13  F006         	call	_readPortD	;wreg free
  1004  000A2E  D006               	goto	L5
  1005  000A30                     l1155:
  1006  000A30  0E04               	movlw	4
  1007  000A32  1811               	xorwf	_port,w,c
  1008  000A34  A4D8               	btfss	status,2,c
  1009  000A36  D003               	goto	l1159
  1010                           
  1011                           ;receiver.c: 197: value = readPortE();
  1012  000A38  EC11  F006         	call	_readPortE	;wreg free
  1013  000A3C                     L5:
  1014  000A3C  6E16               	movwf	_value,c
  1015  000A3E                     l1159:
  1016                           
  1017                           ;receiver.c: 198: }
  1018                           ;receiver.c: 199: writeHex(value);
  1019  000A3E  5016               	movf	_value,w,c
  1020  000A40  EC48  F005         	call	_writeHex
  1021                           
  1022                           ;receiver.c: 200: value ^= 0xff;
  1023  000A44  0EFF               	movlw	255
  1024  000A46  1A16               	xorwf	_value,f,c
  1025                           
  1026                           ;receiver.c: 201: writeHex(value);
  1027  000A48  5016               	movf	_value,w,c
  1028  000A4A  EC48  F005         	call	_writeHex
  1029                           
  1030                           ;receiver.c: 202: } else {
  1031  000A4E  0012               	return	
  1032  000A50                     l1165:
  1033                           
  1034                           ;receiver.c: 203: error();
  1035  000A50  ECE1  F005         	call	_error	;wreg free
  1036                           
  1037                           ;receiver.c: 204: }
  1038                           ;receiver.c: 205: } else {
  1039  000A54  0012               	return	
  1040  000A56                     l1167:
  1041                           
  1042                           ;receiver.c: 206: error();
  1043  000A56  ECE1  F005         	call	_error	;wreg free
  1044                           
  1045                           ;receiver.c: 209: }
  1046                           
  1047                           ;receiver.c: 207: }
  1048                           ;receiver.c: 208: break;
  1049  000A5A  0012               	return	
  1050  000A5C                     l1171:
  1051  000A5C  5017               	movf	_state,w,c
  1052                           
  1053                           ; Switch size 1, requested type "space"
  1054                           ; Number of cases is 8, Range of values is 0 to 7
  1055                           ; switch strategies available:
  1056                           ; Name         Instructions Cycles
  1057                           ; simple_byte           25    13 (average)
  1058                           ;	Chosen strategy is simple_byte
  1059  000A5E  0A00               	xorlw	0	; case 0
  1060  000A60  B4D8               	btfsc	status,2,c
  1061  000A62  D6DA               	goto	l989
  1062  000A64  0A01               	xorlw	1	; case 1
  1063  000A66  B4D8               	btfsc	status,2,c
  1064  000A68  D6E0               	goto	l993
  1065  000A6A  0A03               	xorlw	3	; case 2
  1066  000A6C  B4D8               	btfsc	status,2,c
  1067  000A6E  D6F9               	goto	l1011
  1068  000A70  0A01               	xorlw	1	; case 3
  1069  000A72  B4D8               	btfsc	status,2,c
  1070  000A74  D725               	goto	l1041
  1071  000A76  0A07               	xorlw	7	; case 4
  1072  000A78  B4D8               	btfsc	status,2,c
  1073  000A7A  D735               	goto	l1055
  1074  000A7C  0A01               	xorlw	1	; case 5
  1075  000A7E  B4D8               	btfsc	status,2,c
  1076  000A80  D742               	goto	l1067
  1077  000A82  0A03               	xorlw	3	; case 6
  1078  000A84  B4D8               	btfsc	status,2,c
  1079  000A86  D750               	goto	l1079
  1080  000A88  0A01               	xorlw	1	; case 7
  1081  000A8A  A4D8               	btfss	status,2,c
  1082  000A8C  0012               	return	
  1083  000A8E  D75A               	goto	l1089
  1084  000A90                     __end_of_onData:
  1085                           	opt stack 0
  1086                           tblptru	equ	0xFF8
  1087                           tblptrh	equ	0xFF7
  1088                           tblptrl	equ	0xFF6
  1089                           tablat	equ	0xFF5
  1090                           prodh	equ	0xFF4
  1091                           prodl	equ	0xFF3
  1092                           postinc0	equ	0xFEE
  1093                           wreg	equ	0xFE8
  1094                           indf2	equ	0xFDF
  1095                           fsr2h	equ	0xFDA
  1096                           fsr2l	equ	0xFD9
  1097                           status	equ	0xFD8
  1098                           
  1099 ;; *************** function _writeTrisE *****************
  1100 ;; Defined at:
  1101 ;;		line 165 in file "main.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;  data            1    wreg     unsigned char 
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  data            1   14[COMRAM] unsigned char 
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  1    wreg      void 
  1108 ;; Registers used:
  1109 ;;		wreg
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1115 ;;      Params:         0       0       0       0       0       0       0       0       0
  1116 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1118 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1119 ;;Total ram usage:        1 bytes
  1120 ;; Hardware stack levels used:    1
  1121 ;; Hardware stack levels required when called:    1
  1122 ;; This function calls:
  1123 ;;		Nothing
  1124 ;; This function is called by:
  1125 ;;		_onData
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text3
  1130  000BDA                     __ptext3:
  1131                           	opt stack 0
  1132  000BDA                     _writeTrisE:
  1133                           	opt stack 28
  1134                           
  1135                           ;incstack = 0
  1136                           ;writeTrisE@data stored from wreg
  1137  000BDA  6E28               	movwf	writeTrisE@data,c
  1138                           
  1139                           ;main.c: 167: TRISE = data;
  1140  000BDC  C028  FF96         	movff	writeTrisE@data,3990	;volatile
  1141  000BE0  0012               	return		;funcret
  1142  000BE2                     __end_of_writeTrisE:
  1143                           	opt stack 0
  1144                           tblptru	equ	0xFF8
  1145                           tblptrh	equ	0xFF7
  1146                           tblptrl	equ	0xFF6
  1147                           tablat	equ	0xFF5
  1148                           prodh	equ	0xFF4
  1149                           prodl	equ	0xFF3
  1150                           postinc0	equ	0xFEE
  1151                           wreg	equ	0xFE8
  1152                           indf2	equ	0xFDF
  1153                           fsr2h	equ	0xFDA
  1154                           fsr2l	equ	0xFD9
  1155                           status	equ	0xFD8
  1156                           
  1157 ;; *************** function _writeTrisD *****************
  1158 ;; Defined at:
  1159 ;;		line 160 in file "main.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  data            1    wreg     unsigned char 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  data            1   14[COMRAM] unsigned char 
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1173 ;;      Params:         0       0       0       0       0       0       0       0       0
  1174 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1175 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1176 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1177 ;;Total ram usage:        1 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    1
  1180 ;; This function calls:
  1181 ;;		Nothing
  1182 ;; This function is called by:
  1183 ;;		_onData
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text4
  1188  000BE2                     __ptext4:
  1189                           	opt stack 0
  1190  000BE2                     _writeTrisD:
  1191                           	opt stack 28
  1192                           
  1193                           ;incstack = 0
  1194                           ;writeTrisD@data stored from wreg
  1195  000BE2  6E28               	movwf	writeTrisD@data,c
  1196                           
  1197                           ;main.c: 162: TRISD = data;
  1198  000BE4  C028  FF95         	movff	writeTrisD@data,3989	;volatile
  1199  000BE8  0012               	return		;funcret
  1200  000BEA                     __end_of_writeTrisD:
  1201                           	opt stack 0
  1202                           tblptru	equ	0xFF8
  1203                           tblptrh	equ	0xFF7
  1204                           tblptrl	equ	0xFF6
  1205                           tablat	equ	0xFF5
  1206                           prodh	equ	0xFF4
  1207                           prodl	equ	0xFF3
  1208                           postinc0	equ	0xFEE
  1209                           wreg	equ	0xFE8
  1210                           indf2	equ	0xFDF
  1211                           fsr2h	equ	0xFDA
  1212                           fsr2l	equ	0xFD9
  1213                           status	equ	0xFD8
  1214                           
  1215 ;; *************** function _writeTrisC *****************
  1216 ;; Defined at:
  1217 ;;		line 154 in file "main.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  data            1    wreg     unsigned char 
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  data            1   14[COMRAM] unsigned char 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, status,2, status,0
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1231 ;;      Params:         0       0       0       0       0       0       0       0       0
  1232 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1234 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1235 ;;Total ram usage:        1 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; Hardware stack levels required when called:    1
  1238 ;; This function calls:
  1239 ;;		Nothing
  1240 ;; This function is called by:
  1241 ;;		_onData
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text5
  1246  000BB6                     __ptext5:
  1247                           	opt stack 0
  1248  000BB6                     _writeTrisC:
  1249                           	opt stack 28
  1250                           
  1251                           ;incstack = 0
  1252                           ;writeTrisC@data stored from wreg
  1253  000BB6  6E28               	movwf	writeTrisC@data,c
  1254                           
  1255                           ;main.c: 157: TRISC = data & 0b10111111 | 0x80;
  1256  000BB8  5028               	movf	writeTrisC@data,w,c
  1257  000BBA  0BBF               	andlw	191
  1258  000BBC  0980               	iorlw	128
  1259  000BBE  6E94               	movwf	3988,c	;volatile
  1260  000BC0  0012               	return		;funcret
  1261  000BC2                     __end_of_writeTrisC:
  1262                           	opt stack 0
  1263                           tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           prodh	equ	0xFF4
  1268                           prodl	equ	0xFF3
  1269                           postinc0	equ	0xFEE
  1270                           wreg	equ	0xFE8
  1271                           indf2	equ	0xFDF
  1272                           fsr2h	equ	0xFDA
  1273                           fsr2l	equ	0xFD9
  1274                           status	equ	0xFD8
  1275                           
  1276 ;; *************** function _writeTrisB *****************
  1277 ;; Defined at:
  1278 ;;		line 149 in file "main.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  data            1    wreg     unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  data            1   14[COMRAM] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1292 ;;      Params:         0       0       0       0       0       0       0       0       0
  1293 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1295 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1296 ;;Total ram usage:        1 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    1
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_onData
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text6
  1307  000BEA                     __ptext6:
  1308                           	opt stack 0
  1309  000BEA                     _writeTrisB:
  1310                           	opt stack 28
  1311                           
  1312                           ;incstack = 0
  1313                           ;writeTrisB@data stored from wreg
  1314  000BEA  6E28               	movwf	writeTrisB@data,c
  1315                           
  1316                           ;main.c: 151: TRISB = data;
  1317  000BEC  C028  FF93         	movff	writeTrisB@data,3987	;volatile
  1318  000BF0  0012               	return		;funcret
  1319  000BF2                     __end_of_writeTrisB:
  1320                           	opt stack 0
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           prodh	equ	0xFF4
  1326                           prodl	equ	0xFF3
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           indf2	equ	0xFDF
  1330                           fsr2h	equ	0xFDA
  1331                           fsr2l	equ	0xFD9
  1332                           status	equ	0xFD8
  1333                           
  1334 ;; *************** function _writeTrisA *****************
  1335 ;; Defined at:
  1336 ;;		line 144 in file "main.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;  data            1    wreg     unsigned char 
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;  data            1   14[COMRAM] unsigned char 
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  1    wreg      void 
  1343 ;; Registers used:
  1344 ;;		wreg
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1350 ;;      Params:         0       0       0       0       0       0       0       0       0
  1351 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1352 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1353 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1354 ;;Total ram usage:        1 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; Hardware stack levels required when called:    1
  1357 ;; This function calls:
  1358 ;;		Nothing
  1359 ;; This function is called by:
  1360 ;;		_onData
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text7
  1365  000BF2                     __ptext7:
  1366                           	opt stack 0
  1367  000BF2                     _writeTrisA:
  1368                           	opt stack 28
  1369                           
  1370                           ;incstack = 0
  1371                           ;writeTrisA@data stored from wreg
  1372  000BF2  6E28               	movwf	writeTrisA@data,c
  1373                           
  1374                           ;main.c: 146: TRISA = data;
  1375  000BF4  C028  FF92         	movff	writeTrisA@data,3986	;volatile
  1376  000BF8  0012               	return		;funcret
  1377  000BFA                     __end_of_writeTrisA:
  1378                           	opt stack 0
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           prodh	equ	0xFF4
  1384                           prodl	equ	0xFF3
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           indf2	equ	0xFDF
  1388                           fsr2h	equ	0xFDA
  1389                           fsr2l	equ	0xFD9
  1390                           status	equ	0xFD8
  1391                           
  1392 ;; *************** function _writePortE *****************
  1393 ;; Defined at:
  1394 ;;		line 139 in file "main.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;  data            1    wreg     unsigned char 
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;  data            1   14[COMRAM] unsigned char 
  1399 ;; Return value:  Size  Location     Type
  1400 ;;                  1    wreg      void 
  1401 ;; Registers used:
  1402 ;;		wreg
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1408 ;;      Params:         0       0       0       0       0       0       0       0       0
  1409 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1410 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1411 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1412 ;;Total ram usage:        1 bytes
  1413 ;; Hardware stack levels used:    1
  1414 ;; Hardware stack levels required when called:    1
  1415 ;; This function calls:
  1416 ;;		Nothing
  1417 ;; This function is called by:
  1418 ;;		_onData
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text8
  1423  000BFA                     __ptext8:
  1424                           	opt stack 0
  1425  000BFA                     _writePortE:
  1426                           	opt stack 28
  1427                           
  1428                           ;incstack = 0
  1429                           ;writePortE@data stored from wreg
  1430  000BFA  6E28               	movwf	writePortE@data,c
  1431                           
  1432                           ;main.c: 141: PORTE = data;
  1433  000BFC  C028  FF84         	movff	writePortE@data,3972	;volatile
  1434  000C00  0012               	return		;funcret
  1435  000C02                     __end_of_writePortE:
  1436                           	opt stack 0
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           prodh	equ	0xFF4
  1442                           prodl	equ	0xFF3
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           indf2	equ	0xFDF
  1446                           fsr2h	equ	0xFDA
  1447                           fsr2l	equ	0xFD9
  1448                           status	equ	0xFD8
  1449                           
  1450 ;; *************** function _writePortD *****************
  1451 ;; Defined at:
  1452 ;;		line 134 in file "main.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  data            1    wreg     unsigned char 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  data            1   14[COMRAM] unsigned char 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  1    wreg      void 
  1459 ;; Registers used:
  1460 ;;		wreg
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1466 ;;      Params:         0       0       0       0       0       0       0       0       0
  1467 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1469 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1470 ;;Total ram usage:        1 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    1
  1473 ;; This function calls:
  1474 ;;		Nothing
  1475 ;; This function is called by:
  1476 ;;		_onData
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text9
  1481  000C02                     __ptext9:
  1482                           	opt stack 0
  1483  000C02                     _writePortD:
  1484                           	opt stack 28
  1485                           
  1486                           ;incstack = 0
  1487                           ;writePortD@data stored from wreg
  1488  000C02  6E28               	movwf	writePortD@data,c
  1489                           
  1490                           ;main.c: 136: PORTD = data;
  1491  000C04  C028  FF83         	movff	writePortD@data,3971	;volatile
  1492  000C08  0012               	return		;funcret
  1493  000C0A                     __end_of_writePortD:
  1494                           	opt stack 0
  1495                           tblptru	equ	0xFF8
  1496                           tblptrh	equ	0xFF7
  1497                           tblptrl	equ	0xFF6
  1498                           tablat	equ	0xFF5
  1499                           prodh	equ	0xFF4
  1500                           prodl	equ	0xFF3
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           indf2	equ	0xFDF
  1504                           fsr2h	equ	0xFDA
  1505                           fsr2l	equ	0xFD9
  1506                           status	equ	0xFD8
  1507                           
  1508 ;; *************** function _writePortC *****************
  1509 ;; Defined at:
  1510 ;;		line 129 in file "main.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  data            1    wreg     unsigned char 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  data            1   14[COMRAM] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1524 ;;      Params:         0       0       0       0       0       0       0       0       0
  1525 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1527 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1528 ;;Total ram usage:        1 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    1
  1531 ;; This function calls:
  1532 ;;		Nothing
  1533 ;; This function is called by:
  1534 ;;		_onData
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text10
  1539  000C0A                     __ptext10:
  1540                           	opt stack 0
  1541  000C0A                     _writePortC:
  1542                           	opt stack 28
  1543                           
  1544                           ;incstack = 0
  1545                           ;writePortC@data stored from wreg
  1546  000C0A  6E28               	movwf	writePortC@data,c
  1547                           
  1548                           ;main.c: 131: PORTC = data;
  1549  000C0C  C028  FF82         	movff	writePortC@data,3970	;volatile
  1550  000C10  0012               	return		;funcret
  1551  000C12                     __end_of_writePortC:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           prodh	equ	0xFF4
  1558                           prodl	equ	0xFF3
  1559                           postinc0	equ	0xFEE
  1560                           wreg	equ	0xFE8
  1561                           indf2	equ	0xFDF
  1562                           fsr2h	equ	0xFDA
  1563                           fsr2l	equ	0xFD9
  1564                           status	equ	0xFD8
  1565                           
  1566 ;; *************** function _writePortB *****************
  1567 ;; Defined at:
  1568 ;;		line 124 in file "main.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;  data            1    wreg     unsigned char 
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;  data            1   14[COMRAM] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1582 ;;      Params:         0       0       0       0       0       0       0       0       0
  1583 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1584 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1585 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1586 ;;Total ram usage:        1 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    1
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_onData
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text11
  1597  000C12                     __ptext11:
  1598                           	opt stack 0
  1599  000C12                     _writePortB:
  1600                           	opt stack 28
  1601                           
  1602                           ;incstack = 0
  1603                           ;writePortB@data stored from wreg
  1604  000C12  6E28               	movwf	writePortB@data,c
  1605                           
  1606                           ;main.c: 126: PORTB = data;
  1607  000C14  C028  FF81         	movff	writePortB@data,3969	;volatile
  1608  000C18  0012               	return		;funcret
  1609  000C1A                     __end_of_writePortB:
  1610                           	opt stack 0
  1611                           tblptru	equ	0xFF8
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           tablat	equ	0xFF5
  1615                           prodh	equ	0xFF4
  1616                           prodl	equ	0xFF3
  1617                           postinc0	equ	0xFEE
  1618                           wreg	equ	0xFE8
  1619                           indf2	equ	0xFDF
  1620                           fsr2h	equ	0xFDA
  1621                           fsr2l	equ	0xFD9
  1622                           status	equ	0xFD8
  1623                           
  1624 ;; *************** function _writePortA *****************
  1625 ;; Defined at:
  1626 ;;		line 119 in file "main.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  data            1    wreg     unsigned char 
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;  data            1   14[COMRAM] unsigned char 
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      void 
  1633 ;; Registers used:
  1634 ;;		wreg
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1640 ;;      Params:         0       0       0       0       0       0       0       0       0
  1641 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1642 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1643 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1644 ;;Total ram usage:        1 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; Hardware stack levels required when called:    1
  1647 ;; This function calls:
  1648 ;;		Nothing
  1649 ;; This function is called by:
  1650 ;;		_onData
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text12
  1655  000C1A                     __ptext12:
  1656                           	opt stack 0
  1657  000C1A                     _writePortA:
  1658                           	opt stack 28
  1659                           
  1660                           ;incstack = 0
  1661                           ;writePortA@data stored from wreg
  1662  000C1A  6E28               	movwf	writePortA@data,c
  1663                           
  1664                           ;main.c: 121: PORTA = data;
  1665  000C1C  C028  FF80         	movff	writePortA@data,3968	;volatile
  1666  000C20  0012               	return		;funcret
  1667  000C22                     __end_of_writePortA:
  1668                           	opt stack 0
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           prodh	equ	0xFF4
  1674                           prodl	equ	0xFF3
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           indf2	equ	0xFDF
  1678                           fsr2h	equ	0xFDA
  1679                           fsr2l	equ	0xFD9
  1680                           status	equ	0xFD8
  1681                           
  1682 ;; *************** function _writeHex *****************
  1683 ;; Defined at:
  1684 ;;		line 70 in file "receiver.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;  data            1    wreg     unsigned char 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;  data            1   18[COMRAM] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1698 ;;      Params:         0       0       0       0       0       0       0       0       0
  1699 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1700 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1701 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1702 ;;Total ram usage:        4 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    2
  1705 ;; This function calls:
  1706 ;;		_writeChar
  1707 ;; This function is called by:
  1708 ;;		_onData
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text13
  1713  000A90                     __ptext13:
  1714                           	opt stack 0
  1715  000A90                     _writeHex:
  1716                           	opt stack 27
  1717                           
  1718                           ;incstack = 0
  1719                           ;writeHex@data stored from wreg
  1720  000A90  6E2C               	movwf	writeHex@data,c
  1721                           
  1722                           ;receiver.c: 72: writeChar(hex[data >> 4]);
  1723  000A92  C02C  F029         	movff	writeHex@data,??_writeHex
  1724  000A96  3A29               	swapf	??_writeHex,f,c
  1725  000A98  0E0F               	movlw	15
  1726  000A9A  1629               	andwf	??_writeHex,f,c
  1727  000A9C  5029               	movf	??_writeHex,w,c
  1728  000A9E  242E               	addwf	_hex,w,c
  1729  000AA0  6E2A               	movwf	(??_writeHex+1)& (0+255),c
  1730  000AA2  0E00               	movlw	0
  1731  000AA4  202F               	addwfc	_hex+1,w,c
  1732  000AA6  6E2B               	movwf	(??_writeHex+2)& (0+255),c
  1733  000AA8  C02A  FFF6         	movff	??_writeHex+1,tblptrl
  1734  000AAC  C02B  FFF7         	movff	??_writeHex+2,tblptrh
  1735  000AB0                     	if	0	;tblptru may be non-zero
  1736  000AB0                     	endif
  1737  000AB0                     	if	0	;tblptru may be non-zero
  1738  000AB0                     	endif
  1739  000AB0  0008               	tblrd		*
  1740  000AB2  50F5               	movf	tablat,w,c
  1741  000AB4  ECE7  F005         	call	_writeChar
  1742                           
  1743                           ;receiver.c: 73: writeChar(hex[data & 0xf]);
  1744  000AB8  C02C  F029         	movff	writeHex@data,??_writeHex
  1745  000ABC  0E0F               	movlw	15
  1746  000ABE  1629               	andwf	??_writeHex,f,c
  1747  000AC0  5029               	movf	??_writeHex,w,c
  1748  000AC2  242E               	addwf	_hex,w,c
  1749  000AC4  6E2A               	movwf	(??_writeHex+1)& (0+255),c
  1750  000AC6  0E00               	movlw	0
  1751  000AC8  202F               	addwfc	_hex+1,w,c
  1752  000ACA  6E2B               	movwf	(??_writeHex+2)& (0+255),c
  1753  000ACC  C02A  FFF6         	movff	??_writeHex+1,tblptrl
  1754  000AD0  C02B  FFF7         	movff	??_writeHex+2,tblptrh
  1755  000AD4                     	if	0	;tblptru may be non-zero
  1756  000AD4                     	endif
  1757  000AD4                     	if	0	;tblptru may be non-zero
  1758  000AD4                     	endif
  1759  000AD4  0008               	tblrd		*
  1760  000AD6  50F5               	movf	tablat,w,c
  1761  000AD8  ECE7  F005         	call	_writeChar
  1762  000ADC  0012               	return		;funcret
  1763  000ADE                     __end_of_writeHex:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           postinc0	equ	0xFEE
  1772                           wreg	equ	0xFE8
  1773                           indf2	equ	0xFDF
  1774                           fsr2h	equ	0xFDA
  1775                           fsr2l	equ	0xFD9
  1776                           status	equ	0xFD8
  1777                           
  1778 ;; *************** function _readPortE *****************
  1779 ;; Defined at:
  1780 ;;		line 190 in file "main.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      unsigned char 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1797 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    1
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_onData
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text14
  1809  000C22                     __ptext14:
  1810                           	opt stack 0
  1811  000C22                     _readPortE:
  1812                           	opt stack 28
  1813                           
  1814                           ;main.c: 192: return PORTE;
  1815                           
  1816                           ;incstack = 0
  1817  000C22  5084               	movf	3972,w,c	;volatile
  1818  000C24  0012               	return	
  1819  000C26                     __end_of_readPortE:
  1820                           	opt stack 0
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           postinc0	equ	0xFEE
  1828                           wreg	equ	0xFE8
  1829                           indf2	equ	0xFDF
  1830                           fsr2h	equ	0xFDA
  1831                           fsr2l	equ	0xFD9
  1832                           status	equ	0xFD8
  1833                           
  1834 ;; *************** function _readPortD *****************
  1835 ;; Defined at:
  1836 ;;		line 185 in file "main.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      unsigned char 
  1843 ;; Registers used:
  1844 ;;		wreg, status,2
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1850 ;;      Params:         0       0       0       0       0       0       0       0       0
  1851 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1852 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1853 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1854 ;;Total ram usage:        0 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; Hardware stack levels required when called:    1
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		_onData
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text15
  1865  000C26                     __ptext15:
  1866                           	opt stack 0
  1867  000C26                     _readPortD:
  1868                           	opt stack 28
  1869                           
  1870                           ;main.c: 187: return PORTD;
  1871                           
  1872                           ;incstack = 0
  1873  000C26  5083               	movf	3971,w,c	;volatile
  1874  000C28  0012               	return	
  1875  000C2A                     __end_of_readPortD:
  1876                           	opt stack 0
  1877                           tblptru	equ	0xFF8
  1878                           tblptrh	equ	0xFF7
  1879                           tblptrl	equ	0xFF6
  1880                           tablat	equ	0xFF5
  1881                           prodh	equ	0xFF4
  1882                           prodl	equ	0xFF3
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           indf2	equ	0xFDF
  1886                           fsr2h	equ	0xFDA
  1887                           fsr2l	equ	0xFD9
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _readPortC *****************
  1891 ;; Defined at:
  1892 ;;		line 180 in file "main.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;		None
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;		None
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      unsigned char 
  1899 ;; Registers used:
  1900 ;;		wreg, status,2
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1906 ;;      Params:         0       0       0       0       0       0       0       0       0
  1907 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1909 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1910 ;;Total ram usage:        0 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    1
  1913 ;; This function calls:
  1914 ;;		Nothing
  1915 ;; This function is called by:
  1916 ;;		_onData
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text16
  1921  000C2A                     __ptext16:
  1922                           	opt stack 0
  1923  000C2A                     _readPortC:
  1924                           	opt stack 28
  1925                           
  1926                           ;main.c: 182: return PORTC;
  1927                           
  1928                           ;incstack = 0
  1929  000C2A  5082               	movf	3970,w,c	;volatile
  1930  000C2C  0012               	return	
  1931  000C2E                     __end_of_readPortC:
  1932                           	opt stack 0
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           prodh	equ	0xFF4
  1938                           prodl	equ	0xFF3
  1939                           postinc0	equ	0xFEE
  1940                           wreg	equ	0xFE8
  1941                           indf2	equ	0xFDF
  1942                           fsr2h	equ	0xFDA
  1943                           fsr2l	equ	0xFD9
  1944                           status	equ	0xFD8
  1945                           
  1946 ;; *************** function _readPortB *****************
  1947 ;; Defined at:
  1948 ;;		line 175 in file "main.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;		None
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;		None
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      unsigned char 
  1955 ;; Registers used:
  1956 ;;		wreg, status,2
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1962 ;;      Params:         0       0       0       0       0       0       0       0       0
  1963 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1965 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1966 ;;Total ram usage:        0 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; Hardware stack levels required when called:    1
  1969 ;; This function calls:
  1970 ;;		Nothing
  1971 ;; This function is called by:
  1972 ;;		_onData
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text17
  1977  000C2E                     __ptext17:
  1978                           	opt stack 0
  1979  000C2E                     _readPortB:
  1980                           	opt stack 28
  1981                           
  1982                           ;main.c: 177: return PORTB;
  1983                           
  1984                           ;incstack = 0
  1985  000C2E  5081               	movf	3969,w,c	;volatile
  1986  000C30  0012               	return	
  1987  000C32                     __end_of_readPortB:
  1988                           	opt stack 0
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           prodh	equ	0xFF4
  1994                           prodl	equ	0xFF3
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           indf2	equ	0xFDF
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _readPortA *****************
  2003 ;; Defined at:
  2004 ;;		line 170 in file "main.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  1    wreg      unsigned char 
  2011 ;; Registers used:
  2012 ;;		wreg, status,2
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2018 ;;      Params:         0       0       0       0       0       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2021 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2022 ;;Total ram usage:        0 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    1
  2025 ;; This function calls:
  2026 ;;		Nothing
  2027 ;; This function is called by:
  2028 ;;		_onData
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text18
  2033  000C32                     __ptext18:
  2034                           	opt stack 0
  2035  000C32                     _readPortA:
  2036                           	opt stack 28
  2037                           
  2038                           ;main.c: 172: return PORTA;
  2039                           
  2040                           ;incstack = 0
  2041  000C32  5080               	movf	3968,w,c	;volatile
  2042  000C34  0012               	return	
  2043  000C36                     __end_of_readPortA:
  2044                           	opt stack 0
  2045                           tblptru	equ	0xFF8
  2046                           tblptrh	equ	0xFF7
  2047                           tblptrl	equ	0xFF6
  2048                           tablat	equ	0xFF5
  2049                           prodh	equ	0xFF4
  2050                           prodl	equ	0xFF3
  2051                           postinc0	equ	0xFEE
  2052                           wreg	equ	0xFE8
  2053                           indf2	equ	0xFDF
  2054                           fsr2h	equ	0xFDA
  2055                           fsr2l	equ	0xFD9
  2056                           status	equ	0xFD8
  2057                           
  2058 ;; *************** function _parseHex *****************
  2059 ;; Defined at:
  2060 ;;		line 53 in file "receiver.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  x               1    wreg     unsigned char 
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;  x               1   14[COMRAM] unsigned char 
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  1    wreg      char 
  2067 ;; Registers used:
  2068 ;;		wreg, status,2, status,0
  2069 ;; Tracked objects:
  2070 ;;		On entry : 0/0
  2071 ;;		On exit  : 0/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2074 ;;      Params:         0       0       0       0       0       0       0       0       0
  2075 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2076 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2077 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2078 ;;Total ram usage:        1 bytes
  2079 ;; Hardware stack levels used:    1
  2080 ;; Hardware stack levels required when called:    1
  2081 ;; This function calls:
  2082 ;;		Nothing
  2083 ;; This function is called by:
  2084 ;;		_onData
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           	psect	text19
  2089  000B6E                     __ptext19:
  2090                           	opt stack 0
  2091  000B6E                     _parseHex:
  2092                           	opt stack 28
  2093                           
  2094                           ;incstack = 0
  2095                           ;parseHex@x stored from wreg
  2096  000B6E  6E28               	movwf	parseHex@x,c
  2097                           
  2098                           ;receiver.c: 55: if (x >= '0' && x <= '9') {
  2099  000B70  0E2F               	movlw	47
  2100  000B72  6428               	cpfsgt	parseHex@x,c
  2101  000B74  D006               	goto	l943
  2102  000B76  0E3A               	movlw	58
  2103  000B78  6028               	cpfslt	parseHex@x,c
  2104  000B7A  D003               	goto	l943
  2105                           
  2106                           ;receiver.c: 56: return x - '0';
  2107  000B7C  5028               	movf	parseHex@x,w,c
  2108  000B7E  0FD0               	addlw	208
  2109  000B80  0012               	return	
  2110  000B82                     l943:
  2111  000B82  0E60               	movlw	96
  2112  000B84  6428               	cpfsgt	parseHex@x,c
  2113  000B86  D006               	goto	l951
  2114  000B88  0E67               	movlw	103
  2115  000B8A  6028               	cpfslt	parseHex@x,c
  2116  000B8C  D003               	goto	l951
  2117                           
  2118                           ;receiver.c: 58: return x - 'a' + 10;
  2119  000B8E  5028               	movf	parseHex@x,w,c
  2120  000B90  0FA9               	addlw	169
  2121  000B92  0012               	return	
  2122  000B94                     l951:
  2123                           
  2124                           ;receiver.c: 59: }
  2125                           ;receiver.c: 60: return -1;
  2126  000B94  0EFF               	movlw	255
  2127  000B96  0012               	return	
  2128  000B98                     __end_of_parseHex:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           postinc0	equ	0xFEE
  2137                           wreg	equ	0xFE8
  2138                           indf2	equ	0xFDF
  2139                           fsr2h	equ	0xFDA
  2140                           fsr2l	equ	0xFD9
  2141                           status	equ	0xFD8
  2142                           
  2143 ;; *************** function _error *****************
  2144 ;; Defined at:
  2145 ;;		line 63 in file "receiver.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;		None
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;		None
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  1    wreg      void 
  2152 ;; Registers used:
  2153 ;;		wreg, status,2, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2159 ;;      Params:         0       0       0       0       0       0       0       0       0
  2160 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2161 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2162 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2163 ;;Total ram usage:        0 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    2
  2166 ;; This function calls:
  2167 ;;		_writeChar
  2168 ;; This function is called by:
  2169 ;;		_onData
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           	psect	text20
  2174  000BC2                     __ptext20:
  2175                           	opt stack 0
  2176  000BC2                     _error:
  2177                           	opt stack 27
  2178                           
  2179                           ;receiver.c: 65: state = STATE_IDLE;
  2180                           
  2181                           ;incstack = 0
  2182  000BC2  0E00               	movlw	0
  2183  000BC4  6E17               	movwf	_state,c
  2184                           
  2185                           ;receiver.c: 66: writeChar('?');
  2186  000BC6  0E3F               	movlw	63
  2187  000BC8  ECE7  F005         	call	_writeChar
  2188  000BCC  0012               	return		;funcret
  2189  000BCE                     __end_of_error:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           tblptrh	equ	0xFF7
  2193                           tblptrl	equ	0xFF6
  2194                           tablat	equ	0xFF5
  2195                           prodh	equ	0xFF4
  2196                           prodl	equ	0xFF3
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           indf2	equ	0xFDF
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _writeChar *****************
  2205 ;; Defined at:
  2206 ;;		line 205 in file "main.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  data            1    wreg     unsigned char 
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  data            1   14[COMRAM] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0
  2221 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2223 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2224 ;;Total ram usage:        1 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    1
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_error
  2231 ;;		_writeHex
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           	psect	text21
  2236  000BCE                     __ptext21:
  2237                           	opt stack 0
  2238  000BCE                     _writeChar:
  2239                           	opt stack 27
  2240                           
  2241                           ;incstack = 0
  2242                           ;writeChar@data stored from wreg
  2243  000BCE  6E28               	movwf	writeChar@data,c
  2244  000BD0                     l122:
  2245  000BD0  A2AC               	btfss	4012,1,c	;volatile
  2246  000BD2  D7FE               	goto	l122
  2247                           
  2248                           ;main.c: 208: TXREG1 = data;
  2249  000BD4  C028  FFAD         	movff	writeChar@data,4013	;volatile
  2250  000BD8  0012               	return		;funcret
  2251  000BDA                     __end_of_writeChar:
  2252                           	opt stack 0
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           prodh	equ	0xFF4
  2258                           prodl	equ	0xFF3
  2259                           postinc0	equ	0xFEE
  2260                           wreg	equ	0xFE8
  2261                           indf2	equ	0xFDF
  2262                           fsr2h	equ	0xFDA
  2263                           fsr2l	equ	0xFD9
  2264                           status	equ	0xFD8
  2265                           
  2266 ;; *************** function _initUart *****************
  2267 ;; Defined at:
  2268 ;;		line 96 in file "main.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		wreg, status,2
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2282 ;;      Params:         0       0       0       0       0       0       0       0       0
  2283 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2285 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2286 ;;Total ram usage:        0 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    1
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_main
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text22
  2297  000B98                     __ptext22:
  2298                           	opt stack 0
  2299  000B98                     _initUart:
  2300                           	opt stack 29
  2301                           
  2302                           ;main.c: 98: TXSTA1bits.SYNC = 0;
  2303                           
  2304                           ;incstack = 0
  2305  000B98  98AC               	bcf	4012,4,c	;volatile
  2306                           
  2307                           ;main.c: 99: TXSTA1bits.TX9 = 0;
  2308  000B9A  9CAC               	bcf	4012,6,c	;volatile
  2309                           
  2310                           ;main.c: 100: TXSTA1bits.TXEN = 1;
  2311  000B9C  8AAC               	bsf	4012,5,c	;volatile
  2312                           
  2313                           ;main.c: 102: RCSTA1bits.RX9 = 0;
  2314  000B9E  9CAB               	bcf	4011,6,c	;volatile
  2315                           
  2316                           ;main.c: 103: RCSTA1bits.CREN = 1;
  2317  000BA0  88AB               	bsf	4011,4,c	;volatile
  2318                           
  2319                           ;main.c: 104: RCSTA1bits.SPEN = 1;
  2320  000BA2  8EAB               	bsf	4011,7,c	;volatile
  2321                           
  2322                           ;main.c: 106: BAUDCON1bits.BRG16 = 1;
  2323  000BA4  86B8               	bsf	4024,3,c	;volatile
  2324                           
  2325                           ;main.c: 107: TXSTA1bits.BRGH = 1;
  2326  000BA6  84AC               	bsf	4012,2,c	;volatile
  2327                           
  2328                           ;main.c: 108: SPBRG1 = 7;
  2329  000BA8  0E07               	movlw	7
  2330  000BAA  6EAF               	movwf	4015,c	;volatile
  2331                           
  2332                           ;main.c: 111: RCONbits.IPEN = 1;
  2333  000BAC  8ED0               	bsf	4048,7,c	;volatile
  2334                           
  2335                           ;main.c: 112: INTCONbits.GIE = 1;
  2336  000BAE  8EF2               	bsf	intcon,7,c	;volatile
  2337                           
  2338                           ;main.c: 113: INTCONbits.PEIE = 1;
  2339  000BB0  8CF2               	bsf	intcon,6,c	;volatile
  2340                           
  2341                           ;main.c: 116: PIE1bits.RCIE = 1;
  2342  000BB2  8A9D               	bsf	3997,5,c	;volatile
  2343  000BB4  0012               	return		;funcret
  2344  000BB6                     __end_of_initUart:
  2345                           	opt stack 0
  2346                           tblptru	equ	0xFF8
  2347                           tblptrh	equ	0xFF7
  2348                           tblptrl	equ	0xFF6
  2349                           tablat	equ	0xFF5
  2350                           prodh	equ	0xFF4
  2351                           prodl	equ	0xFF3
  2352                           intcon	equ	0xFF2
  2353                           postinc0	equ	0xFEE
  2354                           wreg	equ	0xFE8
  2355                           indf2	equ	0xFDF
  2356                           fsr2h	equ	0xFDA
  2357                           fsr2l	equ	0xFD9
  2358                           status	equ	0xFD8
  2359                           
  2360 ;; *************** function _receiveData *****************
  2361 ;; Defined at:
  2362 ;;		line 83 in file "main.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;		None
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;		None
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      void 
  2369 ;; Registers used:
  2370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2376 ;;      Params:         0       0       0       0       0       0       0       0       0
  2377 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2378 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2379 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2380 ;;Total ram usage:       14 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; This function calls:
  2383 ;;		Nothing
  2384 ;; This function is called by:
  2385 ;;		Interrupt level 2
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           	psect	intcode
  2390  000008                     __pintcode:
  2391                           	opt stack 0
  2392  000008                     _receiveData:
  2393                           	opt stack 27
  2394                           
  2395                           ;incstack = 0
  2396  000008  8230               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2397  00000A  CFFA F01A          	movff	pclath,??_receiveData
  2398  00000E  CFFB F01B          	movff	pclatu,??_receiveData+1
  2399  000012  CFE9 F01C          	movff	fsr0l,??_receiveData+2
  2400  000016  CFEA F01D          	movff	fsr0h,??_receiveData+3
  2401  00001A  CFE1 F01E          	movff	fsr1l,??_receiveData+4
  2402  00001E  CFE2 F01F          	movff	fsr1h,??_receiveData+5
  2403  000022  CFD9 F020          	movff	fsr2l,??_receiveData+6
  2404  000026  CFDA F021          	movff	fsr2h,??_receiveData+7
  2405  00002A  CFF3 F022          	movff	prodl,??_receiveData+8
  2406  00002E  CFF4 F023          	movff	prodh,??_receiveData+9
  2407  000032  CFF6 F024          	movff	tblptrl,??_receiveData+10
  2408  000036  CFF7 F025          	movff	tblptrh,??_receiveData+11
  2409  00003A  CFF8 F026          	movff	tblptru,??_receiveData+12
  2410  00003E  CFF5 F027          	movff	tablat,??_receiveData+13
  2411                           
  2412                           ;main.c: 84: if (RCSTA1bits.OERR == 1) {
  2413  000042  A2AB               	btfss	4011,1,c	;volatile
  2414  000044  D003               	goto	i2l61
  2415                           
  2416                           ;main.c: 85: RCSTA1bits.OERR = 0;
  2417  000046  92AB               	bcf	4011,1,c	;volatile
  2418                           
  2419                           ;main.c: 86: RCSTA1bits.CREN = 0;
  2420  000048  98AB               	bcf	4011,4,c	;volatile
  2421                           
  2422                           ;main.c: 87: RCSTA1bits.CREN = 1;
  2423  00004A  88AB               	bsf	4011,4,c	;volatile
  2424  00004C                     i2l61:
  2425                           
  2426                           ;main.c: 88: }
  2427                           ;main.c: 89: if (PIR1bits.RC1IF == 1) {
  2428  00004C  AA9E               	btfss	3998,5,c	;volatile
  2429  00004E  D011               	goto	i2l64
  2430                           
  2431                           ;main.c: 90: uartBuf[uartWriteIndex] = RCREG1;
  2432  000050  5018               	movf	_uartWriteIndex,w,c	;volatile
  2433  000052  0D01               	mullw	1
  2434  000054  0E01               	movlw	low _uartBuf
  2435  000056  24F3               	addwf	prodl,w,c
  2436  000058  6ED9               	movwf	fsr2l,c
  2437  00005A  0E00               	movlw	high _uartBuf
  2438  00005C  20F4               	addwfc	prodh,w,c
  2439  00005E  6EDA               	movwf	fsr2h,c
  2440  000060  CFAE FFDF          	movff	4014,indf2	;volatile
  2441                           
  2442                           ;main.c: 91: uartWriteIndex++;
  2443  000064  2A18               	incf	_uartWriteIndex,f,c	;volatile
  2444                           
  2445                           ;main.c: 92: if (uartWriteIndex == 16) uartWriteIndex = 0;
  2446  000066  0E10               	movlw	16
  2447  000068  1818               	xorwf	_uartWriteIndex,w,c	;volatile
  2448  00006A  A4D8               	btfss	status,2,c
  2449  00006C  D002               	goto	i2l64
  2450  00006E  0E00               	movlw	0
  2451  000070  6E18               	movwf	_uartWriteIndex,c	;volatile
  2452  000072                     i2l64:
  2453  000072  C027  FFF5         	movff	??_receiveData+13,tablat
  2454  000076  C026  FFF8         	movff	??_receiveData+12,tblptru
  2455  00007A  C025  FFF7         	movff	??_receiveData+11,tblptrh
  2456  00007E  C024  FFF6         	movff	??_receiveData+10,tblptrl
  2457  000082  C023  FFF4         	movff	??_receiveData+9,prodh
  2458  000086  C022  FFF3         	movff	??_receiveData+8,prodl
  2459  00008A  C021  FFDA         	movff	??_receiveData+7,fsr2h
  2460  00008E  C020  FFD9         	movff	??_receiveData+6,fsr2l
  2461  000092  C01F  FFE2         	movff	??_receiveData+5,fsr1h
  2462  000096  C01E  FFE1         	movff	??_receiveData+4,fsr1l
  2463  00009A  C01D  FFEA         	movff	??_receiveData+3,fsr0h
  2464  00009E  C01C  FFE9         	movff	??_receiveData+2,fsr0l
  2465  0000A2  C01B  FFFB         	movff	??_receiveData+1,pclatu
  2466  0000A6  C01A  FFFA         	movff	??_receiveData,pclath
  2467  0000AA  9230               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2468  0000AC  0011               	retfie		f
  2469  0000AE                     __end_of_receiveData:
  2470                           	opt stack 0
  2471                           pclatu	equ	0xFFB
  2472                           pclath	equ	0xFFA
  2473                           tblptru	equ	0xFF8
  2474                           tblptrh	equ	0xFF7
  2475                           tblptrl	equ	0xFF6
  2476                           tablat	equ	0xFF5
  2477                           prodh	equ	0xFF4
  2478                           prodl	equ	0xFF3
  2479                           intcon	equ	0xFF2
  2480                           postinc0	equ	0xFEE
  2481                           fsr0h	equ	0xFEA
  2482                           fsr0l	equ	0xFE9
  2483                           wreg	equ	0xFE8
  2484                           fsr1h	equ	0xFE2
  2485                           fsr1l	equ	0xFE1
  2486                           indf2	equ	0xFDF
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           pclatu	equ	0xFFB
  2491                           pclath	equ	0xFFA
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           prodh	equ	0xFF4
  2497                           prodl	equ	0xFF3
  2498                           intcon	equ	0xFF2
  2499                           postinc0	equ	0xFEE
  2500                           fsr0h	equ	0xFEA
  2501                           fsr0l	equ	0xFE9
  2502                           wreg	equ	0xFE8
  2503                           fsr1h	equ	0xFE2
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           fsr2h	equ	0xFDA
  2507                           fsr2l	equ	0xFD9
  2508                           status	equ	0xFD8
  2509                           
  2510                           	psect	rparam
  2511  0000                     pclatu	equ	0xFFB
  2512                           pclath	equ	0xFFA
  2513                           tblptru	equ	0xFF8
  2514                           tblptrh	equ	0xFF7
  2515                           tblptrl	equ	0xFF6
  2516                           tablat	equ	0xFF5
  2517                           prodh	equ	0xFF4
  2518                           prodl	equ	0xFF3
  2519                           intcon	equ	0xFF2
  2520                           postinc0	equ	0xFEE
  2521                           fsr0h	equ	0xFEA
  2522                           fsr0l	equ	0xFE9
  2523                           wreg	equ	0xFE8
  2524                           fsr1h	equ	0xFE2
  2525                           fsr1l	equ	0xFE1
  2526                           indf2	equ	0xFDF
  2527                           fsr2h	equ	0xFDA
  2528                           fsr2l	equ	0xFD9
  2529                           status	equ	0xFD8
  2530                           
  2531                           	psect	temp
  2532  000030                     btemp:
  2533                           	opt stack 0
  2534  000030                     	ds	1
  2535  0000                     int$flags	set	btemp
  2536                           pclatu	equ	0xFFB
  2537                           pclath	equ	0xFFA
  2538                           tblptru	equ	0xFF8
  2539                           tblptrh	equ	0xFF7
  2540                           tblptrl	equ	0xFF6
  2541                           tablat	equ	0xFF5
  2542                           prodh	equ	0xFF4
  2543                           prodl	equ	0xFF3
  2544                           intcon	equ	0xFF2
  2545                           postinc0	equ	0xFEE
  2546                           fsr0h	equ	0xFEA
  2547                           fsr0l	equ	0xFE9
  2548                           wreg	equ	0xFE8
  2549                           fsr1h	equ	0xFE2
  2550                           fsr1l	equ	0xFE1
  2551                           indf2	equ	0xFDF
  2552                           fsr2h	equ	0xFDA
  2553                           fsr2l	equ	0xFD9
  2554                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        2
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     20      47
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    hex	PTR unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_onData
    _onData->_writeHex
    _writeHex->_writeChar
    _error->_writeChar

Critical Paths under _receiveData in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _receiveData in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _receiveData in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _receiveData in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _receiveData in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _receiveData in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _receiveData in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _receiveData in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _receiveData in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     585
                           _initUart
                             _onData
                           _readChar
 ---------------------------------------------------------------------------------
 (1) _readChar                                             1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _onData                                               1     1      0     570
                                             19 COMRAM     1     1      0
                              _error
                           _parseHex
                          _readPortA
                          _readPortB
                          _readPortC
                          _readPortD
                          _readPortE
                           _writeHex
                         _writePortA
                         _writePortB
                         _writePortC
                         _writePortD
                         _writePortE
                         _writeTrisA
                         _writeTrisB
                         _writeTrisC
                         _writeTrisD
                         _writeTrisE
 ---------------------------------------------------------------------------------
 (2) _writeTrisE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeHex                                             4     4      0      45
                                             15 COMRAM     4     4      0
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _readPortE                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readPortD                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readPortC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readPortB                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readPortA                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parseHex                                             1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _error                                                0     0      0      15
                          _writeChar
 ---------------------------------------------------------------------------------
 (3) _writeChar                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _receiveData                                         14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initUart
   _onData
     _error
       _writeChar
     _parseHex
     _readPortA
     _readPortB
     _readPortC
     _readPortD
     _readPortE
     _writeHex
       _writeChar
     _writePortA
     _writePortB
     _writePortC
     _writePortD
     _writePortE
     _writeTrisA
     _writeTrisB
     _writeTrisC
     _writeTrisD
     _writeTrisE
   _readChar

 _receiveData (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     14      2F       1       50.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2F       6        0.0%
DATA                 0      0      2F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Dec 27 01:10:48 2017

         writePortA@data 0028           writePortB@data 0028           writePortC@data 0028  
         writePortD@data 0028           writePortE@data 0028             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_LVP$ON 000000                      l122 0BD0                      l118 0B6A  
                    l951 0B94                      l943 0B82                      l975 0B40  
                    l993 082A                      l989 0818             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _hex 002E                      prod 000FF3  
         writeTrisA@data 0028                      wreg 000FE8           writeTrisB@data 0028  
             _TXSTA1bits 000FAC           writeTrisC@data 0028           writeTrisD@data 0028  
         writeTrisE@data 0028                     l1001 0840                     l1011 0862  
                   l1101 096C                     l1005 084E                     l1031 089E  
                   l1023 0882                     l1113 099A                     l1105 097A  
                   l1041 08C0                     l1017 0870                     l1009 085C  
                   l1131 09DE                     l1123 09C0                     l1035 08AC  
                   l1027 0890                     l1109 098A                     l1117 09AA  
                   l1151 0A22                     l1143 0A08                     l1135 09EE  
                   l1127 09CE                     l1063 08FC                     l1055 08E6  
                   l1039 08BA                     l1073 0918                     l1049 08D6  
                   l1155 0A30                     l1147 0A14                     l1139 09FC  
                   l1067 0906                     l1171 0A5C                     l1165 0A50  
                   l1085 093A                     l1159 0A3E                     l1167 0A56  
                   l1079 0928                     l1089 0944                     l1199 0B36  
                   STR_1 0801                     i2l61 004C                     i2l64 0072  
                   _main 0B10                     _temp 0013                     _port 0011  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0030            __CFG_BORV$190 000000  
                   prodh 000FF4                     prodl 000FF3                     start 00AE  
          __CFG_IESO$OFF 000000             ___param_bank 000000             _BAUDCON1bits 000FB8  
                  ?_main 001A                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTC 000F82                    _PORTD 000F83                    _PORTE 000F84  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _error 0BC2                    _value 0016                    _state 0017  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
         __CFG_T3CMX$RC0 000000             ?_receiveData 001A           __CFG_ICPRT$OFF 000000  
         __CFG_MCLRE$OFF 000000          __initialization 0ADE             __end_of_main 0B40  
         __CFG_PCLKEN$ON 000000                   ??_main 002E            __activetblptr 000002  
         __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000                   _ADCON0 000FC2  
                 ?_error 001A                   _ANSELA 000F5B                   _ANSELC 000F5D  
         __CFG_WDTEN$OFF 000000                   _RCREG1 000FAE                   _SPBRG1 000FAF  
                 _TXREG1 000FAD           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
       __end_of_readChar 0B6E                   _onData 0814         __end_of_initUart 0BB6  
                 clear_0 0AFC         __end_of_parseHex 0B98             __pdataCOMRAM 002E  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8         __end_of_writeHex 0ADE     __CFG_LS48MHZ$SYS24X4 000000  
             __accesstop 0060  __end_of__initialization 0B02          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 001A         __CFG_nPWRTEN$OFF 000000  
          __end_of_error 0BCE                  ??_error 0029       __size_of_readPortA 0004  
     __size_of_readPortB 0004       __size_of_readPortC 0004       __size_of_readPortD 0004  
     __size_of_readPortE 0004     __size_of_receiveData 00A6        __CFG_PLLSEL$PLL4X 000000  
           readChar@data 0028                  ?_onData 001A                ?_readChar 001A  
              ?_initUart 001A       __size_of_writeChar 000C                ?_parseHex 001A  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
        __size_of_onData 027C                  __pcinit 0ADE                  __ramtop 0800  
              ?_writeHex 001A                  __ptext0 0B10                  __ptext1 0B40  
                __ptext2 0814                  __ptext3 0BDA                  __ptext4 0BE2  
                __ptext5 0BB6                  __ptext6 0BEA                  __ptext7 0BF2  
                __ptext8 0BFA                  __ptext9 0C02                  _command 0012  
      __end_of_readPortA 0C36        __end_of_readPortB 0C32        __end_of_readPortC 0C2E  
      __end_of_readPortD 0C2A        __end_of_readPortE 0C26                  _uartBuf 0001  
                onData@d 002D     end_of_initialization 0B02               ??_readChar 0028  
             ??_initUart 0028            __Lmediumconst 0000               ??_parseHex 0028  
           writeHex@data 002C                  postinc0 000FEE               ??_writeHex 0029  
      __end_of_writeChar 0BDA               _writePortA 0C1A               _writePortB 0C12  
             _writePortC 0C0A               _writePortD 0C02               _writePortE 0BFA  
             _writeTrisA 0BF2               _writeTrisB 0BEA               _writeTrisC 0BB6  
             _writeTrisD 0BE2               _writeTrisE 0BDA            __pidataCOMRAM 0C36  
         __end_of_onData 0A90      start_initialization 0ADE          __CFG_nLPBOR$OFF 000000  
               ??_onData 002D              __pbssCOMRAM 0001           _uartWriteIndex 0018  
          ??_receiveData 001A        __size_of_readChar 002E        __size_of_initUart 001E  
      __size_of_parseHex 002A                __pintcode 0008              ?_writePortA 001A  
            ?_writePortB 001A              ?_writePortC 001A              ?_writePortD 001A  
            ?_writePortE 001A              ?_writeTrisA 001A              ?_writeTrisB 001A  
            ?_writeTrisC 001A              ?_writeTrisD 001A              ?_writeTrisE 001A  
            __smallconst 0800        __size_of_writeHex 004E                _readPortA 0C32  
              _readPortB 0C2E                _readPortC 0C2A                _readPortD 0C26  
              _readPortE 0C22           __size_of_error 000C                 _PIE1bits 000F9D  
               _PIR1bits 000F9E                 _RCONbits 000FD0         __CFG_WDTPS$32768 000000  
    __end_of_receiveData 00AE            _uartReadIndex 0019        __CFG_CFGPLLEN$OFF 000000  
              _writeChar 0BCE               ?_readPortA 001A               ?_readPortB 001A  
             ?_readPortC 001A               ?_readPortD 001A               ?_readPortE 001A  
    __size_of_writePortA 0008      __size_of_writePortB 0008      __size_of_writePortC 0008  
    __size_of_writePortD 0008      __size_of_writePortE 0008      __size_of_writeTrisA 0008  
    __size_of_writeTrisB 0008      __size_of_writeTrisC 000C      __size_of_writeTrisD 0008  
    __size_of_writeTrisE 0008                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000                parseHex@x 0028                 _checksum 0015  
             ?_writeChar 001A                 __ptext10 0C0A                 __ptext11 0C12  
               __ptext20 0BC2                 __ptext12 0C1A                 __ptext21 0BCE  
               __ptext13 0A90                 __ptext22 0B98                 __ptext14 0C22  
               __ptext15 0C26                 __ptext16 0C2A                 __ptext17 0C2E  
               __ptext18 0C32                 __ptext19 0B6E                 _readChar 0B40  
               _initUart 0B98            __size_of_main 0030              _receiveData 0008  
               _parseHex 0B6E                 int$flags 0030                 _writeHex 0A90  
     _checksumCalculated 0014               _INTCONbits 000FF2              ??_readPortA 0028  
            ??_readPortB 0028              ??_readPortC 0028              ??_readPortD 0028  
            ??_readPortE 0028                 intlevel2 0000            writeChar@data 0028  
             _RCSTA1bits 000FAB               _OSCCONbits 000FD3     __CFG_CPUDIV$NOCLKDIV 000000  
           ??_writePortA 0028             ??_writePortB 0028             ??_writePortC 0028  
           ??_writePortD 0028             ??_writePortE 0028             ??_writeTrisA 0028  
           ??_writeTrisB 0028             ??_writeTrisC 0028             ??_writeTrisD 0028  
           ??_writeTrisE 0028              ??_writeChar 0028       __CFG_FOSC$INTOSCIO 000000  
     __end_of_writePortA 0C22       __end_of_writePortB 0C1A       __end_of_writePortC 0C12  
     __end_of_writePortD 0C0A       __end_of_writePortE 0C02       __end_of_writeTrisA 0BFA  
     __end_of_writeTrisB 0BF2       __end_of_writeTrisC 0BC2       __end_of_writeTrisD 0BEA  
     __end_of_writeTrisE 0BE2  
