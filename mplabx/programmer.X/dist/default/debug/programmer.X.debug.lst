

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Jan 25 19:50:05 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.42
    50                           ; Generated 13/04/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F45K50 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataCOMRAM
    85  000FDE                     __pidataCOMRAM:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _hex
    89  000FDE  01                 	db	low STR_1
    90  000FDF  08                 	db	high STR_1
    91  0000                     _ANSELC	set	3933
    92  0000                     _ANSELA	set	3931
    93  0000                     _TRISDbits	set	3989
    94  0000                     _PORTDbits	set	3971
    95  0000                     _ADCON0	set	4034
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _TXREG1	set	4013
    98  0000                     _TRISE	set	3990
    99  0000                     _TRISD	set	3989
   100  0000                     _TRISC	set	3988
   101  0000                     _TRISB	set	3987
   102  0000                     _TRISA	set	3986
   103  0000                     _PORTE	set	3972
   104  0000                     _PORTD	set	3971
   105  0000                     _PORTC	set	3970
   106  0000                     _PORTB	set	3969
   107  0000                     _PORTA	set	3968
   108  0000                     _PIE1bits	set	3997
   109  0000                     _INTCONbits	set	4082
   110  0000                     _RCONbits	set	4048
   111  0000                     _SPBRG1	set	4015
   112  0000                     _BAUDCON1bits	set	4024
   113  0000                     _TXSTA1bits	set	4012
   114  0000                     _RCREG1	set	4014
   115  0000                     _PIR1bits	set	3998
   116  0000                     _RCSTA1bits	set	4011
   117                           
   118                           	psect	smallconst
   119  000800                     __psmallconst:
   120                           	opt stack 0
   121  000800  00                 	db	0
   122  000801                     STR_1:
   123  000801  30                 	db	48	;'0'
   124  000802  31                 	db	49	;'1'
   125  000803  32                 	db	50	;'2'
   126  000804  33                 	db	51	;'3'
   127  000805  34                 	db	52	;'4'
   128  000806  35                 	db	53	;'5'
   129  000807  36                 	db	54	;'6'
   130  000808  37                 	db	55	;'7'
   131  000809  38                 	db	56	;'8'
   132  00080A  39                 	db	57	;'9'
   133  00080B  61                 	db	97	;'a'
   134  00080C  62                 	db	98	;'b'
   135  00080D  63                 	db	99	;'c'
   136  00080E  64                 	db	100	;'d'
   137  00080F  65                 	db	101	;'e'
   138  000810  66                 	db	102	;'f'
   139  000811  00                 	db	0
   140                           
   141                           ; #config settings
   142  000812  00                 	db	0	; dummy byte at the end
   143  0000                     
   144                           	psect	cinit
   145  000C8C                     __pcinit:
   146                           	opt stack 0
   147  000C8C                     start_initialization:
   148                           	opt stack 0
   149  000C8C                     __initialization:
   150                           	opt stack 0
   151                           
   152                           ; Initialize objects allocated to COMRAM (2 bytes)
   153                           ; load TBLPTR registers with __pidataCOMRAM
   154  000C8C  0EDE               	movlw	low __pidataCOMRAM
   155  000C8E  6EF6               	movwf	tblptrl,c
   156  000C90  0E0F               	movlw	high __pidataCOMRAM
   157  000C92  6EF7               	movwf	tblptrh,c
   158  000C94  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   159  000C96  6EF8               	movwf	tblptru,c
   160  000C98  0009               	tblrd		*+	;fetch initializer
   161  000C9A  CFF5 F02C          	movff	tablat,__pdataCOMRAM
   162  000C9E  0009               	tblrd		*+	;fetch initializer
   163  000CA0  CFF5 F02D          	movff	tablat,__pdataCOMRAM+1
   164                           
   165                           ; Clear objects allocated to BIGRAM (1024 bytes)
   166  000CA4  EE02  F000         	lfsr	0,__pbssBIGRAM
   167  000CA8  EE14 F000          	lfsr	1,1024
   168  000CAC                     clear_0:
   169  000CAC  6AEE               	clrf	postinc0,c
   170  000CAE  50E5               	movf	postdec1,w,c
   171  000CB0  50E1               	movf	fsr1l,w,c
   172  000CB2  E1FC               	bnz	clear_0
   173  000CB4  50E2               	movf	fsr1h,w,c
   174  000CB6  E1FA               	bnz	clear_0
   175                           
   176                           ; Clear objects allocated to BANK1 (256 bytes)
   177  000CB8  EE01  F000         	lfsr	0,__pbssBANK1
   178  000CBC  EE11 F000          	lfsr	1,256
   179  000CC0                     clear_1:
   180  000CC0  6AEE               	clrf	postinc0,c
   181  000CC2  50E5               	movf	postdec1,w,c
   182  000CC4  50E1               	movf	fsr1l,w,c
   183  000CC6  E1FC               	bnz	clear_1
   184  000CC8  50E2               	movf	fsr1h,w,c
   185  000CCA  E1FA               	bnz	clear_1
   186                           
   187                           ; Clear objects allocated to COMRAM (17 bytes)
   188  000CCC  EE00  F01B         	lfsr	0,__pbssCOMRAM
   189  000CD0  0E11               	movlw	17
   190  000CD2                     clear_2:
   191  000CD2  6AEE               	clrf	postinc0,c
   192  000CD4  06E8               	decf	wreg,f,c
   193  000CD6  E1FD               	bnz	clear_2
   194  000CD8                     end_of_initialization:
   195                           	opt stack 0
   196  000CD8                     __end_of__initialization:
   197                           	opt stack 0
   198  000CD8  902E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   199  000CDA  922E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   200  000CDC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   201  000CDE  6EF8               	movwf	tblptru,c
   202  000CE0  0100               	movlb	0
   203  000CE2  EF24  F007         	goto	_main	;jump to C main() function
   204                           tblptru	equ	0xFF8
   205                           tblptrh	equ	0xFF7
   206                           tblptrl	equ	0xFF6
   207                           tablat	equ	0xFF5
   208                           postinc0	equ	0xFEE
   209                           wreg	equ	0xFE8
   210                           postdec1	equ	0xFE5
   211                           fsr1h	equ	0xFE2
   212                           fsr1l	equ	0xFE1
   213                           
   214                           	psect	bssCOMRAM
   215  00001B                     __pbssCOMRAM:
   216                           	opt stack 0
   217  00001B                     _flashBufferIndex:
   218                           	opt stack 0
   219  00001B                     	ds	2
   220  00001D                     _adr:
   221                           	opt stack 0
   222  00001D                     	ds	2
   223  00001F                     _uartWriteIndex:
   224                           	opt stack 0
   225  00001F                     	ds	2
   226  000021                     _uartReadIndex:
   227                           	opt stack 0
   228  000021                     	ds	2
   229  000023                     _shift:
   230                           	opt stack 0
   231  000023                     	ds	1
   232  000024                     _shiftCounter:
   233                           	opt stack 0
   234  000024                     	ds	1
   235  000025                     _port:
   236                           	opt stack 0
   237  000025                     	ds	1
   238  000026                     _command:
   239                           	opt stack 0
   240  000026                     	ds	1
   241  000027                     _temp:
   242                           	opt stack 0
   243  000027                     	ds	1
   244  000028                     _checksumCalculated:
   245                           	opt stack 0
   246  000028                     	ds	1
   247  000029                     _checksum:
   248                           	opt stack 0
   249  000029                     	ds	1
   250  00002A                     _value:
   251                           	opt stack 0
   252  00002A                     	ds	1
   253  00002B                     _state:
   254                           	opt stack 0
   255  00002B                     	ds	1
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           postdec1	equ	0xFE5
   263                           fsr1h	equ	0xFE2
   264                           fsr1l	equ	0xFE1
   265                           
   266                           	psect	dataCOMRAM
   267  00002C                     __pdataCOMRAM:
   268                           	opt stack 0
   269  00002C                     _hex:
   270                           	opt stack 0
   271  00002C                     	ds	2
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           postdec1	equ	0xFE5
   279                           fsr1h	equ	0xFE2
   280                           fsr1l	equ	0xFE1
   281                           
   282                           	psect	bssBANK1
   283  000100                     __pbssBANK1:
   284                           	opt stack 0
   285  000100                     _flashBuffer:
   286                           	opt stack 0
   287  000100                     	ds	256
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           postdec1	equ	0xFE5
   295                           fsr1h	equ	0xFE2
   296                           fsr1l	equ	0xFE1
   297                           
   298                           	psect	bssBIGRAM
   299  000200                     __pbssBIGRAM:
   300                           	opt stack 0
   301  000200                     _uartBuf:
   302                           	opt stack 0
   303  000200                     	ds	1024
   304                           tblptru	equ	0xFF8
   305                           tblptrh	equ	0xFF7
   306                           tblptrl	equ	0xFF6
   307                           tablat	equ	0xFF5
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           postdec1	equ	0xFE5
   311                           fsr1h	equ	0xFE2
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	cstackCOMRAM
   315  000001                     __pcstackCOMRAM:
   316                           	opt stack 0
   317  000001                     ??_receiveData:
   318  000001                     
   319                           ; 2 bytes @ 0x0
   320  000001                     	ds	14
   321  00000F                     ?_logicAddressToPhysical:
   322                           	opt stack 0
   323  00000F                     writePortA@data:
   324                           	opt stack 0
   325  00000F                     writePortB@data:
   326                           	opt stack 0
   327  00000F                     writePortC@data:
   328                           	opt stack 0
   329  00000F                     writePortD@data:
   330                           	opt stack 0
   331  00000F                     writePortE@data:
   332                           	opt stack 0
   333  00000F                     writeTrisA@data:
   334                           	opt stack 0
   335  00000F                     writeTrisB@data:
   336                           	opt stack 0
   337  00000F                     writeTrisC@data:
   338                           	opt stack 0
   339  00000F                     writeTrisD@data:
   340                           	opt stack 0
   341  00000F                     writeTrisE@data:
   342                           	opt stack 0
   343  00000F                     readChar@data:
   344                           	opt stack 0
   345  00000F                     writeChar@data:
   346                           	opt stack 0
   347  00000F                     parseHex@x:
   348                           	opt stack 0
   349  00000F                     logicDataToPhysical@pvalue:
   350                           	opt stack 0
   351  00000F                     writeByte@b:
   352                           	opt stack 0
   353  00000F                     logicAddressToPhysical@adr0:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0xE
   357  00000F                     	ds	1
   358  000010                     ??_writeHex:
   359  000010                     logicDataToPhysical@value0:
   360                           	opt stack 0
   361  000010                     sendBankCommand@bank:
   362                           	opt stack 0
   363  000010                     writeAddress@adr:
   364                           	opt stack 0
   365  000010                     readAddress@adr:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0xF
   369  000010                     	ds	1
   370  000011                     logicAddressToPhysical@padr:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x10
   374  000011                     	ds	1
   375  000012                     writeAddress@value:
   376                           	opt stack 0
   377  000012                     readAddress@d:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x11
   381  000012                     	ds	1
   382  000013                     writeHex@data:
   383                           	opt stack 0
   384  000013                     writeAddressPhysical@adr:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x12
   388  000013                     	ds	2
   389  000015                     writeAddressPhysical@value:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x14
   393  000015                     	ds	1
   394  000016                     ??_onData:
   395  000016                     
   396                           ; 1 bytes @ 0x15
   397  000016                     	ds	4
   398  00001A                     onData@d:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x19
   402  00001A                     	ds	1
   403  00001B                     tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           postdec1	equ	0xFE5
   410                           fsr1h	equ	0xFE2
   411                           fsr1l	equ	0xFE1
   412                           
   413                           ; 1 bytes @ 0x1A
   414 ;;
   415 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   416 ;;
   417 ;; *************** function _main *****************
   418 ;; Defined at:
   419 ;;		line 218 in file "main.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;		None
   422 ;; Auto vars:     Size  Location     Type
   423 ;;		None
   424 ;; Return value:  Size  Location     Type
   425 ;;                  2  129[None  ] int 
   426 ;; Registers used:
   427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   428 ;; Tracked objects:
   429 ;;		On entry : 0/0
   430 ;;		On exit  : 0/0
   431 ;;		Unchanged: 0/0
   432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   433 ;;      Params:         0       0       0       0       0       0       0       0       0
   434 ;;      Locals:         0       0       0       0       0       0       0       0       0
   435 ;;      Temps:          0       0       0       0       0       0       0       0       0
   436 ;;      Totals:         0       0       0       0       0       0       0       0       0
   437 ;;Total ram usage:        0 bytes
   438 ;; Hardware stack levels required when called:    5
   439 ;; This function calls:
   440 ;;		_initUart
   441 ;;		_onData
   442 ;;		_readChar
   443 ;; This function is called by:
   444 ;;		Startup code after reset
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           	psect	text0
   449  000E48                     __ptext0:
   450                           	opt stack 0
   451  000E48                     _main:
   452                           	opt stack 26
   453                           
   454                           ;main.c: 221: OSCCONbits.IRCF = 7;
   455                           
   456                           ;incstack = 0
   457  000E48  88D3               	bsf	4051,4,c	;volatile
   458  000E4A  8AD3               	bsf	4051,5,c	;volatile
   459  000E4C  8CD3               	bsf	4051,6,c	;volatile
   460                           
   461                           ;main.c: 224: ANSELA = 0;
   462  000E4E  0E00               	movlw	0
   463  000E50  010F               	movlb	15	; () banked
   464  000E52  6F5B               	movwf	91,b	;volatile
   465                           
   466                           ;main.c: 225: ANSELC = 0;
   467  000E54  0E00               	movlw	0
   468  000E56  010F               	movlb	15	; () banked
   469  000E58  6F5D               	movwf	93,b	;volatile
   470                           
   471                           ;main.c: 228: ADCON0 = 0;
   472  000E5A  0E00               	movlw	0
   473  000E5C  6EC2               	movwf	4034,c	;volatile
   474                           
   475                           ; BSR set to: 15
   476                           ;main.c: 231: PORTC = 0xff;
   477  000E5E  6882               	setf	3970,c	;volatile
   478                           
   479                           ; BSR set to: 15
   480                           ;main.c: 234: TRISA = 0xff;
   481  000E60  6892               	setf	3986,c	;volatile
   482                           
   483                           ; BSR set to: 15
   484                           ;main.c: 235: TRISB = 0xff;
   485  000E62  6893               	setf	3987,c	;volatile
   486                           
   487                           ;main.c: 236: TRISC = 0b10111111;
   488  000E64  0EBF               	movlw	191
   489  000E66  6E94               	movwf	3988,c	;volatile
   490                           
   491                           ; BSR set to: 15
   492                           ;main.c: 237: TRISD = 0xff;
   493  000E68  6895               	setf	3989,c	;volatile
   494                           
   495                           ; BSR set to: 15
   496                           ;main.c: 239: initUart();
   497  000E6A  EC91  F007         	call	_initUart	;wreg free
   498  000E6E                     l1905:
   499                           
   500                           ;main.c: 243: onData(readChar());
   501  000E6E  EC08  F007         	call	_readChar	;wreg free
   502  000E72  EC0A  F004         	call	_onData
   503  000E76  D7FB               	goto	l1905
   504  000E78                     __end_of_main:
   505                           	opt stack 0
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1h	equ	0xFE2
   514                           fsr1l	equ	0xFE1
   515                           
   516 ;; *************** function _readChar *****************
   517 ;; Defined at:
   518 ;;		line 202 in file "main.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;  data            1   14[COMRAM] unsigned char 
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      unsigned char 
   525 ;; Registers used:
   526 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   532 ;;      Params:         0       0       0       0       0       0       0       0       0
   533 ;;      Locals:         1       0       0       0       0       0       0       0       0
   534 ;;      Temps:          0       0       0       0       0       0       0       0       0
   535 ;;      Totals:         1       0       0       0       0       0       0       0       0
   536 ;;Total ram usage:        1 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; Hardware stack levels required when called:    1
   539 ;; This function calls:
   540 ;;		Nothing
   541 ;; This function is called by:
   542 ;;		_main
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text1
   547  000E10                     __ptext1:
   548                           	opt stack 0
   549  000E10                     _readChar:
   550                           	opt stack 29
   551  000E10                     l1239:
   552  000E10  501F               	movf	_uartWriteIndex,w,c	;volatile
   553  000E12  1821               	xorwf	_uartReadIndex,w,c	;volatile
   554  000E14  E104               	bnz	l1241
   555  000E16  5020               	movf	_uartWriteIndex+1,w,c	;volatile
   556  000E18  1822               	xorwf	_uartReadIndex+1,w,c	;volatile
   557  000E1A  B4D8               	btfsc	status,2,c
   558  000E1C  D7F9               	goto	l1239
   559  000E1E                     l1241:
   560                           
   561                           ;main.c: 206: data = uartBuf[uartReadIndex];
   562  000E1E  0E00               	movlw	low _uartBuf
   563  000E20  2421               	addwf	_uartReadIndex,w,c	;volatile
   564  000E22  6ED9               	movwf	fsr2l,c
   565  000E24  0E02               	movlw	high _uartBuf
   566  000E26  2022               	addwfc	_uartReadIndex+1,w,c	;volatile
   567  000E28  6EDA               	movwf	fsr2h,c
   568  000E2A  50DF               	movf	indf2,w,c
   569  000E2C  6E0F               	movwf	readChar@data,c
   570                           
   571                           ;main.c: 207: uartReadIndex++;
   572  000E2E  4A21               	infsnz	_uartReadIndex,f,c	;volatile
   573  000E30  2A22               	incf	_uartReadIndex+1,f,c	;volatile
   574                           
   575                           ;main.c: 208: if (uartReadIndex == 1024) uartReadIndex = 0;
   576  000E32  0E04               	movlw	4
   577  000E34  1822               	xorwf	_uartReadIndex+1,w,c	;volatile
   578  000E36  1021               	iorwf	_uartReadIndex,w,c	;volatile
   579  000E38  A4D8               	btfss	status,2,c
   580  000E3A  D004               	goto	l118
   581  000E3C  0E00               	movlw	0
   582  000E3E  6E22               	movwf	_uartReadIndex+1,c	;volatile
   583  000E40  0E00               	movlw	0
   584  000E42  6E21               	movwf	_uartReadIndex,c	;volatile
   585  000E44                     l118:
   586                           
   587                           ;main.c: 209: return data;
   588  000E44  500F               	movf	readChar@data,w,c
   589  000E46  0012               	return	
   590  000E48                     __end_of_readChar:
   591                           	opt stack 0
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           postdec1	equ	0xFE5
   599                           fsr1h	equ	0xFE2
   600                           fsr1l	equ	0xFE1
   601                           indf2	equ	0xFDF
   602                           fsr2h	equ	0xFDA
   603                           fsr2l	equ	0xFD9
   604                           status	equ	0xFD8
   605                           
   606 ;; *************** function _onData *****************
   607 ;; Defined at:
   608 ;;		line 291 in file "receiver.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;  d               1    wreg     unsigned char 
   611 ;; Auto vars:     Size  Location     Type
   612 ;;  d               1   25[COMRAM] unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   622 ;;      Params:         0       0       0       0       0       0       0       0       0
   623 ;;      Locals:         1       0       0       0       0       0       0       0       0
   624 ;;      Temps:          4       0       0       0       0       0       0       0       0
   625 ;;      Totals:         5       0       0       0       0       0       0       0       0
   626 ;;Total ram usage:        5 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    4
   629 ;; This function calls:
   630 ;;		_error
   631 ;;		_parseHex
   632 ;;		_readAddress
   633 ;;		_readPort
   634 ;;		_sendBankCommand
   635 ;;		_writeAddress
   636 ;;		_writeAddressPhysical
   637 ;;		_writeHex
   638 ;;		_writePortA
   639 ;;		_writePortB
   640 ;;		_writePortC
   641 ;;		_writePortD
   642 ;;		_writePortE
   643 ;;		_writeTrisA
   644 ;;		_writeTrisB
   645 ;;		_writeTrisC
   646 ;;		_writeTrisD
   647 ;;		_writeTrisE
   648 ;; This function is called by:
   649 ;;		_main
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           	psect	text2
   654  000814                     __ptext2:
   655                           	opt stack 0
   656  000814                     _onData:
   657                           	opt stack 26
   658                           
   659                           ;incstack = 0
   660                           ;onData@d stored from wreg
   661  000814  6E1A               	movwf	onData@d,c
   662                           
   663                           ;receiver.c: 293: switch (state) {
   664  000816  D1DC               	goto	l1889
   665  000818                     l1639:
   666                           
   667                           ;receiver.c: 295: if (d == '<') {
   668  000818  0E3C               	movlw	60
   669  00081A  181A               	xorwf	onData@d,w,c
   670  00081C  A4D8               	btfss	status,2,c
   671  00081E  0012               	return	
   672                           
   673                           ;receiver.c: 296: state = STATE_COMMAND;
   674  000820  0E01               	movlw	1
   675  000822  6E2B               	movwf	_state,c
   676                           
   677                           ;receiver.c: 297: checksumCalculated = 0;
   678  000824  0E00               	movlw	0
   679  000826  6E28               	movwf	_checksumCalculated,c
   680                           
   681                           ;receiver.c: 298: }
   682                           ;receiver.c: 299: break;
   683  000828  0012               	return	
   684  00082A                     l1643:
   685                           
   686                           ;receiver.c: 301: checksumCalculated ^= d;
   687  00082A  501A               	movf	onData@d,w,c
   688  00082C  1A28               	xorwf	_checksumCalculated,f,c
   689                           
   690                           ;receiver.c: 302: state = STATE_PORT;
   691  00082E  0E02               	movlw	2
   692  000830  6E2B               	movwf	_state,c
   693                           
   694                           ;receiver.c: 303: if (d == 'r') {
   695  000832  0E72               	movlw	114
   696  000834  181A               	xorwf	onData@d,w,c
   697  000836  A4D8               	btfss	status,2,c
   698  000838  D003               	goto	l1651
   699                           
   700                           ;receiver.c: 304: command = COMMAND_READ;
   701  00083A  0E00               	movlw	0
   702  00083C  6E26               	movwf	_command,c
   703                           
   704                           ;receiver.c: 305: } else if (d == 'w') {
   705  00083E  0012               	return	
   706  000840                     l1651:
   707  000840  0E77               	movlw	119
   708  000842  181A               	xorwf	onData@d,w,c
   709  000844  A4D8               	btfss	status,2,c
   710  000846  D003               	goto	l1655
   711                           
   712                           ;receiver.c: 306: command = COMMAND_WRITE;
   713  000848  0E01               	movlw	1
   714  00084A  6E26               	movwf	_command,c
   715                           
   716                           ;receiver.c: 307: } else if (d == 't') {
   717  00084C  0012               	return	
   718  00084E                     l1655:
   719  00084E  0E74               	movlw	116
   720  000850  181A               	xorwf	onData@d,w,c
   721  000852  A4D8               	btfss	status,2,c
   722  000854  D003               	goto	l1659
   723                           
   724                           ;receiver.c: 308: command = COMMAND_TRIS;
   725  000856  0E02               	movlw	2
   726  000858  6E26               	movwf	_command,c
   727                           
   728                           ;receiver.c: 309: } else if (d == 'l') {
   729  00085A  0012               	return	
   730  00085C                     l1659:
   731  00085C  0E6C               	movlw	108
   732  00085E  181A               	xorwf	onData@d,w,c
   733  000860  A4D8               	btfss	status,2,c
   734  000862  D005               	goto	l1663
   735                           
   736                           ;receiver.c: 310: state = STATE_VALUE_HIGH_NIBBLE;
   737  000864  0E03               	movlw	3
   738  000866  6E2B               	movwf	_state,c
   739                           
   740                           ;receiver.c: 311: command = COMMAND_ADR_LOW;
   741  000868  0E03               	movlw	3
   742  00086A  6E26               	movwf	_command,c
   743                           
   744                           ;receiver.c: 312: } else if (d == 'h') {
   745  00086C  0012               	return	
   746  00086E                     l1663:
   747  00086E  0E68               	movlw	104
   748  000870  181A               	xorwf	onData@d,w,c
   749  000872  A4D8               	btfss	status,2,c
   750  000874  D005               	goto	l1667
   751                           
   752                           ;receiver.c: 313: state = STATE_VALUE_HIGH_NIBBLE;
   753  000876  0E03               	movlw	3
   754  000878  6E2B               	movwf	_state,c
   755                           
   756                           ;receiver.c: 314: command = COMMAND_ADR_HIGH;
   757  00087A  0E04               	movlw	4
   758  00087C  6E26               	movwf	_command,c
   759                           
   760                           ;receiver.c: 315: } else if (d == 'f') {
   761  00087E  0012               	return	
   762  000880                     l1667:
   763  000880  0E66               	movlw	102
   764  000882  181A               	xorwf	onData@d,w,c
   765  000884  A4D8               	btfss	status,2,c
   766  000886  D009               	goto	l1671
   767                           
   768                           ;receiver.c: 316: state = STATE_VALUE_HIGH_NIBBLE;
   769  000888  0E03               	movlw	3
   770  00088A  6E2B               	movwf	_state,c
   771                           
   772                           ;receiver.c: 317: command = COMMAND_FLASH;
   773  00088C  0E05               	movlw	5
   774  00088E  6E26               	movwf	_command,c
   775                           
   776                           ;receiver.c: 318: flashBufferIndex = 0;
   777  000890  0E00               	movlw	0
   778  000892  6E1C               	movwf	_flashBufferIndex+1,c
   779  000894  0E00               	movlw	0
   780  000896  6E1B               	movwf	_flashBufferIndex,c
   781                           
   782                           ;receiver.c: 319: } else if (d == 'v') {
   783  000898  0012               	return	
   784  00089A                     l1671:
   785  00089A  0E76               	movlw	118
   786  00089C  181A               	xorwf	onData@d,w,c
   787  00089E  A4D8               	btfss	status,2,c
   788  0008A0  D005               	goto	l1675
   789                           
   790                           ;receiver.c: 320: state = STATE_CHECKSUM_HIGH_NIBBLE;
   791  0008A2  0E05               	movlw	5
   792  0008A4  6E2B               	movwf	_state,c
   793                           
   794                           ;receiver.c: 321: command = COMMAND_VERIFY;
   795  0008A6  0E06               	movlw	6
   796  0008A8  6E26               	movwf	_command,c
   797                           
   798                           ;receiver.c: 322: } else if (d == 'b') {
   799  0008AA  0012               	return	
   800  0008AC                     l1675:
   801  0008AC  0E62               	movlw	98
   802  0008AE  181A               	xorwf	onData@d,w,c
   803  0008B0  A4D8               	btfss	status,2,c
   804  0008B2  D005               	goto	l1679
   805                           
   806                           ;receiver.c: 323: state = STATE_CHECKSUM_HIGH_NIBBLE;
   807  0008B4  0E05               	movlw	5
   808  0008B6  6E2B               	movwf	_state,c
   809                           
   810                           ;receiver.c: 324: command = STATE_VALUE_HIGH_NIBBLE;
   811  0008B8  0E03               	movlw	3
   812  0008BA  6E26               	movwf	_command,c
   813                           
   814                           ;receiver.c: 325: } else {
   815  0008BC  0012               	return	
   816  0008BE                     l1679:
   817                           
   818                           ;receiver.c: 326: error();
   819  0008BE  ECB4  F007         	call	_error	;wreg free
   820                           
   821                           ;receiver.c: 327: }
   822                           ;receiver.c: 328: break;
   823  0008C2  0012               	return	
   824  0008C4                     l1681:
   825                           
   826                           ;receiver.c: 330: checksumCalculated ^= d;
   827  0008C4  501A               	movf	onData@d,w,c
   828  0008C6  1A28               	xorwf	_checksumCalculated,f,c
   829                           
   830                           ;receiver.c: 331: if (command == COMMAND_READ) {
   831  0008C8  5026               	movf	_command,w,c
   832  0008CA  A4D8               	btfss	status,2,c
   833  0008CC  D002               	goto	l1687
   834                           
   835                           ;receiver.c: 332: state = STATE_CHECKSUM_HIGH_NIBBLE;
   836  0008CE  0E05               	movlw	5
   837  0008D0  D001               	goto	L1
   838  0008D2                     l1687:
   839                           
   840                           ;receiver.c: 334: state = STATE_VALUE_HIGH_NIBBLE;
   841  0008D2  0E03               	movlw	3
   842  0008D4                     L1:
   843  0008D4  6E2B               	movwf	_state,c
   844                           
   845                           ;receiver.c: 335: }
   846                           ;receiver.c: 336: if (d == 'a') {
   847  0008D6  0E61               	movlw	97
   848  0008D8  181A               	xorwf	onData@d,w,c
   849  0008DA  A4D8               	btfss	status,2,c
   850  0008DC  D003               	goto	l1693
   851                           
   852                           ;receiver.c: 337: port = PORT_A;
   853  0008DE  0E00               	movlw	0
   854  0008E0  6E25               	movwf	_port,c
   855                           
   856                           ;receiver.c: 338: } else if (d == 'b') {
   857  0008E2  0012               	return	
   858  0008E4                     l1693:
   859  0008E4  0E62               	movlw	98
   860  0008E6  181A               	xorwf	onData@d,w,c
   861  0008E8  A4D8               	btfss	status,2,c
   862  0008EA  D003               	goto	l1697
   863                           
   864                           ;receiver.c: 339: port = PORT_B;
   865  0008EC  0E01               	movlw	1
   866  0008EE  6E25               	movwf	_port,c
   867                           
   868                           ;receiver.c: 340: } else if (d == 'c') {
   869  0008F0  0012               	return	
   870  0008F2                     l1697:
   871  0008F2  0E63               	movlw	99
   872  0008F4  181A               	xorwf	onData@d,w,c
   873  0008F6  A4D8               	btfss	status,2,c
   874  0008F8  D003               	goto	l1701
   875                           
   876                           ;receiver.c: 341: port = PORT_C;
   877  0008FA  0E02               	movlw	2
   878  0008FC  6E25               	movwf	_port,c
   879                           
   880                           ;receiver.c: 342: } else if (d == 'd') {
   881  0008FE  0012               	return	
   882  000900                     l1701:
   883  000900  0E64               	movlw	100
   884  000902  181A               	xorwf	onData@d,w,c
   885  000904  A4D8               	btfss	status,2,c
   886  000906  D003               	goto	l1705
   887                           
   888                           ;receiver.c: 343: port = PORT_D;
   889  000908  0E03               	movlw	3
   890  00090A  6E25               	movwf	_port,c
   891                           
   892                           ;receiver.c: 344: } else if (d == 'e') {
   893  00090C  0012               	return	
   894  00090E                     l1705:
   895  00090E  0E65               	movlw	101
   896  000910  181A               	xorwf	onData@d,w,c
   897  000912  A4D8               	btfss	status,2,c
   898  000914  D003               	goto	l1709
   899                           
   900                           ;receiver.c: 345: port = PORT_E;
   901  000916  0E04               	movlw	4
   902  000918  6E25               	movwf	_port,c
   903                           
   904                           ;receiver.c: 346: } else {
   905  00091A  0012               	return	
   906  00091C                     l1709:
   907                           
   908                           ;receiver.c: 347: error();
   909  00091C  ECB4  F007         	call	_error	;wreg free
   910                           
   911                           ;receiver.c: 348: }
   912                           ;receiver.c: 349: break;
   913  000920  0012               	return	
   914  000922                     l1711:
   915                           
   916                           ;receiver.c: 351: checksumCalculated ^= d;
   917  000922  501A               	movf	onData@d,w,c
   918  000924  1A28               	xorwf	_checksumCalculated,f,c
   919                           
   920                           ;receiver.c: 352: temp = parseHex(d);
   921  000926  501A               	movf	onData@d,w,c
   922  000928  EC68  F007         	call	_parseHex
   923  00092C  6E27               	movwf	_temp,c
   924                           
   925                           ;receiver.c: 353: if (temp < 0) {
   926  00092E  AE27               	btfss	_temp,7,c
   927  000930  D003               	goto	l1719
   928                           
   929                           ;receiver.c: 354: error();
   930  000932  ECB4  F007         	call	_error	;wreg free
   931                           
   932                           ;receiver.c: 355: } else {
   933  000936  0012               	return	
   934  000938                     l1719:
   935                           
   936                           ;receiver.c: 356: state = STATE_VALUE_LOW_NIBBLE;
   937  000938  0E04               	movlw	4
   938  00093A  6E2B               	movwf	_state,c
   939                           
   940                           ;receiver.c: 357: value = (uint8_t) temp;
   941  00093C  C027  F02A         	movff	_temp,_value
   942                           
   943                           ;receiver.c: 358: value <<= 4;
   944  000940  3A2A               	swapf	_value,f,c
   945  000942  0EF0               	movlw	240
   946  000944  162A               	andwf	_value,f,c
   947                           
   948                           ;receiver.c: 359: }
   949                           ;receiver.c: 360: break;
   950  000946  0012               	return	
   951  000948                     l1725:
   952                           
   953                           ;receiver.c: 362: checksumCalculated ^= d;
   954  000948  501A               	movf	onData@d,w,c
   955  00094A  1A28               	xorwf	_checksumCalculated,f,c
   956                           
   957                           ;receiver.c: 363: temp = parseHex(d);
   958  00094C  501A               	movf	onData@d,w,c
   959  00094E  EC68  F007         	call	_parseHex
   960  000952  6E27               	movwf	_temp,c
   961                           
   962                           ;receiver.c: 364: if (temp < 0) {
   963  000954  AE27               	btfss	_temp,7,c
   964  000956  D003               	goto	l1733
   965                           
   966                           ;receiver.c: 365: error();
   967  000958  ECB4  F007         	call	_error	;wreg free
   968                           
   969                           ;receiver.c: 366: } else {
   970  00095C  0012               	return	
   971  00095E                     l1733:
   972                           
   973                           ;receiver.c: 367: value |= (uint8_t) temp;
   974  00095E  5027               	movf	_temp,w,c
   975  000960  122A               	iorwf	_value,f,c
   976                           
   977                           ;receiver.c: 368: state = STATE_CHECKSUM_HIGH_NIBBLE;
   978  000962  0E05               	movlw	5
   979  000964  6E2B               	movwf	_state,c
   980                           
   981                           ;receiver.c: 369: if (command == COMMAND_FLASH) {
   982  000966  0E05               	movlw	5
   983  000968  1826               	xorwf	_command,w,c
   984  00096A  A4D8               	btfss	status,2,c
   985  00096C  0012               	return	
   986                           
   987                           ;receiver.c: 370: flashBuffer[flashBufferIndex] = value;
   988  00096E  0E00               	movlw	low _flashBuffer
   989  000970  241B               	addwf	_flashBufferIndex,w,c
   990  000972  6ED9               	movwf	fsr2l,c
   991  000974  0E01               	movlw	high _flashBuffer
   992  000976  201C               	addwfc	_flashBufferIndex+1,w,c
   993  000978  6EDA               	movwf	fsr2h,c
   994  00097A  C02A  FFDF         	movff	_value,indf2
   995                           
   996                           ;receiver.c: 371: if (flashBufferIndex < 255) {
   997  00097E  501C               	movf	_flashBufferIndex+1,w,c
   998  000980  E105               	bnz	l1745
   999  000982  281B               	incf	_flashBufferIndex,w,c
  1000  000984  B0D8               	btfsc	status,0,c
  1001  000986  D002               	goto	l1745
  1002                           
  1003                           ;receiver.c: 372: state = STATE_VALUE_HIGH_NIBBLE;
  1004  000988  0E03               	movlw	3
  1005  00098A  D001               	goto	L2
  1006  00098C                     l1745:
  1007                           
  1008                           ;receiver.c: 374: state = STATE_CHECKSUM_HIGH_NIBBLE;
  1009  00098C  0E05               	movlw	5
  1010  00098E                     L2:
  1011  00098E  6E2B               	movwf	_state,c
  1012                           
  1013                           ;receiver.c: 375: }
  1014                           ;receiver.c: 376: flashBufferIndex++;
  1015  000990  4A1B               	infsnz	_flashBufferIndex,f,c
  1016  000992  2A1C               	incf	_flashBufferIndex+1,f,c
  1017                           
  1018                           ;receiver.c: 377: }
  1019                           ;receiver.c: 378: }
  1020                           ;receiver.c: 379: break;
  1021  000994  0012               	return	
  1022  000996                     l1749:
  1023                           
  1024                           ;receiver.c: 381: temp = parseHex(d);
  1025  000996  501A               	movf	onData@d,w,c
  1026  000998  EC68  F007         	call	_parseHex
  1027  00099C  6E27               	movwf	_temp,c
  1028                           
  1029                           ;receiver.c: 382: if (temp < 0) {
  1030  00099E  AE27               	btfss	_temp,7,c
  1031  0009A0  D003               	goto	l1755
  1032                           
  1033                           ;receiver.c: 383: error();
  1034  0009A2  ECB4  F007         	call	_error	;wreg free
  1035                           
  1036                           ;receiver.c: 384: } else {
  1037  0009A6  0012               	return	
  1038  0009A8                     l1755:
  1039                           
  1040                           ;receiver.c: 385: state = STATE_CHECKSUM_LOW_NIBBLE;
  1041  0009A8  0E06               	movlw	6
  1042  0009AA  6E2B               	movwf	_state,c
  1043                           
  1044                           ;receiver.c: 386: checksum = (uint8_t) temp;
  1045  0009AC  C027  F029         	movff	_temp,_checksum
  1046                           
  1047                           ;receiver.c: 387: checksum <<= 4;
  1048  0009B0  3A29               	swapf	_checksum,f,c
  1049  0009B2  0EF0               	movlw	240
  1050  0009B4  1629               	andwf	_checksum,f,c
  1051                           
  1052                           ;receiver.c: 388: }
  1053                           ;receiver.c: 389: break;
  1054  0009B6  0012               	return	
  1055  0009B8                     l1761:
  1056                           
  1057                           ;receiver.c: 391: temp = parseHex(d);
  1058  0009B8  501A               	movf	onData@d,w,c
  1059  0009BA  EC68  F007         	call	_parseHex
  1060  0009BE  6E27               	movwf	_temp,c
  1061                           
  1062                           ;receiver.c: 392: if (temp < 0) {
  1063  0009C0  AE27               	btfss	_temp,7,c
  1064  0009C2  D003               	goto	l1767
  1065                           
  1066                           ;receiver.c: 393: error();
  1067  0009C4  ECB4  F007         	call	_error	;wreg free
  1068                           
  1069                           ;receiver.c: 394: } else {
  1070  0009C8  0012               	return	
  1071  0009CA                     l1767:
  1072                           
  1073                           ;receiver.c: 395: state = STATE_END;
  1074  0009CA  0E07               	movlw	7
  1075  0009CC  6E2B               	movwf	_state,c
  1076                           
  1077                           ;receiver.c: 396: checksum |= (uint8_t) temp;
  1078  0009CE  5027               	movf	_temp,w,c
  1079  0009D0  1229               	iorwf	_checksum,f,c
  1080                           
  1081                           ;receiver.c: 397: }
  1082                           ;receiver.c: 398: break;
  1083  0009D2  0012               	return	
  1084  0009D4                     l1771:
  1085                           
  1086                           ;receiver.c: 400: if (d == '>') {
  1087  0009D4  0E3E               	movlw	62
  1088  0009D6  181A               	xorwf	onData@d,w,c
  1089  0009D8  A4D8               	btfss	status,2,c
  1090  0009DA  D0F7               	goto	l1885
  1091                           
  1092                           ;receiver.c: 401: state = STATE_IDLE;
  1093  0009DC  0E00               	movlw	0
  1094  0009DE  6E2B               	movwf	_state,c
  1095                           
  1096                           ;receiver.c: 402: if (checksumCalculated == checksum) {
  1097  0009E0  5029               	movf	_checksum,w,c
  1098  0009E2  1828               	xorwf	_checksumCalculated,w,c
  1099  0009E4  A4D8               	btfss	status,2,c
  1100  0009E6  D0EE               	goto	l1883
  1101                           
  1102                           ;receiver.c: 403: if (command == COMMAND_READ) {
  1103  0009E8  5026               	movf	_command,w,c
  1104  0009EA  A4D8               	btfss	status,2,c
  1105  0009EC  D003               	goto	l1781
  1106                           
  1107                           ;receiver.c: 404: readPort();
  1108  0009EE  ECC3  F006         	call	_readPort	;wreg free
  1109                           
  1110                           ;receiver.c: 405: } else if (command == COMMAND_WRITE) {
  1111  0009F2  D0DB               	goto	l1875
  1112  0009F4                     l1781:
  1113  0009F4  0426               	decf	_command,w,c
  1114  0009F6  A4D8               	btfss	status,2,c
  1115  0009F8  D028               	goto	l1805
  1116                           
  1117                           ;receiver.c: 406: if (port == PORT_A) {
  1118  0009FA  5025               	movf	_port,w,c
  1119  0009FC  A4D8               	btfss	status,2,c
  1120  0009FE  D004               	goto	l1787
  1121                           
  1122                           ;receiver.c: 407: writePortA(value);
  1123  000A00  502A               	movf	_value,w,c
  1124  000A02  ECD5  F007         	call	_writePortA
  1125                           
  1126                           ;receiver.c: 408: } else if (port == PORT_B) {
  1127  000A06  D01E               	goto	l1803
  1128  000A08                     l1787:
  1129  000A08  0425               	decf	_port,w,c
  1130  000A0A  A4D8               	btfss	status,2,c
  1131  000A0C  D004               	goto	l1791
  1132                           
  1133                           ;receiver.c: 409: writePortB(value);
  1134  000A0E  502A               	movf	_value,w,c
  1135  000A10  ECE1  F007         	call	_writePortB
  1136                           
  1137                           ;receiver.c: 410: } else if (port == PORT_C) {
  1138  000A14  D017               	goto	l1803
  1139  000A16                     l1791:
  1140  000A16  0E02               	movlw	2
  1141  000A18  1825               	xorwf	_port,w,c
  1142  000A1A  A4D8               	btfss	status,2,c
  1143  000A1C  D004               	goto	l1795
  1144                           
  1145                           ;receiver.c: 411: writePortC(value);
  1146  000A1E  502A               	movf	_value,w,c
  1147  000A20  ECDD  F007         	call	_writePortC
  1148                           
  1149                           ;receiver.c: 412: } else if (port == PORT_D) {
  1150  000A24  D00F               	goto	l1803
  1151  000A26                     l1795:
  1152  000A26  0E03               	movlw	3
  1153  000A28  1825               	xorwf	_port,w,c
  1154  000A2A  A4D8               	btfss	status,2,c
  1155  000A2C  D004               	goto	l1799
  1156                           
  1157                           ;receiver.c: 413: writePortD(value);
  1158  000A2E  502A               	movf	_value,w,c
  1159  000A30  ECD9  F007         	call	_writePortD
  1160                           
  1161                           ;receiver.c: 414: } else if (port == PORT_E) {
  1162  000A34  D007               	goto	l1803
  1163  000A36                     l1799:
  1164  000A36  0E04               	movlw	4
  1165  000A38  1825               	xorwf	_port,w,c
  1166  000A3A  A4D8               	btfss	status,2,c
  1167  000A3C  D003               	goto	l1803
  1168                           
  1169                           ;receiver.c: 415: writePortE(value);
  1170  000A3E  502A               	movf	_value,w,c
  1171  000A40  ECD1  F007         	call	_writePortE
  1172  000A44                     l1803:
  1173                           
  1174                           ;receiver.c: 416: }
  1175                           ;receiver.c: 417: readPort();
  1176  000A44  ECC3  F006         	call	_readPort	;wreg free
  1177                           
  1178                           ;receiver.c: 418: } else if (command == COMMAND_TRIS) {
  1179  000A48  D0B0               	goto	l1875
  1180  000A4A                     l1805:
  1181  000A4A  0E02               	movlw	2
  1182  000A4C  1826               	xorwf	_command,w,c
  1183  000A4E  A4D8               	btfss	status,2,c
  1184  000A50  D028               	goto	l1829
  1185                           
  1186                           ;receiver.c: 419: if (port == PORT_A) {
  1187  000A52  5025               	movf	_port,w,c
  1188  000A54  A4D8               	btfss	status,2,c
  1189  000A56  D004               	goto	l1811
  1190                           
  1191                           ;receiver.c: 420: writeTrisA(value);
  1192  000A58  502A               	movf	_value,w,c
  1193  000A5A  ECCD  F007         	call	_writeTrisA
  1194                           
  1195                           ;receiver.c: 421: } else if (port == PORT_B) {
  1196  000A5E  D01E               	goto	l1827
  1197  000A60                     l1811:
  1198  000A60  0425               	decf	_port,w,c
  1199  000A62  A4D8               	btfss	status,2,c
  1200  000A64  D004               	goto	l1815
  1201                           
  1202                           ;receiver.c: 422: writeTrisB(value);
  1203  000A66  502A               	movf	_value,w,c
  1204  000A68  ECC9  F007         	call	_writeTrisB
  1205                           
  1206                           ;receiver.c: 423: } else if (port == PORT_C) {
  1207  000A6C  D017               	goto	l1827
  1208  000A6E                     l1815:
  1209  000A6E  0E02               	movlw	2
  1210  000A70  1825               	xorwf	_port,w,c
  1211  000A72  A4D8               	btfss	status,2,c
  1212  000A74  D004               	goto	l1819
  1213                           
  1214                           ;receiver.c: 424: writeTrisC(value);
  1215  000A76  502A               	movf	_value,w,c
  1216  000A78  ECAE  F007         	call	_writeTrisC
  1217                           
  1218                           ;receiver.c: 425: } else if (port == PORT_D) {
  1219  000A7C  D00F               	goto	l1827
  1220  000A7E                     l1819:
  1221  000A7E  0E03               	movlw	3
  1222  000A80  1825               	xorwf	_port,w,c
  1223  000A82  A4D8               	btfss	status,2,c
  1224  000A84  D004               	goto	l1823
  1225                           
  1226                           ;receiver.c: 426: writeTrisD(value);
  1227  000A86  502A               	movf	_value,w,c
  1228  000A88  ECC0  F007         	call	_writeTrisD
  1229                           
  1230                           ;receiver.c: 427: } else if (port == PORT_E) {
  1231  000A8C  D007               	goto	l1827
  1232  000A8E                     l1823:
  1233  000A8E  0E04               	movlw	4
  1234  000A90  1825               	xorwf	_port,w,c
  1235  000A92  A4D8               	btfss	status,2,c
  1236  000A94  D003               	goto	l1827
  1237                           
  1238                           ;receiver.c: 428: writeTrisE(value);
  1239  000A96  502A               	movf	_value,w,c
  1240  000A98  ECC5  F007         	call	_writeTrisE
  1241  000A9C                     l1827:
  1242                           
  1243                           ;receiver.c: 429: }
  1244                           ;receiver.c: 430: readPort();
  1245  000A9C  ECC3  F006         	call	_readPort	;wreg free
  1246                           
  1247                           ;receiver.c: 431: } else if (command == COMMAND_ADR_LOW) {
  1248  000AA0  D084               	goto	l1875
  1249  000AA2                     l1829:
  1250  000AA2  0E03               	movlw	3
  1251  000AA4  1826               	xorwf	_command,w,c
  1252  000AA6  A4D8               	btfss	status,2,c
  1253  000AA8  D012               	goto	l1833
  1254                           
  1255                           ;receiver.c: 432: adr = (adr & 0xff00) | value;
  1256  000AAA  0E00               	movlw	0
  1257  000AAC  6E16               	movwf	??_onData& (0+255),c
  1258  000AAE  0EFF               	movlw	255
  1259  000AB0  6E17               	movwf	(??_onData+1)& (0+255),c
  1260  000AB2  C01D  F018         	movff	_adr,??_onData+2
  1261  000AB6  C01E  F019         	movff	_adr+1,??_onData+3
  1262  000ABA  5016               	movf	??_onData,w,c
  1263  000ABC  1618               	andwf	??_onData+2,f,c
  1264  000ABE  5017               	movf	??_onData+1,w,c
  1265  000AC0  1619               	andwf	??_onData+3,f,c
  1266  000AC2  502A               	movf	_value,w,c
  1267  000AC4  1018               	iorwf	??_onData+2,w,c
  1268  000AC6  6E1D               	movwf	_adr,c
  1269  000AC8  5019               	movf	??_onData+3,w,c
  1270  000ACA  6E1E               	movwf	_adr+1,c
  1271                           
  1272                           ;receiver.c: 433: } else if (command == COMMAND_ADR_HIGH) {
  1273  000ACC  D06E               	goto	l1875
  1274  000ACE                     l1833:
  1275  000ACE  0E04               	movlw	4
  1276  000AD0  1826               	xorwf	_command,w,c
  1277  000AD2  A4D8               	btfss	status,2,c
  1278  000AD4  D00C               	goto	l1837
  1279                           
  1280                           ;receiver.c: 434: adr &= 0xff;
  1281  000AD6  0EFF               	movlw	255
  1282  000AD8  161D               	andwf	_adr,f,c
  1283  000ADA  0E00               	movlw	0
  1284  000ADC  161E               	andwf	_adr+1,f,c
  1285                           
  1286                           ;receiver.c: 435: adr |= (uint16_t) (value << 8);
  1287  000ADE  502A               	movf	_value,w,c
  1288  000AE0  6E17               	movwf	(??_onData+1)& (0+255),c
  1289  000AE2  6A16               	clrf	??_onData& (0+255),c
  1290  000AE4  5016               	movf	??_onData,w,c
  1291  000AE6  121D               	iorwf	_adr,f,c
  1292  000AE8  5017               	movf	??_onData+1,w,c
  1293  000AEA  121E               	iorwf	_adr+1,f,c
  1294                           
  1295                           ;receiver.c: 436: } else if (command == COMMAND_FLASH) {
  1296  000AEC  D05E               	goto	l1875
  1297  000AEE                     l1837:
  1298  000AEE  0E05               	movlw	5
  1299  000AF0  1826               	xorwf	_command,w,c
  1300  000AF2  A4D8               	btfss	status,2,c
  1301  000AF4  D045               	goto	l1865
  1302                           
  1303                           ;receiver.c: 437: for (flashBufferIndex = 0; flashBufferIndex < 256; flashBufferIndex++)
      +                           {
  1304  000AF6  0E00               	movlw	0
  1305  000AF8  6E1C               	movwf	_flashBufferIndex+1,c
  1306  000AFA  0E00               	movlw	0
  1307  000AFC  6E1B               	movwf	_flashBufferIndex,c
  1308  000AFE                     l1841:
  1309  000AFE  041C               	decf	_flashBufferIndex+1,w,c
  1310  000B00  B0D8               	btfsc	status,0,c
  1311  000B02  D053               	goto	l1875
  1312                           
  1313                           ;receiver.c: 438: writeAddressPhysical(0x5555, 0xaa);
  1314  000B04  0E55               	movlw	85
  1315  000B06  6E14               	movwf	writeAddressPhysical@adr+1,c
  1316  000B08  0E55               	movlw	85
  1317  000B0A  6E13               	movwf	writeAddressPhysical@adr,c
  1318  000B0C  0EAA               	movlw	170
  1319  000B0E  6E15               	movwf	writeAddressPhysical@value,c
  1320  000B10  EC3C  F007         	call	_writeAddressPhysical	;wreg free
  1321                           
  1322                           ;receiver.c: 439: writeAddressPhysical(0x2aaa, 0x55);
  1323  000B14  0E2A               	movlw	42
  1324  000B16  6E14               	movwf	writeAddressPhysical@adr+1,c
  1325  000B18  0EAA               	movlw	170
  1326  000B1A  6E13               	movwf	writeAddressPhysical@adr,c
  1327  000B1C  0E55               	movlw	85
  1328  000B1E  6E15               	movwf	writeAddressPhysical@value,c
  1329  000B20  EC3C  F007         	call	_writeAddressPhysical	;wreg free
  1330                           
  1331                           ;receiver.c: 440: writeAddressPhysical(0x5555, 0xa0);
  1332  000B24  0E55               	movlw	85
  1333  000B26  6E14               	movwf	writeAddressPhysical@adr+1,c
  1334  000B28  0E55               	movlw	85
  1335  000B2A  6E13               	movwf	writeAddressPhysical@adr,c
  1336  000B2C  0EA0               	movlw	160
  1337  000B2E  6E15               	movwf	writeAddressPhysical@value,c
  1338  000B30  EC3C  F007         	call	_writeAddressPhysical	;wreg free
  1339                           
  1340                           ;receiver.c: 441: writeAddress(adr, flashBuffer[flashBufferIndex]);
  1341  000B34  C01D  F010         	movff	_adr,writeAddress@adr
  1342  000B38  C01E  F011         	movff	_adr+1,writeAddress@adr+1
  1343  000B3C  0E00               	movlw	low _flashBuffer
  1344  000B3E  241B               	addwf	_flashBufferIndex,w,c
  1345  000B40  6ED9               	movwf	fsr2l,c
  1346  000B42  0E01               	movlw	high _flashBuffer
  1347  000B44  201C               	addwfc	_flashBufferIndex+1,w,c
  1348  000B46  6EDA               	movwf	fsr2h,c
  1349  000B48  50DF               	movf	indf2,w,c
  1350  000B4A  6E12               	movwf	writeAddress@value,c
  1351  000B4C  ECE9  F006         	call	_writeAddress	;wreg free
  1352                           
  1353                           ;receiver.c: 442: _delay((unsigned long)((25)*(16000000/4000000.0)));
  1354  000B50  0E21               	movlw	33
  1355  000B52                     u1447:
  1356  000B52  2EE8               	decfsz	wreg,f,c
  1357  000B54  D7FE               	bra	u1447
  1358  000B56  F000               	nop	
  1359                           
  1360                           ;receiver.c: 443: value = readAddress(adr);
  1361  000B58  C01D  F010         	movff	_adr,readAddress@adr
  1362  000B5C  C01E  F011         	movff	_adr+1,readAddress@adr+1
  1363  000B60  EC7D  F007         	call	_readAddress	;wreg free
  1364  000B64  6E2A               	movwf	_value,c
  1365                           
  1366                           ;receiver.c: 444: writeHex(value);
  1367  000B66  502A               	movf	_value,w,c
  1368  000B68  EC9C  F006         	call	_writeHex
  1369                           
  1370                           ;receiver.c: 445: value ^= 0xff;
  1371  000B6C  0EFF               	movlw	255
  1372  000B6E  1A2A               	xorwf	_value,f,c
  1373                           
  1374                           ;receiver.c: 446: writeHex(value);
  1375  000B70  502A               	movf	_value,w,c
  1376  000B72  EC9C  F006         	call	_writeHex
  1377                           
  1378                           ;receiver.c: 447: adr++;
  1379  000B76  4A1D               	infsnz	_adr,f,c
  1380  000B78  2A1E               	incf	_adr+1,f,c
  1381  000B7A  4A1B               	infsnz	_flashBufferIndex,f,c
  1382  000B7C  2A1C               	incf	_flashBufferIndex+1,f,c
  1383  000B7E  D7BF               	goto	l1841
  1384  000B80                     l1865:
  1385  000B80  0E06               	movlw	6
  1386  000B82  1826               	xorwf	_command,w,c
  1387  000B84  A4D8               	btfss	status,2,c
  1388  000B86  D00A               	goto	l1871
  1389                           
  1390                           ;receiver.c: 450: value = readAddress(adr);
  1391  000B88  C01D  F010         	movff	_adr,readAddress@adr
  1392  000B8C  C01E  F011         	movff	_adr+1,readAddress@adr+1
  1393  000B90  EC7D  F007         	call	_readAddress	;wreg free
  1394  000B94  6E2A               	movwf	_value,c
  1395                           
  1396                           ;receiver.c: 451: adr++;
  1397  000B96  4A1D               	infsnz	_adr,f,c
  1398  000B98  2A1E               	incf	_adr+1,f,c
  1399                           
  1400                           ;receiver.c: 452: } else if (command == COMMAND_BANK) {
  1401  000B9A  D007               	goto	l1875
  1402  000B9C                     l1871:
  1403  000B9C  0E07               	movlw	7
  1404  000B9E  1826               	xorwf	_command,w,c
  1405  000BA0  A4D8               	btfss	status,2,c
  1406  000BA2  D003               	goto	l1875
  1407                           
  1408                           ;receiver.c: 453: sendBankCommand(value);
  1409  000BA4  502A               	movf	_value,w,c
  1410  000BA6  ECA0  F007         	call	_sendBankCommand
  1411  000BAA                     l1875:
  1412                           
  1413                           ;receiver.c: 454: }
  1414                           ;receiver.c: 455: if (command != COMMAND_FLASH) {
  1415  000BAA  0E05               	movlw	5
  1416  000BAC  1826               	xorwf	_command,w,c
  1417  000BAE  B4D8               	btfsc	status,2,c
  1418  000BB0  0012               	return	
  1419                           
  1420                           ;receiver.c: 456: writeHex(value);
  1421  000BB2  502A               	movf	_value,w,c
  1422  000BB4  EC9C  F006         	call	_writeHex
  1423                           
  1424                           ;receiver.c: 457: value ^= 0xff;
  1425  000BB8  0EFF               	movlw	255
  1426  000BBA  1A2A               	xorwf	_value,f,c
  1427                           
  1428                           ;receiver.c: 458: writeHex(value);
  1429  000BBC  502A               	movf	_value,w,c
  1430  000BBE  EC9C  F006         	call	_writeHex
  1431                           
  1432                           ;receiver.c: 459: }
  1433                           ;receiver.c: 460: } else {
  1434  000BC2  0012               	return	
  1435  000BC4                     l1883:
  1436                           
  1437                           ;receiver.c: 461: error();
  1438  000BC4  ECB4  F007         	call	_error	;wreg free
  1439                           
  1440                           ;receiver.c: 462: }
  1441                           ;receiver.c: 463: } else {
  1442  000BC8  0012               	return	
  1443  000BCA                     l1885:
  1444                           
  1445                           ;receiver.c: 464: error();
  1446  000BCA  ECB4  F007         	call	_error	;wreg free
  1447                           
  1448                           ;receiver.c: 467: }
  1449                           
  1450                           ;receiver.c: 465: }
  1451                           ;receiver.c: 466: break;
  1452  000BCE  0012               	return	
  1453  000BD0                     l1889:
  1454  000BD0  502B               	movf	_state,w,c
  1455                           
  1456                           ; Switch size 1, requested type "space"
  1457                           ; Number of cases is 8, Range of values is 0 to 7
  1458                           ; switch strategies available:
  1459                           ; Name         Instructions Cycles
  1460                           ; simple_byte           25    13 (average)
  1461                           ;	Chosen strategy is simple_byte
  1462  000BD2  0A00               	xorlw	0	; case 0
  1463  000BD4  B4D8               	btfsc	status,2,c
  1464  000BD6  D620               	goto	l1639
  1465  000BD8  0A01               	xorlw	1	; case 1
  1466  000BDA  B4D8               	btfsc	status,2,c
  1467  000BDC  D626               	goto	l1643
  1468  000BDE  0A03               	xorlw	3	; case 2
  1469  000BE0  B4D8               	btfsc	status,2,c
  1470  000BE2  D670               	goto	l1681
  1471  000BE4  0A01               	xorlw	1	; case 3
  1472  000BE6  B4D8               	btfsc	status,2,c
  1473  000BE8  D69C               	goto	l1711
  1474  000BEA  0A07               	xorlw	7	; case 4
  1475  000BEC  B4D8               	btfsc	status,2,c
  1476  000BEE  D6AC               	goto	l1725
  1477  000BF0  0A01               	xorlw	1	; case 5
  1478  000BF2  B4D8               	btfsc	status,2,c
  1479  000BF4  D6D0               	goto	l1749
  1480  000BF6  0A03               	xorlw	3	; case 6
  1481  000BF8  B4D8               	btfsc	status,2,c
  1482  000BFA  D6DE               	goto	l1761
  1483  000BFC  0A01               	xorlw	1	; case 7
  1484  000BFE  A4D8               	btfss	status,2,c
  1485  000C00  0012               	return	
  1486  000C02  D6E8               	goto	l1771
  1487  000C04                     __end_of_onData:
  1488                           	opt stack 0
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postdec1	equ	0xFE5
  1496                           fsr1h	equ	0xFE2
  1497                           fsr1l	equ	0xFE1
  1498                           indf2	equ	0xFDF
  1499                           fsr2h	equ	0xFDA
  1500                           fsr2l	equ	0xFD9
  1501                           status	equ	0xFD8
  1502                           
  1503 ;; *************** function _writeTrisE *****************
  1504 ;; Defined at:
  1505 ;;		line 172 in file "main.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  data            1    wreg     unsigned char 
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;  data            1   14[COMRAM] unsigned char 
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1519 ;;      Params:         0       0       0       0       0       0       0       0       0
  1520 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1522 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1523 ;;Total ram usage:        1 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; Hardware stack levels required when called:    1
  1526 ;; This function calls:
  1527 ;;		Nothing
  1528 ;; This function is called by:
  1529 ;;		_onData
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text3
  1534  000F8A                     __ptext3:
  1535                           	opt stack 0
  1536  000F8A                     _writeTrisE:
  1537                           	opt stack 28
  1538                           
  1539                           ;incstack = 0
  1540                           ;writeTrisE@data stored from wreg
  1541  000F8A  6E0F               	movwf	writeTrisE@data,c
  1542                           
  1543                           ;main.c: 174: TRISE = data;
  1544  000F8C  C00F  FF96         	movff	writeTrisE@data,3990	;volatile
  1545  000F90  0012               	return		;funcret
  1546  000F92                     __end_of_writeTrisE:
  1547                           	opt stack 0
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           postdec1	equ	0xFE5
  1555                           fsr1h	equ	0xFE2
  1556                           fsr1l	equ	0xFE1
  1557                           indf2	equ	0xFDF
  1558                           fsr2h	equ	0xFDA
  1559                           fsr2l	equ	0xFD9
  1560                           status	equ	0xFD8
  1561                           
  1562 ;; *************** function _writeTrisD *****************
  1563 ;; Defined at:
  1564 ;;		line 166 in file "main.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  data            1    wreg     unsigned char 
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  data            1   14[COMRAM] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1578 ;;      Params:         0       0       0       0       0       0       0       0       0
  1579 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1580 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1581 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1582 ;;Total ram usage:        1 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    1
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_onData
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           	psect	text4
  1593  000F80                     __ptext4:
  1594                           	opt stack 0
  1595  000F80                     _writeTrisD:
  1596                           	opt stack 28
  1597                           
  1598                           ;incstack = 0
  1599                           ;writeTrisD@data stored from wreg
  1600  000F80  6E0F               	movwf	writeTrisD@data,c
  1601                           
  1602                           ;main.c: 169: TRISD = (uint8_t) (data | 0x80);
  1603  000F82  500F               	movf	writeTrisD@data,w,c
  1604  000F84  0980               	iorlw	128
  1605  000F86  6E95               	movwf	3989,c	;volatile
  1606  000F88  0012               	return		;funcret
  1607  000F8A                     __end_of_writeTrisD:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           postdec1	equ	0xFE5
  1616                           fsr1h	equ	0xFE2
  1617                           fsr1l	equ	0xFE1
  1618                           indf2	equ	0xFDF
  1619                           fsr2h	equ	0xFDA
  1620                           fsr2l	equ	0xFD9
  1621                           status	equ	0xFD8
  1622                           
  1623 ;; *************** function _writeTrisC *****************
  1624 ;; Defined at:
  1625 ;;		line 160 in file "main.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;  data            1    wreg     unsigned char 
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;  data            1   14[COMRAM] unsigned char 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, status,2, status,0
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1639 ;;      Params:         0       0       0       0       0       0       0       0       0
  1640 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1641 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1642 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1643 ;;Total ram usage:        1 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_onData
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text5
  1654  000F5C                     __ptext5:
  1655                           	opt stack 0
  1656  000F5C                     _writeTrisC:
  1657                           	opt stack 28
  1658                           
  1659                           ;incstack = 0
  1660                           ;writeTrisC@data stored from wreg
  1661  000F5C  6E0F               	movwf	writeTrisC@data,c
  1662                           
  1663                           ;main.c: 163: TRISC = (uint8_t) (data & 0b10111111 | 0x80);
  1664  000F5E  500F               	movf	writeTrisC@data,w,c
  1665  000F60  0BBF               	andlw	191
  1666  000F62  0980               	iorlw	128
  1667  000F64  6E94               	movwf	3988,c	;volatile
  1668  000F66  0012               	return		;funcret
  1669  000F68                     __end_of_writeTrisC:
  1670                           	opt stack 0
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           postdec1	equ	0xFE5
  1678                           fsr1h	equ	0xFE2
  1679                           fsr1l	equ	0xFE1
  1680                           indf2	equ	0xFDF
  1681                           fsr2h	equ	0xFDA
  1682                           fsr2l	equ	0xFD9
  1683                           status	equ	0xFD8
  1684                           
  1685 ;; *************** function _writeTrisB *****************
  1686 ;; Defined at:
  1687 ;;		line 155 in file "main.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;  data            1    wreg     unsigned char 
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;  data            1   14[COMRAM] unsigned char 
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  1    wreg      void 
  1694 ;; Registers used:
  1695 ;;		wreg
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1701 ;;      Params:         0       0       0       0       0       0       0       0       0
  1702 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1704 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1705 ;;Total ram usage:        1 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:    1
  1708 ;; This function calls:
  1709 ;;		Nothing
  1710 ;; This function is called by:
  1711 ;;		_onData
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text6
  1716  000F92                     __ptext6:
  1717                           	opt stack 0
  1718  000F92                     _writeTrisB:
  1719                           	opt stack 28
  1720                           
  1721                           ;incstack = 0
  1722                           ;writeTrisB@data stored from wreg
  1723  000F92  6E0F               	movwf	writeTrisB@data,c
  1724                           
  1725                           ;main.c: 157: TRISB = data;
  1726  000F94  C00F  FF93         	movff	writeTrisB@data,3987	;volatile
  1727  000F98  0012               	return		;funcret
  1728  000F9A                     __end_of_writeTrisB:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           tblptrh	equ	0xFF7
  1732                           tblptrl	equ	0xFF6
  1733                           tablat	equ	0xFF5
  1734                           postinc0	equ	0xFEE
  1735                           wreg	equ	0xFE8
  1736                           postdec1	equ	0xFE5
  1737                           fsr1h	equ	0xFE2
  1738                           fsr1l	equ	0xFE1
  1739                           indf2	equ	0xFDF
  1740                           fsr2h	equ	0xFDA
  1741                           fsr2l	equ	0xFD9
  1742                           status	equ	0xFD8
  1743                           
  1744 ;; *************** function _writeHex *****************
  1745 ;; Defined at:
  1746 ;;		line 96 in file "receiver.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  data            1    wreg     unsigned char 
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  data            1   18[COMRAM] unsigned char 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1760 ;;      Params:         0       0       0       0       0       0       0       0       0
  1761 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1762 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1763 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1764 ;;Total ram usage:        4 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    2
  1767 ;; This function calls:
  1768 ;;		_writeChar
  1769 ;; This function is called by:
  1770 ;;		_onData
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text7
  1775  000D38                     __ptext7:
  1776                           	opt stack 0
  1777  000D38                     _writeHex:
  1778                           	opt stack 27
  1779                           
  1780                           ;incstack = 0
  1781                           ;writeHex@data stored from wreg
  1782  000D38  6E13               	movwf	writeHex@data,c
  1783                           
  1784                           ;receiver.c: 98: writeChar(hex[data >> 4]);
  1785  000D3A  C013  F010         	movff	writeHex@data,??_writeHex
  1786  000D3E  3A10               	swapf	??_writeHex,f,c
  1787  000D40  0E0F               	movlw	15
  1788  000D42  1610               	andwf	??_writeHex,f,c
  1789  000D44  5010               	movf	??_writeHex,w,c
  1790  000D46  242C               	addwf	_hex,w,c
  1791  000D48  6E11               	movwf	(??_writeHex+1)& (0+255),c
  1792  000D4A  0E00               	movlw	0
  1793  000D4C  202D               	addwfc	_hex+1,w,c
  1794  000D4E  6E12               	movwf	(??_writeHex+2)& (0+255),c
  1795  000D50  C011  FFF6         	movff	??_writeHex+1,tblptrl
  1796  000D54  C012  FFF7         	movff	??_writeHex+2,tblptrh
  1797  000D58                     	if	0	;tblptru may be non-zero
  1798  000D58                     	endif
  1799  000D58                     	if	0	;tblptru may be non-zero
  1800  000D58                     	endif
  1801  000D58  0008               	tblrd		*
  1802  000D5A  50F5               	movf	tablat,w,c
  1803  000D5C  ECBA  F007         	call	_writeChar
  1804                           
  1805                           ;receiver.c: 99: writeChar(hex[data & 0xf]);
  1806  000D60  C013  F010         	movff	writeHex@data,??_writeHex
  1807  000D64  0E0F               	movlw	15
  1808  000D66  1610               	andwf	??_writeHex,f,c
  1809  000D68  5010               	movf	??_writeHex,w,c
  1810  000D6A  242C               	addwf	_hex,w,c
  1811  000D6C  6E11               	movwf	(??_writeHex+1)& (0+255),c
  1812  000D6E  0E00               	movlw	0
  1813  000D70  202D               	addwfc	_hex+1,w,c
  1814  000D72  6E12               	movwf	(??_writeHex+2)& (0+255),c
  1815  000D74  C011  FFF6         	movff	??_writeHex+1,tblptrl
  1816  000D78  C012  FFF7         	movff	??_writeHex+2,tblptrh
  1817  000D7C                     	if	0	;tblptru may be non-zero
  1818  000D7C                     	endif
  1819  000D7C                     	if	0	;tblptru may be non-zero
  1820  000D7C                     	endif
  1821  000D7C  0008               	tblrd		*
  1822  000D7E  50F5               	movf	tablat,w,c
  1823  000D80  ECBA  F007         	call	_writeChar
  1824  000D84  0012               	return		;funcret
  1825  000D86                     __end_of_writeHex:
  1826                           	opt stack 0
  1827                           tblptru	equ	0xFF8
  1828                           tblptrh	equ	0xFF7
  1829                           tblptrl	equ	0xFF6
  1830                           tablat	equ	0xFF5
  1831                           postinc0	equ	0xFEE
  1832                           wreg	equ	0xFE8
  1833                           postdec1	equ	0xFE5
  1834                           fsr1h	equ	0xFE2
  1835                           fsr1l	equ	0xFE1
  1836                           indf2	equ	0xFDF
  1837                           fsr2h	equ	0xFDA
  1838                           fsr2l	equ	0xFD9
  1839                           status	equ	0xFD8
  1840                           
  1841 ;; *************** function _writeAddressPhysical *****************
  1842 ;; Defined at:
  1843 ;;		line 173 in file "receiver.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  adr             2   18[COMRAM] unsigned int 
  1846 ;;  value           1   20[COMRAM] unsigned char 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1858 ;;      Params:         3       0       0       0       0       0       0       0       0
  1859 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1861 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1862 ;;Total ram usage:        3 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; Hardware stack levels required when called:    3
  1865 ;; This function calls:
  1866 ;;		_logicAddressToPhysical
  1867 ;;		_logicDataToPhysical
  1868 ;;		_writeAddress
  1869 ;; This function is called by:
  1870 ;;		_onData
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text8
  1875  000E78                     __ptext8:
  1876                           	opt stack 0
  1877  000E78                     _writeAddressPhysical:
  1878                           	opt stack 26
  1879                           
  1880                           ;receiver.c: 175: adr = logicAddressToPhysical(adr);
  1881                           
  1882                           ;incstack = 0
  1883  000E78  C013  F00F         	movff	writeAddressPhysical@adr,logicAddressToPhysical@adr0
  1884  000E7C  C014  F010         	movff	writeAddressPhysical@adr+1,logicAddressToPhysical@adr0+1
  1885  000E80  EC73  F006         	call	_logicAddressToPhysical	;wreg free
  1886  000E84  C00F  F013         	movff	?_logicAddressToPhysical,writeAddressPhysical@adr
  1887  000E88  C010  F014         	movff	?_logicAddressToPhysical+1,writeAddressPhysical@adr+1
  1888                           
  1889                           ;receiver.c: 176: value = logicDataToPhysical(value);
  1890  000E8C  5015               	movf	writeAddressPhysical@value,w,c
  1891  000E8E  EC53  F007         	call	_logicDataToPhysical
  1892  000E92  6E15               	movwf	writeAddressPhysical@value,c
  1893                           
  1894                           ;receiver.c: 177: writeAddress(adr, value);
  1895  000E94  C013  F010         	movff	writeAddressPhysical@adr,writeAddress@adr
  1896  000E98  C014  F011         	movff	writeAddressPhysical@adr+1,writeAddress@adr+1
  1897  000E9C  C015  F012         	movff	writeAddressPhysical@value,writeAddress@value
  1898  000EA0  ECE9  F006         	call	_writeAddress	;wreg free
  1899  000EA4  0012               	return		;funcret
  1900  000EA6                     __end_of_writeAddressPhysical:
  1901                           	opt stack 0
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postdec1	equ	0xFE5
  1909                           fsr1h	equ	0xFE2
  1910                           fsr1l	equ	0xFE1
  1911                           indf2	equ	0xFDF
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916 ;; *************** function _writeAddress *****************
  1917 ;; Defined at:
  1918 ;;		line 153 in file "receiver.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  adr             2   15[COMRAM] unsigned int 
  1921 ;;  value           1   17[COMRAM] unsigned char 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;		None
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  1    wreg      void 
  1926 ;; Registers used:
  1927 ;;		wreg, status,2, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1933 ;;      Params:         3       0       0       0       0       0       0       0       0
  1934 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1936 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1937 ;;Total ram usage:        3 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; Hardware stack levels required when called:    2
  1940 ;; This function calls:
  1941 ;;		_writePortA
  1942 ;;		_writePortB
  1943 ;;		_writePortC
  1944 ;;		_writePortD
  1945 ;;		_writePortE
  1946 ;;		_writeTrisA
  1947 ;; This function is called by:
  1948 ;;		_writeAddressPhysical
  1949 ;;		_onData
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text9
  1954  000DD2                     __ptext9:
  1955                           	opt stack 0
  1956  000DD2                     _writeAddress:
  1957                           	opt stack 26
  1958                           
  1959                           ;receiver.c: 155: writeTrisA(0);
  1960                           
  1961                           ;incstack = 0
  1962  000DD2  0E00               	movlw	0
  1963  000DD4  ECCD  F007         	call	_writeTrisA
  1964                           
  1965                           ;receiver.c: 156: writePortA(value);
  1966  000DD8  5012               	movf	writeAddress@value,w,c
  1967  000DDA  ECD5  F007         	call	_writePortA
  1968                           
  1969                           ;receiver.c: 157: writePortC(0xff);
  1970  000DDE  0EFF               	movlw	255
  1971  000DE0  ECDD  F007         	call	_writePortC
  1972                           
  1973                           ;receiver.c: 158: writePortB(adr & 0xff);
  1974  000DE4  5010               	movf	writeAddress@adr,w,c
  1975  000DE6  ECE1  F007         	call	_writePortB
  1976                           
  1977                           ;receiver.c: 159: writePortD((adr >> 8) & 0xff);
  1978  000DEA  5011               	movf	writeAddress@adr+1,w,c
  1979  000DEC  ECD9  F007         	call	_writePortD
  1980                           
  1981                           ;receiver.c: 162: writePortE(2 | 4);
  1982  000DF0  0E06               	movlw	6
  1983  000DF2  ECD1  F007         	call	_writePortE
  1984                           
  1985                           ;receiver.c: 163: writePortC(2 | 0x40);
  1986  000DF6  0E42               	movlw	66
  1987  000DF8  ECDD  F007         	call	_writePortC
  1988                           
  1989                           ;receiver.c: 166: writePortC(0xff);
  1990  000DFC  0EFF               	movlw	255
  1991  000DFE  ECDD  F007         	call	_writePortC
  1992                           
  1993                           ;receiver.c: 167: writePortE(0xff);
  1994  000E02  0EFF               	movlw	255
  1995  000E04  ECD1  F007         	call	_writePortE
  1996                           
  1997                           ;receiver.c: 170: writeTrisA(0xff);
  1998  000E08  0EFF               	movlw	255
  1999  000E0A  ECCD  F007         	call	_writeTrisA
  2000  000E0E  0012               	return		;funcret
  2001  000E10                     __end_of_writeAddress:
  2002                           	opt stack 0
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           postinc0	equ	0xFEE
  2008                           wreg	equ	0xFE8
  2009                           postdec1	equ	0xFE5
  2010                           fsr1h	equ	0xFE2
  2011                           fsr1l	equ	0xFE1
  2012                           indf2	equ	0xFDF
  2013                           fsr2h	equ	0xFDA
  2014                           fsr2l	equ	0xFD9
  2015                           status	equ	0xFD8
  2016                           
  2017 ;; *************** function _writeTrisA *****************
  2018 ;; Defined at:
  2019 ;;		line 150 in file "main.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  data            1    wreg     unsigned char 
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;  data            1   14[COMRAM] unsigned char 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2033 ;;      Params:         0       0       0       0       0       0       0       0       0
  2034 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2036 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2037 ;;Total ram usage:        1 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    1
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_writeAddress
  2044 ;;		_onData
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text10
  2049  000F9A                     __ptext10:
  2050                           	opt stack 0
  2051  000F9A                     _writeTrisA:
  2052                           	opt stack 28
  2053                           
  2054                           ;incstack = 0
  2055                           ;writeTrisA@data stored from wreg
  2056  000F9A  6E0F               	movwf	writeTrisA@data,c
  2057                           
  2058                           ;main.c: 152: TRISA = data;
  2059  000F9C  C00F  FF92         	movff	writeTrisA@data,3986	;volatile
  2060  000FA0  0012               	return		;funcret
  2061  000FA2                     __end_of_writeTrisA:
  2062                           	opt stack 0
  2063                           tblptru	equ	0xFF8
  2064                           tblptrh	equ	0xFF7
  2065                           tblptrl	equ	0xFF6
  2066                           tablat	equ	0xFF5
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           postdec1	equ	0xFE5
  2070                           fsr1h	equ	0xFE2
  2071                           fsr1l	equ	0xFE1
  2072                           indf2	equ	0xFDF
  2073                           fsr2h	equ	0xFDA
  2074                           fsr2l	equ	0xFD9
  2075                           status	equ	0xFD8
  2076                           
  2077 ;; *************** function _writePortE *****************
  2078 ;; Defined at:
  2079 ;;		line 145 in file "main.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  data            1    wreg     unsigned char 
  2082 ;; Auto vars:     Size  Location     Type
  2083 ;;  data            1   14[COMRAM] unsigned char 
  2084 ;; Return value:  Size  Location     Type
  2085 ;;                  1    wreg      void 
  2086 ;; Registers used:
  2087 ;;		wreg
  2088 ;; Tracked objects:
  2089 ;;		On entry : 0/0
  2090 ;;		On exit  : 0/0
  2091 ;;		Unchanged: 0/0
  2092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2093 ;;      Params:         0       0       0       0       0       0       0       0       0
  2094 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2095 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2096 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2097 ;;Total ram usage:        1 bytes
  2098 ;; Hardware stack levels used:    1
  2099 ;; Hardware stack levels required when called:    1
  2100 ;; This function calls:
  2101 ;;		Nothing
  2102 ;; This function is called by:
  2103 ;;		_writeAddress
  2104 ;;		_onData
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text11
  2109  000FA2                     __ptext11:
  2110                           	opt stack 0
  2111  000FA2                     _writePortE:
  2112                           	opt stack 28
  2113                           
  2114                           ;incstack = 0
  2115                           ;writePortE@data stored from wreg
  2116  000FA2  6E0F               	movwf	writePortE@data,c
  2117                           
  2118                           ;main.c: 147: PORTE = data;
  2119  000FA4  C00F  FF84         	movff	writePortE@data,3972	;volatile
  2120  000FA8  0012               	return		;funcret
  2121  000FAA                     __end_of_writePortE:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           tblptrh	equ	0xFF7
  2125                           tblptrl	equ	0xFF6
  2126                           tablat	equ	0xFF5
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           postdec1	equ	0xFE5
  2130                           fsr1h	equ	0xFE2
  2131                           fsr1l	equ	0xFE1
  2132                           indf2	equ	0xFDF
  2133                           fsr2h	equ	0xFDA
  2134                           fsr2l	equ	0xFD9
  2135                           status	equ	0xFD8
  2136                           
  2137 ;; *************** function _writePortA *****************
  2138 ;; Defined at:
  2139 ;;		line 125 in file "main.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;  data            1    wreg     unsigned char 
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  data            1   14[COMRAM] unsigned char 
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  1    wreg      void 
  2146 ;; Registers used:
  2147 ;;		wreg
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2153 ;;      Params:         0       0       0       0       0       0       0       0       0
  2154 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2156 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2157 ;;Total ram usage:        1 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; Hardware stack levels required when called:    1
  2160 ;; This function calls:
  2161 ;;		Nothing
  2162 ;; This function is called by:
  2163 ;;		_writeAddress
  2164 ;;		_onData
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text12
  2169  000FAA                     __ptext12:
  2170                           	opt stack 0
  2171  000FAA                     _writePortA:
  2172                           	opt stack 28
  2173                           
  2174                           ;incstack = 0
  2175                           ;writePortA@data stored from wreg
  2176  000FAA  6E0F               	movwf	writePortA@data,c
  2177                           
  2178                           ;main.c: 127: PORTA = data;
  2179  000FAC  C00F  FF80         	movff	writePortA@data,3968	;volatile
  2180  000FB0  0012               	return		;funcret
  2181  000FB2                     __end_of_writePortA:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           postinc0	equ	0xFEE
  2188                           wreg	equ	0xFE8
  2189                           postdec1	equ	0xFE5
  2190                           fsr1h	equ	0xFE2
  2191                           fsr1l	equ	0xFE1
  2192                           indf2	equ	0xFDF
  2193                           fsr2h	equ	0xFDA
  2194                           fsr2l	equ	0xFD9
  2195                           status	equ	0xFD8
  2196                           
  2197 ;; *************** function _logicDataToPhysical *****************
  2198 ;; Defined at:
  2199 ;;		line 139 in file "receiver.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  value0          1    wreg     unsigned char 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  value0          1   15[COMRAM] unsigned char 
  2204 ;;  pvalue          1   14[COMRAM] unsigned char 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      unsigned char 
  2207 ;; Registers used:
  2208 ;;		wreg, status,2, status,0
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2214 ;;      Params:         0       0       0       0       0       0       0       0       0
  2215 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2217 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2218 ;;Total ram usage:        2 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    1
  2221 ;; This function calls:
  2222 ;;		Nothing
  2223 ;; This function is called by:
  2224 ;;		_writeAddressPhysical
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           	psect	text13
  2229  000EA6                     __ptext13:
  2230                           	opt stack 0
  2231  000EA6                     _logicDataToPhysical:
  2232                           	opt stack 27
  2233                           
  2234                           ;incstack = 0
  2235                           ;logicDataToPhysical@value0 stored from wreg
  2236  000EA6  6E10               	movwf	logicDataToPhysical@value0,c
  2237                           
  2238                           ;receiver.c: 141: uint8_t pvalue = 0;
  2239  000EA8  0E00               	movlw	0
  2240  000EAA  6E0F               	movwf	logicDataToPhysical@pvalue,c
  2241                           
  2242                           ;receiver.c: 142: if (value0 & (1 << 0)) pvalue |= 1 << 3;
  2243  000EAC  B010               	btfsc	logicDataToPhysical@value0,0,c
  2244  000EAE  860F               	bsf	logicDataToPhysical@pvalue,3,c
  2245                           
  2246                           ;receiver.c: 143: if (value0 & (1 << 1)) pvalue |= 1 << 4;
  2247  000EB0  B210               	btfsc	logicDataToPhysical@value0,1,c
  2248  000EB2  880F               	bsf	logicDataToPhysical@pvalue,4,c
  2249                           
  2250                           ;receiver.c: 144: if (value0 & (1 << 2)) pvalue |= 1 << 2;
  2251  000EB4  B410               	btfsc	logicDataToPhysical@value0,2,c
  2252  000EB6  840F               	bsf	logicDataToPhysical@pvalue,2,c
  2253                           
  2254                           ;receiver.c: 145: if (value0 & (1 << 3)) pvalue |= 1 << 5;
  2255  000EB8  B610               	btfsc	logicDataToPhysical@value0,3,c
  2256  000EBA  8A0F               	bsf	logicDataToPhysical@pvalue,5,c
  2257                           
  2258                           ;receiver.c: 146: if (value0 & (1 << 4)) pvalue |= 1 << 1;
  2259  000EBC  B810               	btfsc	logicDataToPhysical@value0,4,c
  2260  000EBE  820F               	bsf	logicDataToPhysical@pvalue,1,c
  2261                           
  2262                           ;receiver.c: 147: if (value0 & (1 << 5)) pvalue |= 1 << 6;
  2263  000EC0  BA10               	btfsc	logicDataToPhysical@value0,5,c
  2264  000EC2  8C0F               	bsf	logicDataToPhysical@pvalue,6,c
  2265                           
  2266                           ;receiver.c: 148: if (value0 & (1 << 6)) pvalue |= 1 << 0;
  2267  000EC4  BC10               	btfsc	logicDataToPhysical@value0,6,c
  2268  000EC6  800F               	bsf	logicDataToPhysical@pvalue,0,c
  2269                           
  2270                           ;receiver.c: 149: if (value0 & (1 << 7)) pvalue |= 1 << 7;
  2271  000EC8  BE10               	btfsc	logicDataToPhysical@value0,7,c
  2272  000ECA  8E0F               	bsf	logicDataToPhysical@pvalue,7,c
  2273                           
  2274                           ;receiver.c: 150: return pvalue;
  2275  000ECC  500F               	movf	logicDataToPhysical@pvalue,w,c
  2276  000ECE  0012               	return	
  2277  000ED0                     __end_of_logicDataToPhysical:
  2278                           	opt stack 0
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           postinc0	equ	0xFEE
  2284                           wreg	equ	0xFE8
  2285                           postdec1	equ	0xFE5
  2286                           fsr1h	equ	0xFE2
  2287                           fsr1l	equ	0xFE1
  2288                           indf2	equ	0xFDF
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _logicAddressToPhysical *****************
  2294 ;; Defined at:
  2295 ;;		line 117 in file "receiver.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  adr0            2   14[COMRAM] unsigned int 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  padr            2   16[COMRAM] unsigned int 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  2   14[COMRAM] unsigned int 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2309 ;;      Params:         2       0       0       0       0       0       0       0       0
  2310 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2312 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2313 ;;Total ram usage:        4 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    1
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_writeAddressPhysical
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text14
  2324  000CE6                     __ptext14:
  2325                           	opt stack 0
  2326  000CE6                     _logicAddressToPhysical:
  2327                           	opt stack 27
  2328                           
  2329                           ;receiver.c: 119: uint16_t padr = 0;
  2330                           
  2331                           ;incstack = 0
  2332  000CE6  0E00               	movlw	0
  2333  000CE8  6E12               	movwf	logicAddressToPhysical@padr+1,c
  2334  000CEA  0E00               	movlw	0
  2335  000CEC  6E11               	movwf	logicAddressToPhysical@padr,c
  2336                           
  2337                           ;receiver.c: 120: if (adr0 & (1 << 0)) padr |= 1 << 0;
  2338  000CEE  B00F               	btfsc	logicAddressToPhysical@adr0,0,c
  2339  000CF0  8011               	bsf	logicAddressToPhysical@padr,0,c
  2340                           
  2341                           ;receiver.c: 121: if (adr0 & (1 << 1)) padr |= 1 << 12;
  2342  000CF2  B20F               	btfsc	logicAddressToPhysical@adr0,1,c
  2343  000CF4  8812               	bsf	logicAddressToPhysical@padr+1,4,c
  2344                           
  2345                           ;receiver.c: 122: if (adr0 & (1 << 2)) padr |= 1 << 13;
  2346  000CF6  B40F               	btfsc	logicAddressToPhysical@adr0,2,c
  2347  000CF8  8A12               	bsf	logicAddressToPhysical@padr+1,5,c
  2348                           
  2349                           ;receiver.c: 123: if (adr0 & (1 << 3)) padr |= 1 << 14;
  2350  000CFA  B60F               	btfsc	logicAddressToPhysical@adr0,3,c
  2351  000CFC  8C12               	bsf	logicAddressToPhysical@padr+1,6,c
  2352                           
  2353                           ;receiver.c: 124: if (adr0 & (1 << 4)) padr |= 1 << 10;
  2354  000CFE  B80F               	btfsc	logicAddressToPhysical@adr0,4,c
  2355  000D00  8412               	bsf	logicAddressToPhysical@padr+1,2,c
  2356                           
  2357                           ;receiver.c: 125: if (adr0 & (1 << 5)) padr |= 1 << 2;
  2358  000D02  BA0F               	btfsc	logicAddressToPhysical@adr0,5,c
  2359  000D04  8411               	bsf	logicAddressToPhysical@padr,2,c
  2360                           
  2361                           ;receiver.c: 126: if (adr0 & (1 << 6)) padr |= 1 << 3;
  2362  000D06  BC0F               	btfsc	logicAddressToPhysical@adr0,6,c
  2363  000D08  8611               	bsf	logicAddressToPhysical@padr,3,c
  2364                           
  2365                           ;receiver.c: 127: if (adr0 & (1 << 7)) padr |= 1 << 11;
  2366  000D0A  BE0F               	btfsc	logicAddressToPhysical@adr0,7,c
  2367  000D0C  8612               	bsf	logicAddressToPhysical@padr+1,3,c
  2368                           
  2369                           ;receiver.c: 128: if (adr0 & (1 << 8)) padr |= 1 << 8;
  2370  000D0E  B010               	btfsc	logicAddressToPhysical@adr0+1,0,c
  2371  000D10  8012               	bsf	logicAddressToPhysical@padr+1,0,c
  2372                           
  2373                           ;receiver.c: 129: if (adr0 & (1 << 9)) padr |= 1 << 6;
  2374  000D12  B210               	btfsc	logicAddressToPhysical@adr0+1,1,c
  2375  000D14  8C11               	bsf	logicAddressToPhysical@padr,6,c
  2376                           
  2377                           ;receiver.c: 130: if (adr0 & (1 << 10)) padr |= 1 << 1;
  2378  000D16  B410               	btfsc	logicAddressToPhysical@adr0+1,2,c
  2379  000D18  8211               	bsf	logicAddressToPhysical@padr,1,c
  2380                           
  2381                           ;receiver.c: 131: if (adr0 & (1 << 11)) padr |= 1 << 7;
  2382  000D1A  B610               	btfsc	logicAddressToPhysical@adr0+1,3,c
  2383  000D1C  8E11               	bsf	logicAddressToPhysical@padr,7,c
  2384                           
  2385                           ;receiver.c: 132: if (adr0 & (1 << 12)) padr |= 1 << 4;
  2386  000D1E  B810               	btfsc	logicAddressToPhysical@adr0+1,4,c
  2387  000D20  8811               	bsf	logicAddressToPhysical@padr,4,c
  2388                           
  2389                           ;receiver.c: 133: if (adr0 & (1 << 13)) padr |= 1 << 5;
  2390  000D22  BA10               	btfsc	logicAddressToPhysical@adr0+1,5,c
  2391  000D24  8A11               	bsf	logicAddressToPhysical@padr,5,c
  2392                           
  2393                           ;receiver.c: 134: if (adr0 & (1 << 14)) padr |= 1 << 9;
  2394  000D26  BC10               	btfsc	logicAddressToPhysical@adr0+1,6,c
  2395  000D28  8212               	bsf	logicAddressToPhysical@padr+1,1,c
  2396                           
  2397                           ;receiver.c: 135: if (adr0 & (1 << 15)) padr |= 1 << 15;
  2398  000D2A  BE10               	btfsc	logicAddressToPhysical@adr0+1,7,c
  2399  000D2C  8E12               	bsf	logicAddressToPhysical@padr+1,7,c
  2400                           
  2401                           ;receiver.c: 136: return padr;
  2402  000D2E  C011  F00F         	movff	logicAddressToPhysical@padr,?_logicAddressToPhysical
  2403  000D32  C012  F010         	movff	logicAddressToPhysical@padr+1,?_logicAddressToPhysical+1
  2404  000D36  0012               	return	
  2405  000D38                     __end_of_logicAddressToPhysical:
  2406                           	opt stack 0
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           postinc0	equ	0xFEE
  2412                           wreg	equ	0xFE8
  2413                           postdec1	equ	0xFE5
  2414                           fsr1h	equ	0xFE2
  2415                           fsr1l	equ	0xFE1
  2416                           indf2	equ	0xFDF
  2417                           fsr2h	equ	0xFDA
  2418                           fsr2l	equ	0xFD9
  2419                           status	equ	0xFD8
  2420                           
  2421 ;; *************** function _sendBankCommand *****************
  2422 ;; Defined at:
  2423 ;;		line 281 in file "receiver.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  bank            1    wreg     unsigned char 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  bank            1   15[COMRAM] unsigned char 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2437 ;;      Params:         0       0       0       0       0       0       0       0       0
  2438 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2440 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2441 ;;Total ram usage:        1 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    2
  2444 ;; This function calls:
  2445 ;;		_writeByte
  2446 ;; This function is called by:
  2447 ;;		_onData
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text15
  2452  000F40                     __ptext15:
  2453                           	opt stack 0
  2454  000F40                     _sendBankCommand:
  2455                           	opt stack 27
  2456                           
  2457                           ;incstack = 0
  2458                           ;sendBankCommand@bank stored from wreg
  2459  000F40  6E10               	movwf	sendBankCommand@bank,c
  2460                           
  2461                           ;receiver.c: 283: PORTDbits.RD7 = 0;
  2462  000F42  9E83               	bcf	3971,7,c	;volatile
  2463                           
  2464                           ;receiver.c: 284: TRISDbits.TRISD7 = 0;
  2465  000F44  9E95               	bcf	3989,7,c	;volatile
  2466                           
  2467                           ;receiver.c: 285: writeByte('V');
  2468  000F46  0E56               	movlw	86
  2469  000F48  EC02  F006         	call	_writeByte
  2470                           
  2471                           ;receiver.c: 286: writeByte(5);
  2472  000F4C  0E05               	movlw	5
  2473  000F4E  EC02  F006         	call	_writeByte
  2474                           
  2475                           ;receiver.c: 287: writeByte(bank);
  2476  000F52  5010               	movf	sendBankCommand@bank,w,c
  2477  000F54  EC02  F006         	call	_writeByte
  2478                           
  2479                           ;receiver.c: 288: TRISDbits.TRISD7 = 1;
  2480  000F58  8E95               	bsf	3989,7,c	;volatile
  2481  000F5A  0012               	return		;funcret
  2482  000F5C                     __end_of_sendBankCommand:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           postdec1	equ	0xFE5
  2491                           fsr1h	equ	0xFE2
  2492                           fsr1l	equ	0xFE1
  2493                           indf2	equ	0xFDF
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _writeByte *****************
  2499 ;; Defined at:
  2500 ;;		line 198 in file "receiver.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  b               1    wreg     unsigned char 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  b               1   14[COMRAM] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2514 ;;      Params:         0       0       0       0       0       0       0       0       0
  2515 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2517 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2518 ;;Total ram usage:        1 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    1
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_sendBankCommand
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text16
  2529  000C04                     __ptext16:
  2530                           	opt stack 0
  2531  000C04                     _writeByte:
  2532                           	opt stack 27
  2533                           
  2534                           ;incstack = 0
  2535                           ;writeByte@b stored from wreg
  2536  000C04  6E0F               	movwf	writeByte@b,c
  2537                           
  2538                           ;receiver.c: 200: shiftCounter = 8;
  2539  000C06  0E08               	movlw	8
  2540  000C08  6E24               	movwf	_shiftCounter,c
  2541                           
  2542                           ;receiver.c: 201: shift = b;
  2543  000C0A  C00F  F023         	movff	writeByte@b,_shift
  2544                           
  2545                           ; STATUS bits ;# 
  2546                           ; C EQU 0 ;# 
  2547  0000                     
  2548                           ; wait 21 us ;# 
  2549  000C0E  0100               	banksel	_temp	;# 
  2550  000C10  0E15               	movlw	21	;# 
  2551  000C12  6F27               	movwf	_temp,b	;# 
  2552  000C14                     wait21:
  2553  000C14  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2554  000C16  EF0A  F006         	goto	wait21	;# 
  2555  000C1A  010F               	banksel	3971	;# 
  2556  000C1C                     start_write:
  2557                           
  2558                           ;# 
  2559  000C1C  8E83               	bsf	3971,7,c	;# 
  2560  000C1E  0100               	banksel	_shift	;# 
  2561  000C20  AF23               	btfss	_shift,7,b	;# 
  2562  000C22  EF27  F006         	goto	bit0	;# 
  2563                           
  2564                           ; send 1 bit: 10 us 1, 20 us pause ;# 
  2565                           ; wait 10 us ;# 
  2566  000C26  0100               	banksel	_temp	;# 
  2567  000C28  0E0A               	movlw	10	;# 
  2568  000C2A  6F27               	movwf	_temp,b	;# 
  2569  000C2C                     wait10:
  2570  000C2C  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2571  000C2E  EF16  F006         	goto	wait10	;# 
  2572  000C32  F000               	nop		;# 
  2573  000C34  010F               	banksel	3971	;# 
  2574  000C36  9E83               	bcf	3971,7,c	;# 
  2575                           
  2576                           ; wait 21 us ;# 
  2577  000C38  0100               	banksel	_temp	;# 
  2578  000C3A  0E15               	movlw	21	;# 
  2579  000C3C  6F27               	movwf	_temp,b	;# 
  2580  000C3E                     wait20:
  2581  000C3E  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2582  000C40  EF1F  F006         	goto	wait20	;# 
  2583  000C44  F000               	nop		;# 
  2584  000C46  F000               	nop		;# 
  2585  000C48  010F               	banksel	3971	;# 
  2586  000C4A  EF38  F006         	goto	write_end	;# 
  2587  000C4E                     bit0:
  2588                           
  2589                           ;# 
  2590  000C4E  0100               	banksel	_temp	;# 
  2591  000C50  0E03               	movlw	3	;# 
  2592  000C52  6F27               	movwf	_temp,b	;# 
  2593  000C54                     wait5:
  2594  000C54  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2595  000C56  EF2A  F006         	goto	wait5	;# 
  2596  000C5A  F000               	nop		;# 
  2597  000C5C  F000               	nop		;# 
  2598  000C5E  010F               	banksel	3971	;# 
  2599  000C60  9E83               	bcf	3971,7,c	;# 
  2600  000C62  0100               	banksel	_temp	;# 
  2601  000C64  0E1E               	movlw	30	;# 
  2602  000C66  6F27               	movwf	_temp,b	;# 
  2603  000C68                     wait25:
  2604  000C68  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2605  000C6A  EF34  F006         	goto	wait25	;# 
  2606  000C6E  010F               	banksel	3971	;# 
  2607  000C70                     write_end:
  2608                           
  2609                           ;# 
  2610  000C70  0100               	banksel	_shift	;# 
  2611  000C72  4723               	rlncf	_shift& (0+255),f,b	;# 
  2612                           
  2613                           ; shift all bits ;# 
  2614  000C74  0100               	banksel	_shiftCounter	;# 
  2615  000C76  2F24               	decfsz	_shiftCounter& (0+255),f,b	;# 
  2616  000C78  EF0E  F006         	goto	start_write	;# 
  2617                           
  2618                           ; wait 100 us ;# 
  2619  000C7C  0100               	banksel	_temp	;# 
  2620  000C7E  0E64               	movlw	100	;# 
  2621  000C80  6F27               	movwf	_temp,b	;# 
  2622  000C82                     wait100:
  2623  000C82  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2624  000C84  EF41  F006         	goto	wait100	;# 
  2625  000C88  010F               	banksel	3971	;# 
  2626  000C8A  0012               	return		;funcret
  2627  000C8C                     __end_of_writeByte:
  2628                           	opt stack 0
  2629                           tblptru	equ	0xFF8
  2630                           tblptrh	equ	0xFF7
  2631                           tblptrl	equ	0xFF6
  2632                           tablat	equ	0xFF5
  2633                           postinc0	equ	0xFEE
  2634                           wreg	equ	0xFE8
  2635                           postdec1	equ	0xFE5
  2636                           fsr1h	equ	0xFE2
  2637                           fsr1l	equ	0xFE1
  2638                           indf2	equ	0xFDF
  2639                           fsr2h	equ	0xFDA
  2640                           fsr2l	equ	0xFD9
  2641                           status	equ	0xFD8
  2642                           
  2643 ;; *************** function _readPort *****************
  2644 ;; Defined at:
  2645 ;;		line 102 in file "receiver.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;		None
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;		None
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, status,2, status,0, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2659 ;;      Params:         0       0       0       0       0       0       0       0       0
  2660 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2662 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2663 ;;Total ram usage:        0 bytes
  2664 ;; Hardware stack levels used:    1
  2665 ;; Hardware stack levels required when called:    2
  2666 ;; This function calls:
  2667 ;;		_readPortA
  2668 ;;		_readPortB
  2669 ;;		_readPortC
  2670 ;;		_readPortD
  2671 ;;		_readPortE
  2672 ;; This function is called by:
  2673 ;;		_onData
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text17
  2678  000D86                     __ptext17:
  2679                           	opt stack 0
  2680  000D86                     _readPort:
  2681                           	opt stack 27
  2682                           
  2683                           ;receiver.c: 104: if (port == PORT_A) {
  2684                           
  2685                           ;incstack = 0
  2686  000D86  5025               	movf	_port,w,c
  2687  000D88  A4D8               	btfss	status,2,c
  2688  000D8A  D004               	goto	l1185
  2689                           
  2690                           ;receiver.c: 105: value = readPortA();
  2691  000D8C  ECED  F007         	call	_readPortA	;wreg free
  2692  000D90  6E2A               	movwf	_value,c
  2693                           
  2694                           ;receiver.c: 106: } else if (port == PORT_B) {
  2695  000D92  0012               	return	
  2696  000D94                     l1185:
  2697  000D94  0425               	decf	_port,w,c
  2698  000D96  A4D8               	btfss	status,2,c
  2699  000D98  D004               	goto	l1189
  2700                           
  2701                           ;receiver.c: 107: value = readPortB();
  2702  000D9A  ECEB  F007         	call	_readPortB	;wreg free
  2703  000D9E  6E2A               	movwf	_value,c
  2704                           
  2705                           ;receiver.c: 108: } else if (port == PORT_C) {
  2706  000DA0  0012               	return	
  2707  000DA2                     l1189:
  2708  000DA2  0E02               	movlw	2
  2709  000DA4  1825               	xorwf	_port,w,c
  2710  000DA6  A4D8               	btfss	status,2,c
  2711  000DA8  D004               	goto	l1193
  2712                           
  2713                           ;receiver.c: 109: value = readPortC();
  2714  000DAA  ECE9  F007         	call	_readPortC	;wreg free
  2715  000DAE  6E2A               	movwf	_value,c
  2716                           
  2717                           ;receiver.c: 110: } else if (port == PORT_D) {
  2718  000DB0  0012               	return	
  2719  000DB2                     l1193:
  2720  000DB2  0E03               	movlw	3
  2721  000DB4  1825               	xorwf	_port,w,c
  2722  000DB6  A4D8               	btfss	status,2,c
  2723  000DB8  D004               	goto	l1197
  2724                           
  2725                           ;receiver.c: 111: value = readPortD();
  2726  000DBA  ECE7  F007         	call	_readPortD	;wreg free
  2727  000DBE  6E2A               	movwf	_value,c
  2728                           
  2729                           ;receiver.c: 112: } else if (port == PORT_E) {
  2730  000DC0  0012               	return	
  2731  000DC2                     l1197:
  2732  000DC2  0E04               	movlw	4
  2733  000DC4  1825               	xorwf	_port,w,c
  2734  000DC6  A4D8               	btfss	status,2,c
  2735  000DC8  0012               	return	
  2736                           
  2737                           ;receiver.c: 113: value = readPortE();
  2738  000DCA  ECE5  F007         	call	_readPortE	;wreg free
  2739  000DCE  6E2A               	movwf	_value,c
  2740  000DD0  0012               	return	
  2741  000DD2                     __end_of_readPort:
  2742                           	opt stack 0
  2743                           tblptru	equ	0xFF8
  2744                           tblptrh	equ	0xFF7
  2745                           tblptrl	equ	0xFF6
  2746                           tablat	equ	0xFF5
  2747                           postinc0	equ	0xFEE
  2748                           wreg	equ	0xFE8
  2749                           postdec1	equ	0xFE5
  2750                           fsr1h	equ	0xFE2
  2751                           fsr1l	equ	0xFE1
  2752                           indf2	equ	0xFDF
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function _readPortE *****************
  2758 ;; Defined at:
  2759 ;;		line 197 in file "main.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;		None
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;		None
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      unsigned char 
  2766 ;; Registers used:
  2767 ;;		wreg, status,2
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2773 ;;      Params:         0       0       0       0       0       0       0       0       0
  2774 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2776 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2777 ;;Total ram usage:        0 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    1
  2780 ;; This function calls:
  2781 ;;		Nothing
  2782 ;; This function is called by:
  2783 ;;		_readPort
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text18
  2788  000FCA                     __ptext18:
  2789                           	opt stack 0
  2790  000FCA                     _readPortE:
  2791                           	opt stack 27
  2792                           
  2793                           ;main.c: 199: return PORTE;
  2794                           
  2795                           ;incstack = 0
  2796  000FCA  5084               	movf	3972,w,c	;volatile
  2797  000FCC  0012               	return	
  2798  000FCE                     __end_of_readPortE:
  2799                           	opt stack 0
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postdec1	equ	0xFE5
  2807                           fsr1h	equ	0xFE2
  2808                           fsr1l	equ	0xFE1
  2809                           indf2	equ	0xFDF
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _readPortD *****************
  2815 ;; Defined at:
  2816 ;;		line 192 in file "main.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;		None
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      unsigned char 
  2823 ;; Registers used:
  2824 ;;		wreg, status,2
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2830 ;;      Params:         0       0       0       0       0       0       0       0       0
  2831 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2832 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2833 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2834 ;;Total ram usage:        0 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    1
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_readPort
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text19
  2845  000FCE                     __ptext19:
  2846                           	opt stack 0
  2847  000FCE                     _readPortD:
  2848                           	opt stack 27
  2849                           
  2850                           ;main.c: 194: return PORTD;
  2851                           
  2852                           ;incstack = 0
  2853  000FCE  5083               	movf	3971,w,c	;volatile
  2854  000FD0  0012               	return	
  2855  000FD2                     __end_of_readPortD:
  2856                           	opt stack 0
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           postinc0	equ	0xFEE
  2862                           wreg	equ	0xFE8
  2863                           postdec1	equ	0xFE5
  2864                           fsr1h	equ	0xFE2
  2865                           fsr1l	equ	0xFE1
  2866                           indf2	equ	0xFDF
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function _readPortC *****************
  2872 ;; Defined at:
  2873 ;;		line 187 in file "main.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;		None
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;		None
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      unsigned char 
  2880 ;; Registers used:
  2881 ;;		wreg, status,2
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2887 ;;      Params:         0       0       0       0       0       0       0       0       0
  2888 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2889 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2890 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2891 ;;Total ram usage:        0 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    1
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_readPort
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text20
  2902  000FD2                     __ptext20:
  2903                           	opt stack 0
  2904  000FD2                     _readPortC:
  2905                           	opt stack 27
  2906                           
  2907                           ;main.c: 189: return PORTC;
  2908                           
  2909                           ;incstack = 0
  2910  000FD2  5082               	movf	3970,w,c	;volatile
  2911  000FD4  0012               	return	
  2912  000FD6                     __end_of_readPortC:
  2913                           	opt stack 0
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           postinc0	equ	0xFEE
  2919                           wreg	equ	0xFE8
  2920                           postdec1	equ	0xFE5
  2921                           fsr1h	equ	0xFE2
  2922                           fsr1l	equ	0xFE1
  2923                           indf2	equ	0xFDF
  2924                           fsr2h	equ	0xFDA
  2925                           fsr2l	equ	0xFD9
  2926                           status	equ	0xFD8
  2927                           
  2928 ;; *************** function _readPortB *****************
  2929 ;; Defined at:
  2930 ;;		line 182 in file "main.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;		None
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;		None
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      unsigned char 
  2937 ;; Registers used:
  2938 ;;		wreg, status,2
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2944 ;;      Params:         0       0       0       0       0       0       0       0       0
  2945 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2946 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2947 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2948 ;;Total ram usage:        0 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    1
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_readPort
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text21
  2959  000FD6                     __ptext21:
  2960                           	opt stack 0
  2961  000FD6                     _readPortB:
  2962                           	opt stack 27
  2963                           
  2964                           ;main.c: 184: return PORTB;
  2965                           
  2966                           ;incstack = 0
  2967  000FD6  5081               	movf	3969,w,c	;volatile
  2968  000FD8  0012               	return	
  2969  000FDA                     __end_of_readPortB:
  2970                           	opt stack 0
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           postinc0	equ	0xFEE
  2976                           wreg	equ	0xFE8
  2977                           postdec1	equ	0xFE5
  2978                           fsr1h	equ	0xFE2
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           fsr2h	equ	0xFDA
  2982                           fsr2l	equ	0xFD9
  2983                           status	equ	0xFD8
  2984                           
  2985 ;; *************** function _readAddress *****************
  2986 ;; Defined at:
  2987 ;;		line 180 in file "receiver.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  adr             2   15[COMRAM] unsigned int 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  d               1   17[COMRAM] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      unsigned char 
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3001 ;;      Params:         2       0       0       0       0       0       0       0       0
  3002 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3004 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3005 ;;Total ram usage:        3 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    2
  3008 ;; This function calls:
  3009 ;;		_readPortA
  3010 ;;		_writePortB
  3011 ;;		_writePortC
  3012 ;;		_writePortD
  3013 ;; This function is called by:
  3014 ;;		_onData
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text22
  3019  000EFA                     __ptext22:
  3020                           	opt stack 0
  3021  000EFA                     _readAddress:
  3022                           	opt stack 27
  3023                           
  3024                           ;receiver.c: 182: uint8_t d;
  3025                           ;receiver.c: 184: writePortC(0xff);
  3026                           
  3027                           ;incstack = 0
  3028  000EFA  0EFF               	movlw	255
  3029  000EFC  ECDD  F007         	call	_writePortC
  3030                           
  3031                           ;receiver.c: 185: writePortB(adr & 0xff);
  3032  000F00  5010               	movf	readAddress@adr,w,c
  3033  000F02  ECE1  F007         	call	_writePortB
  3034                           
  3035                           ;receiver.c: 186: writePortD((adr >> 8) & 0xff);
  3036  000F06  5011               	movf	readAddress@adr+1,w,c
  3037  000F08  ECD9  F007         	call	_writePortD
  3038                           
  3039                           ;receiver.c: 189: writePortC(0x40);
  3040  000F0C  0E40               	movlw	64
  3041  000F0E  ECDD  F007         	call	_writePortC
  3042                           
  3043                           ;receiver.c: 191: d = readPortA();
  3044  000F12  ECED  F007         	call	_readPortA	;wreg free
  3045  000F16  6E12               	movwf	readAddress@d,c
  3046                           
  3047                           ;receiver.c: 193: writePortC(0xff);
  3048  000F18  0EFF               	movlw	255
  3049  000F1A  ECDD  F007         	call	_writePortC
  3050                           
  3051                           ;receiver.c: 195: return d;
  3052  000F1E  5012               	movf	readAddress@d,w,c
  3053  000F20  0012               	return	
  3054  000F22                     __end_of_readAddress:
  3055                           	opt stack 0
  3056                           tblptru	equ	0xFF8
  3057                           tblptrh	equ	0xFF7
  3058                           tblptrl	equ	0xFF6
  3059                           tablat	equ	0xFF5
  3060                           postinc0	equ	0xFEE
  3061                           wreg	equ	0xFE8
  3062                           postdec1	equ	0xFE5
  3063                           fsr1h	equ	0xFE2
  3064                           fsr1l	equ	0xFE1
  3065                           indf2	equ	0xFDF
  3066                           fsr2h	equ	0xFDA
  3067                           fsr2l	equ	0xFD9
  3068                           status	equ	0xFD8
  3069                           
  3070 ;; *************** function _writePortD *****************
  3071 ;; Defined at:
  3072 ;;		line 140 in file "main.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  data            1    wreg     unsigned char 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  data            1   14[COMRAM] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3086 ;;      Params:         0       0       0       0       0       0       0       0       0
  3087 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3089 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3090 ;;Total ram usage:        1 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    1
  3093 ;; This function calls:
  3094 ;;		Nothing
  3095 ;; This function is called by:
  3096 ;;		_writeAddress
  3097 ;;		_readAddress
  3098 ;;		_onData
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text23
  3103  000FB2                     __ptext23:
  3104                           	opt stack 0
  3105  000FB2                     _writePortD:
  3106                           	opt stack 28
  3107                           
  3108                           ;incstack = 0
  3109                           ;writePortD@data stored from wreg
  3110  000FB2  6E0F               	movwf	writePortD@data,c
  3111                           
  3112                           ;main.c: 142: PORTD = data;
  3113  000FB4  C00F  FF83         	movff	writePortD@data,3971	;volatile
  3114  000FB8  0012               	return		;funcret
  3115  000FBA                     __end_of_writePortD:
  3116                           	opt stack 0
  3117                           tblptru	equ	0xFF8
  3118                           tblptrh	equ	0xFF7
  3119                           tblptrl	equ	0xFF6
  3120                           tablat	equ	0xFF5
  3121                           postinc0	equ	0xFEE
  3122                           wreg	equ	0xFE8
  3123                           postdec1	equ	0xFE5
  3124                           fsr1h	equ	0xFE2
  3125                           fsr1l	equ	0xFE1
  3126                           indf2	equ	0xFDF
  3127                           fsr2h	equ	0xFDA
  3128                           fsr2l	equ	0xFD9
  3129                           status	equ	0xFD8
  3130                           
  3131 ;; *************** function _writePortC *****************
  3132 ;; Defined at:
  3133 ;;		line 135 in file "main.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  data            1    wreg     unsigned char 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  data            1   14[COMRAM] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3147 ;;      Params:         0       0       0       0       0       0       0       0       0
  3148 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3150 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3151 ;;Total ram usage:        1 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    1
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_writeAddress
  3158 ;;		_readAddress
  3159 ;;		_onData
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text24
  3164  000FBA                     __ptext24:
  3165                           	opt stack 0
  3166  000FBA                     _writePortC:
  3167                           	opt stack 28
  3168                           
  3169                           ;incstack = 0
  3170                           ;writePortC@data stored from wreg
  3171  000FBA  6E0F               	movwf	writePortC@data,c
  3172                           
  3173                           ;main.c: 137: PORTC = data;
  3174  000FBC  C00F  FF82         	movff	writePortC@data,3970	;volatile
  3175  000FC0  0012               	return		;funcret
  3176  000FC2                     __end_of_writePortC:
  3177                           	opt stack 0
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           postinc0	equ	0xFEE
  3183                           wreg	equ	0xFE8
  3184                           postdec1	equ	0xFE5
  3185                           fsr1h	equ	0xFE2
  3186                           fsr1l	equ	0xFE1
  3187                           indf2	equ	0xFDF
  3188                           fsr2h	equ	0xFDA
  3189                           fsr2l	equ	0xFD9
  3190                           status	equ	0xFD8
  3191                           
  3192 ;; *************** function _writePortB *****************
  3193 ;; Defined at:
  3194 ;;		line 130 in file "main.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;  data            1    wreg     unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  data            1   14[COMRAM] unsigned char 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3208 ;;      Params:         0       0       0       0       0       0       0       0       0
  3209 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3211 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3212 ;;Total ram usage:        1 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    1
  3215 ;; This function calls:
  3216 ;;		Nothing
  3217 ;; This function is called by:
  3218 ;;		_writeAddress
  3219 ;;		_readAddress
  3220 ;;		_onData
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text25
  3225  000FC2                     __ptext25:
  3226                           	opt stack 0
  3227  000FC2                     _writePortB:
  3228                           	opt stack 28
  3229                           
  3230                           ;incstack = 0
  3231                           ;writePortB@data stored from wreg
  3232  000FC2  6E0F               	movwf	writePortB@data,c
  3233                           
  3234                           ;main.c: 132: PORTB = data;
  3235  000FC4  C00F  FF81         	movff	writePortB@data,3969	;volatile
  3236  000FC8  0012               	return		;funcret
  3237  000FCA                     __end_of_writePortB:
  3238                           	opt stack 0
  3239                           tblptru	equ	0xFF8
  3240                           tblptrh	equ	0xFF7
  3241                           tblptrl	equ	0xFF6
  3242                           tablat	equ	0xFF5
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           postdec1	equ	0xFE5
  3246                           fsr1h	equ	0xFE2
  3247                           fsr1l	equ	0xFE1
  3248                           indf2	equ	0xFDF
  3249                           fsr2h	equ	0xFDA
  3250                           fsr2l	equ	0xFD9
  3251                           status	equ	0xFD8
  3252                           
  3253 ;; *************** function _readPortA *****************
  3254 ;; Defined at:
  3255 ;;		line 177 in file "main.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;		None
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;		None
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  1    wreg      unsigned char 
  3262 ;; Registers used:
  3263 ;;		wreg, status,2
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3269 ;;      Params:         0       0       0       0       0       0       0       0       0
  3270 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3272 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3273 ;;Total ram usage:        0 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    1
  3276 ;; This function calls:
  3277 ;;		Nothing
  3278 ;; This function is called by:
  3279 ;;		_readPort
  3280 ;;		_readAddress
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text26
  3285  000FDA                     __ptext26:
  3286                           	opt stack 0
  3287  000FDA                     _readPortA:
  3288                           	opt stack 27
  3289                           
  3290                           ;main.c: 179: return PORTA;
  3291                           
  3292                           ;incstack = 0
  3293  000FDA  5080               	movf	3968,w,c	;volatile
  3294  000FDC  0012               	return	
  3295  000FDE                     __end_of_readPortA:
  3296                           	opt stack 0
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           postinc0	equ	0xFEE
  3302                           wreg	equ	0xFE8
  3303                           postdec1	equ	0xFE5
  3304                           fsr1h	equ	0xFE2
  3305                           fsr1l	equ	0xFE1
  3306                           indf2	equ	0xFDF
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _parseHex *****************
  3312 ;; Defined at:
  3313 ;;		line 79 in file "receiver.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  x               1    wreg     unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  x               1   14[COMRAM] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      char 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2, status,0
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0
  3328 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3330 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3331 ;;Total ram usage:        1 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    1
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_onData
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text27
  3342  000ED0                     __ptext27:
  3343                           	opt stack 0
  3344  000ED0                     _parseHex:
  3345                           	opt stack 28
  3346                           
  3347                           ;incstack = 0
  3348                           ;parseHex@x stored from wreg
  3349  000ED0  6E0F               	movwf	parseHex@x,c
  3350                           
  3351                           ;receiver.c: 81: if (x >= '0' && x <= '9') {
  3352  000ED2  0E2F               	movlw	47
  3353  000ED4  640F               	cpfsgt	parseHex@x,c
  3354  000ED6  D006               	goto	l1163
  3355  000ED8  0E3A               	movlw	58
  3356  000EDA  600F               	cpfslt	parseHex@x,c
  3357  000EDC  D003               	goto	l1163
  3358                           
  3359                           ;receiver.c: 82: return x - '0';
  3360  000EDE  500F               	movf	parseHex@x,w,c
  3361  000EE0  0FD0               	addlw	208
  3362  000EE2  0012               	return	
  3363  000EE4                     l1163:
  3364  000EE4  0E60               	movlw	96
  3365  000EE6  640F               	cpfsgt	parseHex@x,c
  3366  000EE8  D006               	goto	l1171
  3367  000EEA  0E67               	movlw	103
  3368  000EEC  600F               	cpfslt	parseHex@x,c
  3369  000EEE  D003               	goto	l1171
  3370                           
  3371                           ;receiver.c: 84: return x - 'a' + 10;
  3372  000EF0  500F               	movf	parseHex@x,w,c
  3373  000EF2  0FA9               	addlw	169
  3374  000EF4  0012               	return	
  3375  000EF6                     l1171:
  3376                           
  3377                           ;receiver.c: 85: }
  3378                           ;receiver.c: 86: return -1;
  3379  000EF6  0EFF               	movlw	255
  3380  000EF8  0012               	return	
  3381  000EFA                     __end_of_parseHex:
  3382                           	opt stack 0
  3383                           tblptru	equ	0xFF8
  3384                           tblptrh	equ	0xFF7
  3385                           tblptrl	equ	0xFF6
  3386                           tablat	equ	0xFF5
  3387                           postinc0	equ	0xFEE
  3388                           wreg	equ	0xFE8
  3389                           postdec1	equ	0xFE5
  3390                           fsr1h	equ	0xFE2
  3391                           fsr1l	equ	0xFE1
  3392                           indf2	equ	0xFDF
  3393                           fsr2h	equ	0xFDA
  3394                           fsr2l	equ	0xFD9
  3395                           status	equ	0xFD8
  3396                           
  3397 ;; *************** function _error *****************
  3398 ;; Defined at:
  3399 ;;		line 89 in file "receiver.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;		None
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;		None
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3413 ;;      Params:         0       0       0       0       0       0       0       0       0
  3414 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3416 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3417 ;;Total ram usage:        0 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    2
  3420 ;; This function calls:
  3421 ;;		_writeChar
  3422 ;; This function is called by:
  3423 ;;		_onData
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text28
  3428  000F68                     __ptext28:
  3429                           	opt stack 0
  3430  000F68                     _error:
  3431                           	opt stack 27
  3432                           
  3433                           ;receiver.c: 91: state = STATE_IDLE;
  3434                           
  3435                           ;incstack = 0
  3436  000F68  0E00               	movlw	0
  3437  000F6A  6E2B               	movwf	_state,c
  3438                           
  3439                           ;receiver.c: 92: writeChar('?');
  3440  000F6C  0E3F               	movlw	63
  3441  000F6E  ECBA  F007         	call	_writeChar
  3442  000F72  0012               	return		;funcret
  3443  000F74                     __end_of_error:
  3444                           	opt stack 0
  3445                           tblptru	equ	0xFF8
  3446                           tblptrh	equ	0xFF7
  3447                           tblptrl	equ	0xFF6
  3448                           tablat	equ	0xFF5
  3449                           postinc0	equ	0xFEE
  3450                           wreg	equ	0xFE8
  3451                           postdec1	equ	0xFE5
  3452                           fsr1h	equ	0xFE2
  3453                           fsr1l	equ	0xFE1
  3454                           indf2	equ	0xFDF
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function _writeChar *****************
  3460 ;; Defined at:
  3461 ;;		line 212 in file "main.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;  data            1    wreg     unsigned char 
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;  data            1   14[COMRAM] unsigned char 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3475 ;;      Params:         0       0       0       0       0       0       0       0       0
  3476 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3478 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3479 ;;Total ram usage:        1 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    1
  3482 ;; This function calls:
  3483 ;;		Nothing
  3484 ;; This function is called by:
  3485 ;;		_error
  3486 ;;		_writeHex
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text29
  3491  000F74                     __ptext29:
  3492                           	opt stack 0
  3493  000F74                     _writeChar:
  3494                           	opt stack 27
  3495                           
  3496                           ;incstack = 0
  3497                           ;writeChar@data stored from wreg
  3498  000F74  6E0F               	movwf	writeChar@data,c
  3499  000F76                     l122:
  3500  000F76  A2AC               	btfss	4012,1,c	;volatile
  3501  000F78  D7FE               	goto	l122
  3502                           
  3503                           ;main.c: 215: TXREG1 = data;
  3504  000F7A  C00F  FFAD         	movff	writeChar@data,4013	;volatile
  3505  000F7E  0012               	return		;funcret
  3506  000F80                     __end_of_writeChar:
  3507                           	opt stack 0
  3508                           tblptru	equ	0xFF8
  3509                           tblptrh	equ	0xFF7
  3510                           tblptrl	equ	0xFF6
  3511                           tablat	equ	0xFF5
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           postdec1	equ	0xFE5
  3515                           fsr1h	equ	0xFE2
  3516                           fsr1l	equ	0xFE1
  3517                           indf2	equ	0xFDF
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function _initUart *****************
  3523 ;; Defined at:
  3524 ;;		line 102 in file "main.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3538 ;;      Params:         0       0       0       0       0       0       0       0       0
  3539 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3541 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3542 ;;Total ram usage:        0 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    1
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_main
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text30
  3553  000F22                     __ptext30:
  3554                           	opt stack 0
  3555  000F22                     _initUart:
  3556                           	opt stack 29
  3557                           
  3558                           ;main.c: 104: TXSTA1bits.SYNC = 0;
  3559                           
  3560                           ;incstack = 0
  3561  000F22  98AC               	bcf	4012,4,c	;volatile
  3562                           
  3563                           ;main.c: 105: TXSTA1bits.TX9 = 0;
  3564  000F24  9CAC               	bcf	4012,6,c	;volatile
  3565                           
  3566                           ;main.c: 106: TXSTA1bits.TXEN = 1;
  3567  000F26  8AAC               	bsf	4012,5,c	;volatile
  3568                           
  3569                           ;main.c: 108: RCSTA1bits.RX9 = 0;
  3570  000F28  9CAB               	bcf	4011,6,c	;volatile
  3571                           
  3572                           ;main.c: 109: RCSTA1bits.CREN = 1;
  3573  000F2A  88AB               	bsf	4011,4,c	;volatile
  3574                           
  3575                           ;main.c: 110: RCSTA1bits.SPEN = 1;
  3576  000F2C  8EAB               	bsf	4011,7,c	;volatile
  3577                           
  3578                           ;main.c: 112: BAUDCON1bits.BRG16 = 1;
  3579  000F2E  86B8               	bsf	4024,3,c	;volatile
  3580                           
  3581                           ;main.c: 113: TXSTA1bits.BRGH = 1;
  3582  000F30  84AC               	bsf	4012,2,c	;volatile
  3583                           
  3584                           ;main.c: 114: SPBRG1 = 15;
  3585  000F32  0E0F               	movlw	15
  3586  000F34  6EAF               	movwf	4015,c	;volatile
  3587                           
  3588                           ;main.c: 117: RCONbits.IPEN = 1;
  3589  000F36  8ED0               	bsf	4048,7,c	;volatile
  3590                           
  3591                           ;main.c: 118: INTCONbits.GIE = 1;
  3592  000F38  8EF2               	bsf	intcon,7,c	;volatile
  3593                           
  3594                           ;main.c: 119: INTCONbits.PEIE = 1;
  3595  000F3A  8CF2               	bsf	intcon,6,c	;volatile
  3596                           
  3597                           ;main.c: 122: PIE1bits.RCIE = 1;
  3598  000F3C  8A9D               	bsf	3997,5,c	;volatile
  3599  000F3E  0012               	return		;funcret
  3600  000F40                     __end_of_initUart:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           intcon	equ	0xFF2
  3607                           postinc0	equ	0xFEE
  3608                           wreg	equ	0xFE8
  3609                           postdec1	equ	0xFE5
  3610                           fsr1h	equ	0xFE2
  3611                           fsr1l	equ	0xFE1
  3612                           indf2	equ	0xFDF
  3613                           fsr2h	equ	0xFDA
  3614                           fsr2l	equ	0xFD9
  3615                           status	equ	0xFD8
  3616                           
  3617 ;; *************** function _receiveData *****************
  3618 ;; Defined at:
  3619 ;;		line 89 in file "main.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      void 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3633 ;;      Params:         0       0       0       0       0       0       0       0       0
  3634 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3635 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3636 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3637 ;;Total ram usage:       14 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; This function calls:
  3640 ;;		Nothing
  3641 ;; This function is called by:
  3642 ;;		Interrupt level 2
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           	psect	intcode
  3647  000008                     __pintcode:
  3648                           	opt stack 0
  3649  000008                     _receiveData:
  3650                           	opt stack 26
  3651                           
  3652                           ;incstack = 0
  3653  000008  822E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3654  00000A  CFFA F001          	movff	pclath,??_receiveData
  3655  00000E  CFFB F002          	movff	pclatu,??_receiveData+1
  3656  000012  CFE9 F003          	movff	fsr0l,??_receiveData+2
  3657  000016  CFEA F004          	movff	fsr0h,??_receiveData+3
  3658  00001A  CFE1 F005          	movff	fsr1l,??_receiveData+4
  3659  00001E  CFE2 F006          	movff	fsr1h,??_receiveData+5
  3660  000022  CFD9 F007          	movff	fsr2l,??_receiveData+6
  3661  000026  CFDA F008          	movff	fsr2h,??_receiveData+7
  3662  00002A  CFF3 F009          	movff	prodl,??_receiveData+8
  3663  00002E  CFF4 F00A          	movff	prodh,??_receiveData+9
  3664  000032  CFF6 F00B          	movff	tblptrl,??_receiveData+10
  3665  000036  CFF7 F00C          	movff	tblptrh,??_receiveData+11
  3666  00003A  CFF8 F00D          	movff	tblptru,??_receiveData+12
  3667  00003E  CFF5 F00E          	movff	tablat,??_receiveData+13
  3668                           
  3669                           ;main.c: 90: if (RCSTA1bits.OERR == 1) {
  3670  000042  A2AB               	btfss	4011,1,c	;volatile
  3671  000044  D003               	goto	i2l61
  3672                           
  3673                           ;main.c: 91: RCSTA1bits.OERR = 0;
  3674  000046  92AB               	bcf	4011,1,c	;volatile
  3675                           
  3676                           ;main.c: 92: RCSTA1bits.CREN = 0;
  3677  000048  98AB               	bcf	4011,4,c	;volatile
  3678                           
  3679                           ;main.c: 93: RCSTA1bits.CREN = 1;
  3680  00004A  88AB               	bsf	4011,4,c	;volatile
  3681  00004C                     i2l61:
  3682                           
  3683                           ;main.c: 94: }
  3684                           ;main.c: 95: if (PIR1bits.RC1IF == 1) {
  3685  00004C  AA9E               	btfss	3998,5,c	;volatile
  3686  00004E  D013               	goto	i2l64
  3687                           
  3688                           ;main.c: 96: uartBuf[uartWriteIndex] = RCREG1;
  3689  000050  0E00               	movlw	low _uartBuf
  3690  000052  241F               	addwf	_uartWriteIndex,w,c	;volatile
  3691  000054  6ED9               	movwf	fsr2l,c
  3692  000056  0E02               	movlw	high _uartBuf
  3693  000058  2020               	addwfc	_uartWriteIndex+1,w,c	;volatile
  3694  00005A  6EDA               	movwf	fsr2h,c
  3695  00005C  CFAE FFDF          	movff	4014,indf2	;volatile
  3696                           
  3697                           ;main.c: 97: uartWriteIndex++;
  3698  000060  4A1F               	infsnz	_uartWriteIndex,f,c	;volatile
  3699  000062  2A20               	incf	_uartWriteIndex+1,f,c	;volatile
  3700                           
  3701                           ;main.c: 98: if (uartWriteIndex == 1024) uartWriteIndex = 0;
  3702  000064  0E04               	movlw	4
  3703  000066  1820               	xorwf	_uartWriteIndex+1,w,c	;volatile
  3704  000068  101F               	iorwf	_uartWriteIndex,w,c	;volatile
  3705  00006A  A4D8               	btfss	status,2,c
  3706  00006C  D004               	goto	i2l64
  3707  00006E  0E00               	movlw	0
  3708  000070  6E20               	movwf	_uartWriteIndex+1,c	;volatile
  3709  000072  0E00               	movlw	0
  3710  000074  6E1F               	movwf	_uartWriteIndex,c	;volatile
  3711  000076                     i2l64:
  3712  000076  C00E  FFF5         	movff	??_receiveData+13,tablat
  3713  00007A  C00D  FFF8         	movff	??_receiveData+12,tblptru
  3714  00007E  C00C  FFF7         	movff	??_receiveData+11,tblptrh
  3715  000082  C00B  FFF6         	movff	??_receiveData+10,tblptrl
  3716  000086  C00A  FFF4         	movff	??_receiveData+9,prodh
  3717  00008A  C009  FFF3         	movff	??_receiveData+8,prodl
  3718  00008E  C008  FFDA         	movff	??_receiveData+7,fsr2h
  3719  000092  C007  FFD9         	movff	??_receiveData+6,fsr2l
  3720  000096  C006  FFE2         	movff	??_receiveData+5,fsr1h
  3721  00009A  C005  FFE1         	movff	??_receiveData+4,fsr1l
  3722  00009E  C004  FFEA         	movff	??_receiveData+3,fsr0h
  3723  0000A2  C003  FFE9         	movff	??_receiveData+2,fsr0l
  3724  0000A6  C002  FFFB         	movff	??_receiveData+1,pclatu
  3725  0000AA  C001  FFFA         	movff	??_receiveData,pclath
  3726  0000AE  922E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3727  0000B0  0011               	retfie		f
  3728  0000B2                     __end_of_receiveData:
  3729                           	opt stack 0
  3730                           pclatu	equ	0xFFB
  3731                           pclath	equ	0xFFA
  3732                           tblptru	equ	0xFF8
  3733                           tblptrh	equ	0xFF7
  3734                           tblptrl	equ	0xFF6
  3735                           tablat	equ	0xFF5
  3736                           prodh	equ	0xFF4
  3737                           prodl	equ	0xFF3
  3738                           intcon	equ	0xFF2
  3739                           postinc0	equ	0xFEE
  3740                           fsr0h	equ	0xFEA
  3741                           fsr0l	equ	0xFE9
  3742                           wreg	equ	0xFE8
  3743                           postdec1	equ	0xFE5
  3744                           fsr1h	equ	0xFE2
  3745                           fsr1l	equ	0xFE1
  3746                           indf2	equ	0xFDF
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           pclatu	equ	0xFFB
  3751                           pclath	equ	0xFFA
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           intcon	equ	0xFF2
  3759                           postinc0	equ	0xFEE
  3760                           fsr0h	equ	0xFEA
  3761                           fsr0l	equ	0xFE9
  3762                           wreg	equ	0xFE8
  3763                           postdec1	equ	0xFE5
  3764                           fsr1h	equ	0xFE2
  3765                           fsr1l	equ	0xFE1
  3766                           indf2	equ	0xFDF
  3767                           fsr2h	equ	0xFDA
  3768                           fsr2l	equ	0xFD9
  3769                           status	equ	0xFD8
  3770                           
  3771                           	psect	rparam
  3772  0000                     pclatu	equ	0xFFB
  3773                           pclath	equ	0xFFA
  3774                           tblptru	equ	0xFF8
  3775                           tblptrh	equ	0xFF7
  3776                           tblptrl	equ	0xFF6
  3777                           tablat	equ	0xFF5
  3778                           prodh	equ	0xFF4
  3779                           prodl	equ	0xFF3
  3780                           intcon	equ	0xFF2
  3781                           postinc0	equ	0xFEE
  3782                           fsr0h	equ	0xFEA
  3783                           fsr0l	equ	0xFE9
  3784                           wreg	equ	0xFE8
  3785                           postdec1	equ	0xFE5
  3786                           fsr1h	equ	0xFE2
  3787                           fsr1l	equ	0xFE1
  3788                           indf2	equ	0xFDF
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793                           	psect	temp
  3794  00002E                     btemp:
  3795                           	opt stack 0
  3796  00002E                     	ds	1
  3797  0000                     int$flags	set	btemp
  3798                           pclatu	equ	0xFFB
  3799                           pclath	equ	0xFFA
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           intcon	equ	0xFF2
  3807                           postinc0	equ	0xFEE
  3808                           fsr0h	equ	0xFEA
  3809                           fsr0l	equ	0xFE9
  3810                           wreg	equ	0xFE8
  3811                           postdec1	equ	0xFE5
  3812                           fsr1h	equ	0xFE2
  3813                           fsr1l	equ	0xFE1
  3814                           indf2	equ	0xFDF
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        2
    BSS         1297
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     26      45
    BANK0           160      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    hex	PTR unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_onData
    _onData->_writeAddressPhysical
    _writeHex->_writeChar
    _writeAddressPhysical->_logicAddressToPhysical
    _writeAddressPhysical->_writeAddress
    _writeAddress->_writePortA
    _writeAddress->_writePortB
    _writeAddress->_writePortC
    _writeAddress->_writePortD
    _writeAddress->_writePortE
    _writeAddress->_writeTrisA
    _sendBankCommand->_writeByte
    _readAddress->_writePortB
    _readAddress->_writePortC
    _readAddress->_writePortD
    _error->_writeChar

Critical Paths under _receiveData in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _receiveData in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _receiveData in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _receiveData in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _receiveData in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _receiveData in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _receiveData in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _receiveData in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _receiveData in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3183
                           _initUart
                             _onData
                           _readChar
 ---------------------------------------------------------------------------------
 (1) _readChar                                             1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _onData                                               5     5      0    3168
                                             21 COMRAM     5     5      0
                              _error
                           _parseHex
                        _readAddress
                           _readPort
                    _sendBankCommand
                       _writeAddress
               _writeAddressPhysical
                           _writeHex
                         _writePortA
                         _writePortB
                         _writePortC
                         _writePortD
                         _writePortE
                         _writeTrisA
                         _writeTrisB
                         _writeTrisC
                         _writeTrisD
                         _writeTrisE
 ---------------------------------------------------------------------------------
 (2) _writeTrisE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeHex                                             4     4      0      45
                                             15 COMRAM     4     4      0
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeAddressPhysical                                 3     0      3    1608
                                             18 COMRAM     3     0      3
             _logicAddressToPhysical
                _logicDataToPhysical
                       _writeAddress
 ---------------------------------------------------------------------------------
 (3) _writeAddress                                         3     0      3     460
                                             15 COMRAM     3     0      3
                         _writePortA
                         _writePortB
                         _writePortC
                         _writePortD
                         _writePortE
                         _writeTrisA
 ---------------------------------------------------------------------------------
 (2) _writeTrisA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _logicDataToPhysical                                  2     2      0     135
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _logicAddressToPhysical                               4     2      2     467
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _sendBankCommand                                      1     1      0      30
                                             15 COMRAM     1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (3) _writeByte                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPort                                             0     0      0       0
                          _readPortA
                          _readPortB
                          _readPortC
                          _readPortD
                          _readPortE
 ---------------------------------------------------------------------------------
 (3) _readPortE                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortD                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortB                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readAddress                                          3     1      2     264
                                             15 COMRAM     3     1      2
                          _readPortA
                         _writePortB
                         _writePortC
                         _writePortD
 ---------------------------------------------------------------------------------
 (2) _writePortD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _readPortA                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parseHex                                             1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _error                                                0     0      0      15
                          _writeChar
 ---------------------------------------------------------------------------------
 (3) _writeChar                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _receiveData                                         14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initUart
   _onData
     _error
       _writeChar
     _parseHex
     _readAddress
       _readPortA
       _writePortB
       _writePortC
       _writePortD
     _readPort
       _readPortA
       _readPortB
       _readPortC
       _readPortD
       _readPortE
     _sendBankCommand
       _writeByte
     _writeAddress
       _writePortA
       _writePortB
       _writePortC
       _writePortD
       _writePortE
       _writeTrisA
     _writeAddressPhysical
       _logicAddressToPhysical
       _logicDataToPhysical
       _writeAddress
         _writePortA
         _writePortB
         _writePortC
         _writePortD
         _writePortE
         _writeTrisA
     _writeHex
       _writeChar
     _writePortA
     _writePortB
     _writePortC
     _writePortD
     _writePortE
     _writeTrisA
     _writeTrisB
     _writeTrisC
     _writeTrisD
     _writeTrisE
   _readChar

 _receiveData (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     400      21       50.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0     100       8      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1A      2D       1       47.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12D       6        0.0%
DATA                 0      0     52D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Jan 25 19:50:05 2018

                 writePortA@data 000F                   writePortB@data 000F  
                 writePortC@data 000F                   writePortD@data 000F  
                 writePortE@data 000F                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                      __CFG_LVP$ON 000000  
                            l122 0F76                              l118 0E44  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _adr 001D                              bit0 0C4E  
                            _hex 002C                              bits 0C1E  
                 writeTrisA@data 000F                              wreg 000FE8  
                 writeTrisB@data 000F                       _TXSTA1bits 000FAC  
                 writeTrisC@data 000F                   writeTrisD@data 000F  
                 writeTrisE@data 000F                             l1241 0E1E  
                           l1171 0EF6                             l1163 0EE4  
                           PORTD 000F83                             l1239 0E10  
                           l1193 0DB2                             l1185 0D94  
                           l1197 0DC2                             l1189 0DA2  
                           l1701 0900                             l1711 0922  
                           l1705 090E                             l1811 0A60  
                           l1803 0A44                             l1651 0840  
                           l1643 082A                             l1805 0A4A  
                           l1733 095E                             l1725 0948  
                           l1709 091C                             l1823 0A8E  
                           l1815 0A6E                             l1719 0938  
                           l1671 089A                             l1663 086E  
                           l1655 084E                             l1639 0818  
                           l1841 0AFE                             l1833 0ACE  
                           l1761 09B8                             l1745 098C  
                           l1681 08C4                             l1905 0E6E  
                           l1819 0A7E                             l1827 0A9C  
                           l1771 09D4                             l1755 09A8  
                           l1675 08AC                             l1667 0880  
                           l1659 085C                             l1837 0AEE  
                           l1829 0AA2                             l1781 09F4  
                           l1749 0996                             l1693 08E4  
                           l1871 0B9C                             l1791 0A16  
                           l1767 09CA                             l1687 08D2  
                           l1679 08BE                             l1865 0B80  
                           l1697 08F2                             l1795 0A26  
                           l1787 0A08                             l1875 0BAA  
                           l1883 0BC4                             l1885 0BCA  
                           l1799 0A36                             l1889 0BD0  
                           STR_1 0801                             u1447 0B52  
                           i2l61 004C                             i2l64 0076  
        __end_of_sendBankCommand 0F5C                             _main 0E48  
                           _temp 0027                             _port 0025  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 002E  
                  __CFG_BORV$190 000000                             wait5 0C54  
                           prodh 000FF4                             prodl 000FF3  
                           start 00B2                    __CFG_IESO$OFF 000000  
                   ?_readAddress 0010                     ___param_bank 000000  
                   _BAUDCON1bits 000FB8              _logicDataToPhysical 0EA6  
                          ?_main 0001                            _PORTA 000F80  
                          _PORTB 000F81                            _PORTC 000F82  
                          _PORTD 000F83                            _PORTE 000F84  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                          _error 0F68                            _shift 0023  
                          _value 002A                            _state 002B  
          __size_of_writeAddress 003E                            pclath 000FFA  
           ?_logicDataToPhysical 0001                            tablat 000FF5  
                          wait10 0C2C                            wait20 0C3E  
                          wait21 0C14                            wait25 0C68  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                   ?_receiveData 0001                   __CFG_ICPRT$OFF 000000  
                 __CFG_MCLRE$OFF 000000                  __initialization 0C8C  
                   __end_of_main 0E78                   __CFG_PCLKEN$ON 000000  
                         ??_main 001B                    __activetblptr 000002  
   __end_of_writeAddressPhysical 0EA6                     _writeAddress 0DD2  
                 __CFG_SDOMX$RB3 000000              sendBankCommand@bank 0010  
                __CFG_CCP2MX$RC1 000000                           _ADCON0 000FC2  
                         ?_error 0001                           _ANSELA 000F5B  
                         _ANSELC 000F5D            ??_logicDataToPhysical 000F  
                 __CFG_WDTEN$OFF 000000                           _RCREG1 000FAE  
                         _SPBRG1 000FAF                 ?_sendBankCommand 0001  
                         _TXREG1 000FAD                   __CFG_XINST$OFF 000000  
                 __CFG_STVREN$ON 000000                 __end_of_readChar 0E48  
                         _onData 0814                 __end_of_initUart 0F40  
               __end_of_readPort 0DD2                           clear_0 0CAC  
                         clear_1 0CC0                           clear_2 0CD2  
               __end_of_parseHex 0EFA                     __pdataCOMRAM 002C  
                         wait100 0C82                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_writeHex 0D86  
           __CFG_LS48MHZ$SYS24X4 000000                       __accesstop 0060  
        __end_of__initialization 0CD8                  __CFG_PBADEN$OFF 000000  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000             __size_of_readAddress 0028  
                  __end_of_error 0F74        logicDataToPhysical@value0 0010  
      logicDataToPhysical@pvalue 000F                          ??_error 0010  
                     __pbssBANK1 0100               __size_of_readPortA 0004  
             __size_of_readPortB 0004               __size_of_readPortC 0004  
             __size_of_readPortD 0004               __size_of_readPortE 0004  
           _writeAddressPhysical 0E78             __size_of_receiveData 00AA  
              __CFG_PLLSEL$PLL4X 000000                     readAddress@d 0012  
                   readChar@data 000F                   readAddress@adr 0010  
                        ?_onData 0001         ??_logicAddressToPhysical 0011  
                      ?_readChar 0001                        ?_initUart 0001  
                      ?_readPort 0001               __size_of_writeChar 000C  
                      ?_parseHex 0001               __size_of_writeByte 0088  
          ?_writeAddressPhysical 0013                          __Hparam 0000  
                        __Lparam 0000                     __psmallconst 0800  
                __size_of_onData 03F0                          __pcinit 0C8C  
                        __ramtop 0800                        ?_writeHex 0001  
                        __ptext0 0E48                          __ptext1 0E10  
                        __ptext2 0814                          __ptext3 0F8A  
                        __ptext4 0F80                          __ptext5 0F5C  
                        __ptext6 0F92                          __ptext7 0D38  
                        __ptext8 0E78                          __ptext9 0DD2  
                        _command 0026                __end_of_readPortA 0FDE  
              __end_of_readPortB 0FDA                __end_of_readPortC 0FD6  
              __end_of_readPortD 0FD2                __end_of_readPortE 0FCE  
                        _uartBuf 0200                          onData@d 001A  
           end_of_initialization 0CD8                       ??_readChar 000F  
                     ??_initUart 000F                    __Lmediumconst 0000  
                     ??_readPort 000F                       ??_parseHex 000F  
                   writeHex@data 0013                          postdec1 000FE5  
                        postinc0 000FEE                       ??_writeHex 0010  
                      _PORTDbits 000F83                __end_of_writeChar 0F80  
              __end_of_writeByte 0C8C      __end_of_logicDataToPhysical 0ED0  
                      _TRISDbits 000F95  __size_of_logicAddressToPhysical 0052  
         ??_writeAddressPhysical 0016         __size_of_sendBankCommand 001C  
                     _writePortA 0FAA                       _writePortB 0FC2  
                     _writePortC 0FBA                       _writePortD 0FB2  
                     _writePortE 0FA2                       _writeTrisA 0F9A  
                     _writeTrisB 0F92                       _writeTrisC 0F5C  
                     _writeTrisD 0F80                       _writeTrisE 0F8A  
                  __pidataCOMRAM 0FDE                   __end_of_onData 0C04  
            start_initialization 0C8C                  __CFG_nLPBOR$OFF 000000  
                  ??_readAddress 0012           _logicAddressToPhysical 0CE6  
                       ??_onData 0016                      __pbssBIGRAM 0200  
                    __pbssCOMRAM 001B                   _uartWriteIndex 001F  
              writeAddress@value 0012                    ??_receiveData 0001  
              __size_of_readChar 0038                  writeAddress@adr 0010  
              __size_of_initUart 001E                __size_of_readPort 004C  
              __size_of_parseHex 002A                        __pintcode 0008  
     logicAddressToPhysical@adr0 000F                      ?_writePortA 0001  
                    ?_writePortB 0001                      ?_writePortC 0001  
                    ?_writePortD 0001                      ?_writePortE 0001  
                    ?_writeTrisA 0001                      ?_writeTrisB 0001  
                    ?_writeTrisC 0001                      ?_writeTrisD 0001  
                    ?_writeTrisE 0001       logicAddressToPhysical@padr 0011  
            __end_of_readAddress 0F22                ??_sendBankCommand 0010  
                    __smallconst 0800                    ?_writeAddress 0010  
              __size_of_writeHex 004E                        _readPortA 0FDA  
                      _readPortB 0FD6                        _readPortC 0FD2  
                      _readPortD 0FCE                        _readPortE 0FCA  
                 __size_of_error 000C                      _flashBuffer 0100  
                       _PIE1bits 000F9D                         _PIR1bits 000F9E  
                       _RCONbits 000FD0                 __CFG_WDTPS$32768 000000  
            __end_of_receiveData 00B2                    _uartReadIndex 0021  
                 ??_writeAddress 0013                __CFG_CFGPLLEN$OFF 000000  
                      _writeChar 0F74                        _writeByte 0C04  
                     ?_readPortA 0001                       ?_readPortB 0001  
                     ?_readPortC 0001                       ?_readPortD 0001  
                     ?_readPortE 0001              __size_of_writePortA 0008  
            __size_of_writePortB 0008              __size_of_writePortC 0008  
            __size_of_writePortD 0008              __size_of_writePortE 0008  
            __size_of_writeTrisA 0008              __size_of_writeTrisB 0008  
            __size_of_writeTrisC 000C              __size_of_writeTrisD 000A  
            __size_of_writeTrisE 0008        writeAddressPhysical@value 0015  
                       __Hrparam 0000          writeAddressPhysical@adr 0013  
                    _readAddress 0EFA                         __Lrparam 0000  
             __CFG_BOREN$SBORDIS 000000                       start_write 0C1C  
                      parseHex@x 000F                         _checksum 0029  
               _flashBufferIndex 001B                       ?_writeChar 0001  
                       __ptext10 0F9A                         __ptext11 0FA2  
                       __ptext20 0FD2                         __ptext12 0FAA  
                       __ptext21 0FD6                         __ptext13 0EA6  
                       __ptext30 0F22                         __ptext22 0EFA  
                       __ptext14 0CE6                         __ptext23 0FB2  
                       __ptext15 0F40                         __ptext24 0FBA  
                       __ptext16 0C04                         __ptext25 0FC2  
                       __ptext17 0D86                         __ptext26 0FDA  
                       __ptext18 0FCA                         __ptext27 0ED0  
                       __ptext19 0FCE                         __ptext28 0F68  
                       __ptext29 0F74                       ?_writeByte 0001  
                   _shiftCounter 0024     __size_of_logicDataToPhysical 002A  
                       _readChar 0E10                         _initUart 0F22  
                       _readPort 0D86                    __size_of_main 0030  
                    _receiveData 0008                         _parseHex 0ED0  
  __size_of_writeAddressPhysical 002E          ?_logicAddressToPhysical 000F  
                     writeByte@b 000F                         int$flags 002E  
                       _writeHex 0D38               _checksumCalculated 0028  
                     _INTCONbits 000FF2                      ??_readPortA 000F  
                    ??_readPortB 000F                      ??_readPortC 000F  
                    ??_readPortD 000F                      ??_readPortE 000F  
                       intlevel2 0000                    writeChar@data 000F  
 __end_of_logicAddressToPhysical 0D38                       _RCSTA1bits 000FAB  
           __end_of_writeAddress 0E10                       _OSCCONbits 000FD3  
                _sendBankCommand 0F40             __CFG_CPUDIV$NOCLKDIV 000000  
                   ??_writePortA 000F                     ??_writePortB 000F  
                   ??_writePortC 000F                     ??_writePortD 000F  
                   ??_writePortE 000F                     ??_writeTrisA 000F  
                   ??_writeTrisB 000F                     ??_writeTrisC 000F  
                   ??_writeTrisD 000F                     ??_writeTrisE 000F  
                    ??_writeChar 000F                         write_end 0C70  
                    ??_writeByte 000F               __CFG_FOSC$INTOSCIO 000000  
             __end_of_writePortA 0FB2               __end_of_writePortB 0FCA  
             __end_of_writePortC 0FC2               __end_of_writePortD 0FBA  
             __end_of_writePortE 0FAA               __end_of_writeTrisA 0FA2  
             __end_of_writeTrisB 0F9A               __end_of_writeTrisC 0F68  
             __end_of_writeTrisD 0F8A               __end_of_writeTrisE 0F92  
