

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Dec  9 17:55:18 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13  0000                     
    14                           ; Version 1.42
    15                           ; Generated 13/04/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC18F45K50 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     _ANSELA	set	3931
    49  0000                     _TRISD	set	3989
    50  0000                     _TRISC	set	3988
    51  0000                     _TRISB	set	3987
    52  0000                     _TRISA	set	3986
    53  0000                     _PORTC	set	3970
    54  0000                     _ADCON0	set	4034
    55  0000                     _OSCCONbits	set	4051
    56  0000                     _TXREG1	set	4013
    57  0000                     _RCREG1	set	4014
    58  0000                     _PIR1bits	set	3998
    59  0000                     _SPBRG1	set	4015
    60  0000                     _BAUDCON1bits	set	4024
    61  0000                     _RCSTA1bits	set	4011
    62  0000                     _TXSTA1bits	set	4012
    63                           
    64                           ; #config settings
    65  0000                     
    66                           	psect	cinit
    67  007F92                     __pcinit:
    68                           	opt stack 0
    69  007F92                     start_initialization:
    70                           	opt stack 0
    71  007F92                     __initialization:
    72                           	opt stack 0
    73  007F92                     end_of_initialization:
    74                           	opt stack 0
    75  007F92                     __end_of__initialization:
    76                           	opt stack 0
    77  007F92  0100               	movlb	0
    78  007F94  EFE9  F03F         	goto	_main	;jump to C main() function
    79                           
    80                           	psect	cstackCOMRAM
    81  000001                     __pcstackCOMRAM:
    82                           	opt stack 0
    83  000001                     write_char@data:
    84                           	opt stack 0
    85                           
    86                           ; 1 bytes @ 0x0
    87  000001                     	ds	1
    88  000002                     main@d:
    89                           	opt stack 0
    90                           
    91                           ; 1 bytes @ 0x1
    92  000002                     	ds	1
    93                           
    94 ;;
    95 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    96 ;;
    97 ;; *************** function _main *****************
    98 ;; Defined at:
    99 ;;		line 110 in file "main.c"
   100 ;; Parameters:    Size  Location     Type
   101 ;;		None
   102 ;; Auto vars:     Size  Location     Type
   103 ;;  d               1    1[COMRAM] unsigned char 
   104 ;; Return value:  Size  Location     Type
   105 ;;                  2   52[None  ] int 
   106 ;; Registers used:
   107 ;;		wreg, status,2, status,0, cstack
   108 ;; Tracked objects:
   109 ;;		On entry : 0/0
   110 ;;		On exit  : 0/0
   111 ;;		Unchanged: 0/0
   112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   113 ;;      Params:         0       0       0       0       0       0       0       0       0
   114 ;;      Locals:         1       0       0       0       0       0       0       0       0
   115 ;;      Temps:          0       0       0       0       0       0       0       0       0
   116 ;;      Totals:         1       0       0       0       0       0       0       0       0
   117 ;;Total ram usage:        1 bytes
   118 ;; Hardware stack levels required when called:    1
   119 ;; This function calls:
   120 ;;		_init_uart
   121 ;;		_read_char
   122 ;;		_write_char
   123 ;; This function is called by:
   124 ;;		Startup code after reset
   125 ;; This function uses a non-reentrant model
   126 ;;
   127                           
   128                           	psect	text0
   129  007FD2                     __ptext0:
   130                           	opt stack 0
   131  007FD2                     _main:
   132                           	opt stack 30
   133                           
   134                           ;main.c: 113: OSCCONbits.IRCF = 7;
   135                           
   136                           ;incstack = 0
   137  007FD2  88D3               	bsf	4051,4,c	;volatile
   138  007FD4  8AD3               	bsf	4051,5,c	;volatile
   139  007FD6  8CD3               	bsf	4051,6,c	;volatile
   140                           
   141                           ;main.c: 116: ANSELA = 0;
   142  007FD8  0E00               	movlw	0
   143  007FDA  010F               	movlb	15	; () banked
   144  007FDC  6F5B               	movwf	91,b	;volatile
   145                           
   146                           ;main.c: 119: ADCON0 = 0;
   147  007FDE  0E00               	movlw	0
   148  007FE0  6EC2               	movwf	4034,c	;volatile
   149                           
   150                           ; BSR set to: 15
   151                           ;main.c: 122: PORTC = 0xff;
   152  007FE2  6882               	setf	3970,c	;volatile
   153                           
   154                           ; BSR set to: 15
   155                           ;main.c: 125: TRISA = 0xff;
   156  007FE4  6892               	setf	3986,c	;volatile
   157                           
   158                           ; BSR set to: 15
   159                           ;main.c: 126: TRISB = 0xff;
   160  007FE6  6893               	setf	3987,c	;volatile
   161                           
   162                           ;main.c: 127: TRISC = 0b10111111;
   163  007FE8  0EBF               	movlw	191
   164  007FEA  6E94               	movwf	3988,c	;volatile
   165                           
   166                           ; BSR set to: 15
   167                           ;main.c: 128: TRISD = 0xff;
   168  007FEC  6895               	setf	3989,c	;volatile
   169                           
   170                           ; BSR set to: 15
   171                           ;main.c: 130: init_uart();
   172  007FEE  ECD2  F03F         	call	_init_uart	;wreg free
   173  007FF2                     l708:
   174                           
   175                           ;main.c: 135: uint8_t d = read_char();
   176  007FF2  ECDD  F03F         	call	_read_char	;wreg free
   177  007FF6  6E02               	movwf	main@d,c
   178                           
   179                           ;main.c: 136: write_char(d+1);
   180  007FF8  2802               	incf	main@d,w,c
   181  007FFA  ECCC  F03F         	call	_write_char
   182  007FFE  D7F9               	goto	l708
   183  008000                     __end_of_main:
   184                           	opt stack 0
   185                           
   186 ;; *************** function _write_char *****************
   187 ;; Defined at:
   188 ;;		line 104 in file "main.c"
   189 ;; Parameters:    Size  Location     Type
   190 ;;  data            1    wreg     unsigned char 
   191 ;; Auto vars:     Size  Location     Type
   192 ;;  data            1    0[COMRAM] unsigned char 
   193 ;; Return value:  Size  Location     Type
   194 ;;                  1    wreg      void 
   195 ;; Registers used:
   196 ;;		wreg
   197 ;; Tracked objects:
   198 ;;		On entry : 0/0
   199 ;;		On exit  : 0/0
   200 ;;		Unchanged: 0/0
   201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   202 ;;      Params:         0       0       0       0       0       0       0       0       0
   203 ;;      Locals:         1       0       0       0       0       0       0       0       0
   204 ;;      Temps:          0       0       0       0       0       0       0       0       0
   205 ;;      Totals:         1       0       0       0       0       0       0       0       0
   206 ;;Total ram usage:        1 bytes
   207 ;; Hardware stack levels used:    1
   208 ;; This function calls:
   209 ;;		Nothing
   210 ;; This function is called by:
   211 ;;		_main
   212 ;; This function uses a non-reentrant model
   213 ;;
   214                           
   215                           	psect	text1
   216  007F98                     __ptext1:
   217                           	opt stack 0
   218  007F98                     _write_char:
   219                           	opt stack 30
   220                           
   221                           ;incstack = 0
   222                           ;write_char@data stored from wreg
   223  007F98  6E01               	movwf	write_char@data,c
   224  007F9A                     l45:
   225  007F9A  A2AC               	btfss	4012,1,c	;volatile
   226  007F9C  D7FE               	goto	l45
   227                           
   228                           ;main.c: 107: TXREG1 = data;
   229  007F9E  C001  FFAD         	movff	write_char@data,4013	;volatile
   230  007FA2  0012               	return		;funcret
   231  007FA4                     __end_of_write_char:
   232                           	opt stack 0
   233                           
   234 ;; *************** function _read_char *****************
   235 ;; Defined at:
   236 ;;		line 92 in file "main.c"
   237 ;; Parameters:    Size  Location     Type
   238 ;;		None
   239 ;; Auto vars:     Size  Location     Type
   240 ;;		None
   241 ;; Return value:  Size  Location     Type
   242 ;;                  1    wreg      unsigned char 
   243 ;; Registers used:
   244 ;;		wreg, status,2
   245 ;; Tracked objects:
   246 ;;		On entry : 0/0
   247 ;;		On exit  : 0/0
   248 ;;		Unchanged: 0/0
   249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   250 ;;      Params:         0       0       0       0       0       0       0       0       0
   251 ;;      Locals:         0       0       0       0       0       0       0       0       0
   252 ;;      Temps:          0       0       0       0       0       0       0       0       0
   253 ;;      Totals:         0       0       0       0       0       0       0       0       0
   254 ;;Total ram usage:        0 bytes
   255 ;; Hardware stack levels used:    1
   256 ;; This function calls:
   257 ;;		Nothing
   258 ;; This function is called by:
   259 ;;		_main
   260 ;; This function uses a non-reentrant model
   261 ;;
   262                           
   263                           	psect	text2
   264  007FBA                     __ptext2:
   265                           	opt stack 0
   266  007FBA                     _read_char:
   267                           	opt stack 30
   268                           
   269                           ;main.c: 94: while (PIR1bits.RC1IF == 0) {
   270                           
   271                           ;incstack = 0
   272  007FBA  D007               	goto	l36
   273  007FBC                     l37:
   274                           
   275                           ;main.c: 95: if (RCSTA1bits.OERR == 1 || RCSTA1bits.FERR == 1) {
   276  007FBC  B2AB               	btfsc	4011,1,c	;volatile
   277  007FBE  D002               	goto	l40
   278  007FC0  A4AB               	btfss	4011,2,c	;volatile
   279  007FC2  D003               	goto	l36
   280  007FC4                     l40:
   281                           
   282                           ;main.c: 96: RCSTA1bits.OERR = 0;
   283  007FC4  92AB               	bcf	4011,1,c	;volatile
   284                           
   285                           ;main.c: 97: RCSTA1bits.CREN = 0;
   286  007FC6  98AB               	bcf	4011,4,c	;volatile
   287                           
   288                           ;main.c: 98: RCSTA1bits.CREN = 1;
   289  007FC8  88AB               	bsf	4011,4,c	;volatile
   290  007FCA                     l36:
   291  007FCA  AA9E               	btfss	3998,5,c	;volatile
   292  007FCC  D7F7               	goto	l37
   293                           
   294                           ;main.c: 99: }
   295                           ;main.c: 100: }
   296                           ;main.c: 101: return RCREG1;
   297  007FCE  50AE               	movf	4014,w,c	;volatile
   298  007FD0  0012               	return	
   299  007FD2                     __end_of_read_char:
   300                           	opt stack 0
   301                           
   302 ;; *************** function _init_uart *****************
   303 ;; Defined at:
   304 ;;		line 77 in file "main.c"
   305 ;; Parameters:    Size  Location     Type
   306 ;;		None
   307 ;; Auto vars:     Size  Location     Type
   308 ;;		None
   309 ;; Return value:  Size  Location     Type
   310 ;;                  1    wreg      void 
   311 ;; Registers used:
   312 ;;		wreg, status,2
   313 ;; Tracked objects:
   314 ;;		On entry : 0/0
   315 ;;		On exit  : 0/0
   316 ;;		Unchanged: 0/0
   317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   318 ;;      Params:         0       0       0       0       0       0       0       0       0
   319 ;;      Locals:         0       0       0       0       0       0       0       0       0
   320 ;;      Temps:          0       0       0       0       0       0       0       0       0
   321 ;;      Totals:         0       0       0       0       0       0       0       0       0
   322 ;;Total ram usage:        0 bytes
   323 ;; Hardware stack levels used:    1
   324 ;; This function calls:
   325 ;;		Nothing
   326 ;; This function is called by:
   327 ;;		_main
   328 ;; This function uses a non-reentrant model
   329 ;;
   330                           
   331                           	psect	text3
   332  007FA4                     __ptext3:
   333                           	opt stack 0
   334  007FA4                     _init_uart:
   335                           	opt stack 30
   336                           
   337                           ;main.c: 79: TXSTA1bits.SYNC = 0;
   338                           
   339                           ;incstack = 0
   340  007FA4  98AC               	bcf	4012,4,c	;volatile
   341                           
   342                           ;main.c: 80: TXSTA1bits.TX9 = 0;
   343  007FA6  9CAC               	bcf	4012,6,c	;volatile
   344                           
   345                           ;main.c: 81: TXSTA1bits.TXEN = 1;
   346  007FA8  8AAC               	bsf	4012,5,c	;volatile
   347                           
   348                           ;main.c: 83: RCSTA1bits.RX9 = 0;
   349  007FAA  9CAB               	bcf	4011,6,c	;volatile
   350                           
   351                           ;main.c: 84: RCSTA1bits.CREN = 1;
   352  007FAC  88AB               	bsf	4011,4,c	;volatile
   353                           
   354                           ;main.c: 85: RCSTA1bits.SPEN = 1;
   355  007FAE  8EAB               	bsf	4011,7,c	;volatile
   356                           
   357                           ;main.c: 87: BAUDCON1bits.BRG16 = 0;
   358  007FB0  96B8               	bcf	4024,3,c	;volatile
   359                           
   360                           ;main.c: 88: TXSTA1bits.BRGH = 0;
   361  007FB2  94AC               	bcf	4012,2,c	;volatile
   362                           
   363                           ;main.c: 89: SPBRG1 = 25;
   364  007FB4  0E19               	movlw	25
   365  007FB6  6EAF               	movwf	4015,c	;volatile
   366  007FB8  0012               	return		;funcret
   367  007FBA                     __end_of_init_uart:
   368                           	opt stack 0
   369  0000                     
   370                           	psect	rparam


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      2       2
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_write_char

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      30
                                              1 COMRAM     1     1      0
                          _init_uart
                          _read_char
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _write_char                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_char                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_uart
   _read_char
   _write_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      2       2       1        2.1%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Dec  9 17:55:18 2017

                     l40 7FC4                       l36 7FCA                       l37 7FBC  
                     l45 7F9A             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
                    l708 7FF2             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
             _TXSTA1bits 000FAC                     _main 7FD2            __CFG_BORV$190 000000  
                   start 0002            __CFG_IESO$OFF 000000           write_char@data 0001  
           ___param_bank 000000             _BAUDCON1bits 000FB8                    ?_main 0001  
                  _PORTC 000F82                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  main@d 0002           __CFG_T3CMX$RC0 000000           __CFG_ICPRT$OFF 000000  
         __CFG_MCLRE$OFF 000000          __initialization 7F92             __end_of_main 8000  
         __CFG_PCLKEN$ON 000000                   ??_main 0002            __activetblptr 000000  
         __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000                   _ADCON0 000FC2  
                 _ANSELA 000F5B           __CFG_WDTEN$OFF 000000                   _RCREG1 000FAE  
                 _SPBRG1 000FAF                   _TXREG1 000FAD           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000     __CFG_LS48MHZ$SYS24X4 000000               __accesstop 0060  
__end_of__initialization 7F92          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001         __CFG_nPWRTEN$OFF 000000       __size_of_read_char 0018  
     __size_of_init_uart 0016        __CFG_PLLSEL$PLL4X 000000                  __Hparam 0000  
                __Lparam 0000                  __pcinit 7F92                  __ramtop 0800  
                __ptext0 7FD2                  __ptext1 7F98                  __ptext2 7FBA  
                __ptext3 7FA4        __end_of_read_char 7FD2        __end_of_init_uart 7FBA  
   end_of_initialization 7F92               _write_char 7F98      start_initialization 7F92  
        __CFG_nLPBOR$OFF 000000              ?_write_char 0001                _read_char 7FBA  
              _init_uart 7FA4                 _PIR1bits 000F9E         __CFG_WDTPS$32768 000000  
      __CFG_CFGPLLEN$OFF 000000               ?_read_char 0001               ?_init_uart 0001  
    __size_of_write_char 000C                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000            __size_of_main 002E              ??_read_char 0001  
            ??_init_uart 0001     __CFG_FOSC$INTOSCCLKO 000000               _RCSTA1bits 000FAB  
             _OSCCONbits 000FD3     __CFG_CPUDIV$NOCLKDIV 000000             ??_write_char 0001  
     __end_of_write_char 7FA4  
