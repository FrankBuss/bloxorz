

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Jan  7 01:11:13 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 1.42
    48                           ; Generated 13/04/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F45K50 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMRAM
    83  000F0E                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _hex
    87  000F0E  01                 	db	low STR_1
    88  000F0F  08                 	db	high STR_1
    89  0000                     _ANSELC	set	3933
    90  0000                     _ANSELA	set	3931
    91  0000                     _ADCON0	set	4034
    92  0000                     _OSCCONbits	set	4051
    93  0000                     _TXREG1	set	4013
    94  0000                     _TRISE	set	3990
    95  0000                     _TRISD	set	3989
    96  0000                     _TRISC	set	3988
    97  0000                     _TRISB	set	3987
    98  0000                     _TRISA	set	3986
    99  0000                     _PORTE	set	3972
   100  0000                     _PORTD	set	3971
   101  0000                     _PORTC	set	3970
   102  0000                     _PORTB	set	3969
   103  0000                     _PORTA	set	3968
   104  0000                     _PIE1bits	set	3997
   105  0000                     _INTCONbits	set	4082
   106  0000                     _RCONbits	set	4048
   107  0000                     _SPBRG1	set	4015
   108  0000                     _BAUDCON1bits	set	4024
   109  0000                     _TXSTA1bits	set	4012
   110  0000                     _RCREG1	set	4014
   111  0000                     _PIR1bits	set	3998
   112  0000                     _RCSTA1bits	set	4011
   113                           
   114                           	psect	smallconst
   115  000800                     __psmallconst:
   116                           	opt stack 0
   117  000800  00                 	db	0
   118  000801                     STR_1:
   119  000801  30                 	db	48	;'0'
   120  000802  31                 	db	49	;'1'
   121  000803  32                 	db	50	;'2'
   122  000804  33                 	db	51	;'3'
   123  000805  34                 	db	52	;'4'
   124  000806  35                 	db	53	;'5'
   125  000807  36                 	db	54	;'6'
   126  000808  37                 	db	55	;'7'
   127  000809  38                 	db	56	;'8'
   128  00080A  39                 	db	57	;'9'
   129  00080B  61                 	db	97	;'a'
   130  00080C  62                 	db	98	;'b'
   131  00080D  63                 	db	99	;'c'
   132  00080E  64                 	db	100	;'d'
   133  00080F  65                 	db	101	;'e'
   134  000810  66                 	db	102	;'f'
   135  000811  00                 	db	0
   136                           
   137                           ; #config settings
   138  000812  00                 	db	0	; dummy byte at the end
   139  0000                     
   140                           	psect	cinit
   141  000BDA                     __pcinit:
   142                           	opt stack 0
   143  000BDA                     start_initialization:
   144                           	opt stack 0
   145  000BDA                     __initialization:
   146                           	opt stack 0
   147                           
   148                           ; Initialize objects allocated to COMRAM (2 bytes)
   149                           ; load TBLPTR registers with __pidataCOMRAM
   150  000BDA  0E0E               	movlw	low __pidataCOMRAM
   151  000BDC  6EF6               	movwf	tblptrl,c
   152  000BDE  0E0F               	movlw	high __pidataCOMRAM
   153  000BE0  6EF7               	movwf	tblptrh,c
   154  000BE2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   155  000BE4  6EF8               	movwf	tblptru,c
   156  000BE6  0009               	tblrd		*+	;fetch initializer
   157  000BE8  CFF5 F029          	movff	tablat,__pdataCOMRAM
   158  000BEC  0009               	tblrd		*+	;fetch initializer
   159  000BEE  CFF5 F02A          	movff	tablat,__pdataCOMRAM+1
   160                           
   161                           ; Clear objects allocated to BIGRAM (1024 bytes)
   162  000BF2  EE02  F000         	lfsr	0,__pbssBIGRAM
   163  000BF6  EE14 F000          	lfsr	1,1024
   164  000BFA                     clear_0:
   165  000BFA  6AEE               	clrf	postinc0,c
   166  000BFC  50E5               	movf	postdec1,w,c
   167  000BFE  50E1               	movf	fsr1l,w,c
   168  000C00  E1FC               	bnz	clear_0
   169  000C02  50E2               	movf	fsr1h,w,c
   170  000C04  E1FA               	bnz	clear_0
   171                           
   172                           ; Clear objects allocated to BANK1 (256 bytes)
   173  000C06  EE01  F000         	lfsr	0,__pbssBANK1
   174  000C0A  EE11 F000          	lfsr	1,256
   175  000C0E                     clear_1:
   176  000C0E  6AEE               	clrf	postinc0,c
   177  000C10  50E5               	movf	postdec1,w,c
   178  000C12  50E1               	movf	fsr1l,w,c
   179  000C14  E1FC               	bnz	clear_1
   180  000C16  50E2               	movf	fsr1h,w,c
   181  000C18  E1FA               	bnz	clear_1
   182                           
   183                           ; Clear objects allocated to COMRAM (14 bytes)
   184  000C1A  EE00  F01B         	lfsr	0,__pbssCOMRAM
   185  000C1E  0E0E               	movlw	14
   186  000C20                     clear_2:
   187  000C20  6AEE               	clrf	postinc0,c
   188  000C22  06E8               	decf	wreg,f,c
   189  000C24  E1FD               	bnz	clear_2
   190  000C26                     end_of_initialization:
   191                           	opt stack 0
   192  000C26                     __end_of__initialization:
   193                           	opt stack 0
   194  000C26  902B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   195  000C28  922B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   196  000C2A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   197  000C2C  6EF8               	movwf	tblptru,c
   198  000C2E  0100               	movlb	0
   199  000C30  EFCB  F006         	goto	_main	;jump to C main() function
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           postinc0	equ	0xFEE
   205                           wreg	equ	0xFE8
   206                           postdec1	equ	0xFE5
   207                           fsr1h	equ	0xFE2
   208                           fsr1l	equ	0xFE1
   209                           
   210                           	psect	bssCOMRAM
   211  00001B                     __pbssCOMRAM:
   212                           	opt stack 0
   213  00001B                     _adr:
   214                           	opt stack 0
   215  00001B                     	ds	2
   216  00001D                     _uartWriteIndex:
   217                           	opt stack 0
   218  00001D                     	ds	2
   219  00001F                     _uartReadIndex:
   220                           	opt stack 0
   221  00001F                     	ds	2
   222  000021                     _flashBufferIndex:
   223                           	opt stack 0
   224  000021                     	ds	1
   225  000022                     _port:
   226                           	opt stack 0
   227  000022                     	ds	1
   228  000023                     _command:
   229                           	opt stack 0
   230  000023                     	ds	1
   231  000024                     _temp:
   232                           	opt stack 0
   233  000024                     	ds	1
   234  000025                     _checksumCalculated:
   235                           	opt stack 0
   236  000025                     	ds	1
   237  000026                     _checksum:
   238                           	opt stack 0
   239  000026                     	ds	1
   240  000027                     _value:
   241                           	opt stack 0
   242  000027                     	ds	1
   243  000028                     _state:
   244                           	opt stack 0
   245  000028                     	ds	1
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           postdec1	equ	0xFE5
   253                           fsr1h	equ	0xFE2
   254                           fsr1l	equ	0xFE1
   255                           
   256                           	psect	dataCOMRAM
   257  000029                     __pdataCOMRAM:
   258                           	opt stack 0
   259  000029                     _hex:
   260                           	opt stack 0
   261  000029                     	ds	2
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           postdec1	equ	0xFE5
   269                           fsr1h	equ	0xFE2
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	bssBANK1
   273  000100                     __pbssBANK1:
   274                           	opt stack 0
   275  000100                     _flashBuffer:
   276                           	opt stack 0
   277  000100                     	ds	256
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           postdec1	equ	0xFE5
   285                           fsr1h	equ	0xFE2
   286                           fsr1l	equ	0xFE1
   287                           
   288                           	psect	bssBIGRAM
   289  000200                     __pbssBIGRAM:
   290                           	opt stack 0
   291  000200                     _uartBuf:
   292                           	opt stack 0
   293  000200                     	ds	1024
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           postdec1	equ	0xFE5
   301                           fsr1h	equ	0xFE2
   302                           fsr1l	equ	0xFE1
   303                           
   304                           	psect	cstackCOMRAM
   305  000001                     __pcstackCOMRAM:
   306                           	opt stack 0
   307  000001                     ??_receiveData:
   308  000001                     
   309                           ; 2 bytes @ 0x0
   310  000001                     	ds	14
   311  00000F                     ?_logicAddressToPhysical:
   312                           	opt stack 0
   313  00000F                     writePortA@data:
   314                           	opt stack 0
   315  00000F                     writePortB@data:
   316                           	opt stack 0
   317  00000F                     writePortC@data:
   318                           	opt stack 0
   319  00000F                     writePortD@data:
   320                           	opt stack 0
   321  00000F                     writePortE@data:
   322                           	opt stack 0
   323  00000F                     writeTrisA@data:
   324                           	opt stack 0
   325  00000F                     writeTrisB@data:
   326                           	opt stack 0
   327  00000F                     writeTrisC@data:
   328                           	opt stack 0
   329  00000F                     writeTrisD@data:
   330                           	opt stack 0
   331  00000F                     writeTrisE@data:
   332                           	opt stack 0
   333  00000F                     readChar@data:
   334                           	opt stack 0
   335  00000F                     writeChar@data:
   336                           	opt stack 0
   337  00000F                     parseHex@x:
   338                           	opt stack 0
   339  00000F                     logicDataToPhysical@value:
   340                           	opt stack 0
   341  00000F                     logicAddressToPhysical@adr0:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0xE
   345  00000F                     	ds	1
   346  000010                     ??_writeHex:
   347  000010                     logicDataToPhysical@value0:
   348                           	opt stack 0
   349  000010                     writeAddress@adr:
   350                           	opt stack 0
   351  000010                     readAddress@adr:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0xF
   355  000010                     	ds	1
   356  000011                     logicAddressToPhysical@adr:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x10
   360  000011                     	ds	1
   361  000012                     writeAddress@value:
   362                           	opt stack 0
   363  000012                     readAddress@d:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0x11
   367  000012                     	ds	1
   368  000013                     writeHex@data:
   369                           	opt stack 0
   370  000013                     writeAddressPhysical@adr:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x12
   374  000013                     	ds	2
   375  000015                     writeAddressPhysical@value:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x14
   379  000015                     	ds	1
   380  000016                     ??_onData:
   381  000016                     
   382                           ; 1 bytes @ 0x15
   383  000016                     	ds	4
   384  00001A                     onData@d:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x19
   388  00001A                     	ds	1
   389  00001B                     tblptru	equ	0xFF8
   390                           tblptrh	equ	0xFF7
   391                           tblptrl	equ	0xFF6
   392                           tablat	equ	0xFF5
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           postdec1	equ	0xFE5
   396                           fsr1h	equ	0xFE2
   397                           fsr1l	equ	0xFE1
   398                           
   399                           ; 1 bytes @ 0x1A
   400 ;;
   401 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   402 ;;
   403 ;; *************** function _main *****************
   404 ;; Defined at:
   405 ;;		line 212 in file "main.c"
   406 ;; Parameters:    Size  Location     Type
   407 ;;		None
   408 ;; Auto vars:     Size  Location     Type
   409 ;;		None
   410 ;; Return value:  Size  Location     Type
   411 ;;                  2  129[None  ] int 
   412 ;; Registers used:
   413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   419 ;;      Params:         0       0       0       0       0       0       0       0       0
   420 ;;      Locals:         0       0       0       0       0       0       0       0       0
   421 ;;      Temps:          0       0       0       0       0       0       0       0       0
   422 ;;      Totals:         0       0       0       0       0       0       0       0       0
   423 ;;Total ram usage:        0 bytes
   424 ;; Hardware stack levels required when called:    5
   425 ;; This function calls:
   426 ;;		_initUart
   427 ;;		_onData
   428 ;;		_readChar
   429 ;; This function is called by:
   430 ;;		Startup code after reset
   431 ;; This function uses a non-reentrant model
   432 ;;
   433                           
   434                           	psect	text0
   435  000D96                     __ptext0:
   436                           	opt stack 0
   437  000D96                     _main:
   438                           	opt stack 26
   439                           
   440                           ;main.c: 215: OSCCONbits.IRCF = 7;
   441                           
   442                           ;incstack = 0
   443  000D96  88D3               	bsf	4051,4,c	;volatile
   444  000D98  8AD3               	bsf	4051,5,c	;volatile
   445  000D9A  8CD3               	bsf	4051,6,c	;volatile
   446                           
   447                           ;main.c: 218: ANSELA = 0;
   448  000D9C  0E00               	movlw	0
   449  000D9E  010F               	movlb	15	; () banked
   450  000DA0  6F5B               	movwf	91,b	;volatile
   451                           
   452                           ;main.c: 219: ANSELC = 0;
   453  000DA2  0E00               	movlw	0
   454  000DA4  010F               	movlb	15	; () banked
   455  000DA6  6F5D               	movwf	93,b	;volatile
   456                           
   457                           ;main.c: 222: ADCON0 = 0;
   458  000DA8  0E00               	movlw	0
   459  000DAA  6EC2               	movwf	4034,c	;volatile
   460                           
   461                           ; BSR set to: 15
   462                           ;main.c: 225: PORTC = 0xff;
   463  000DAC  6882               	setf	3970,c	;volatile
   464                           
   465                           ; BSR set to: 15
   466                           ;main.c: 228: TRISA = 0xff;
   467  000DAE  6892               	setf	3986,c	;volatile
   468                           
   469                           ; BSR set to: 15
   470                           ;main.c: 229: TRISB = 0xff;
   471  000DB0  6893               	setf	3987,c	;volatile
   472                           
   473                           ;main.c: 230: TRISC = 0b10111111;
   474  000DB2  0EBF               	movlw	191
   475  000DB4  6E94               	movwf	3988,c	;volatile
   476                           
   477                           ; BSR set to: 15
   478                           ;main.c: 231: TRISD = 0xff;
   479  000DB6  6895               	setf	3989,c	;volatile
   480                           
   481                           ; BSR set to: 15
   482                           ;main.c: 233: initUart();
   483  000DB8  EC38  F007         	call	_initUart	;wreg free
   484  000DBC                     l1913:
   485                           
   486                           ;main.c: 237: onData(readChar());
   487  000DBC  ECAF  F006         	call	_readChar	;wreg free
   488  000DC0  EC0A  F004         	call	_onData
   489  000DC4  D7FB               	goto	l1913
   490  000DC6                     __end_of_main:
   491                           	opt stack 0
   492                           tblptru	equ	0xFF8
   493                           tblptrh	equ	0xFF7
   494                           tblptrl	equ	0xFF6
   495                           tablat	equ	0xFF5
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           postdec1	equ	0xFE5
   499                           fsr1h	equ	0xFE2
   500                           fsr1l	equ	0xFE1
   501                           
   502 ;; *************** function _readChar *****************
   503 ;; Defined at:
   504 ;;		line 196 in file "main.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;  data            1   14[COMRAM] unsigned char 
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      unsigned char 
   511 ;; Registers used:
   512 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   518 ;;      Params:         0       0       0       0       0       0       0       0       0
   519 ;;      Locals:         1       0       0       0       0       0       0       0       0
   520 ;;      Temps:          0       0       0       0       0       0       0       0       0
   521 ;;      Totals:         1       0       0       0       0       0       0       0       0
   522 ;;Total ram usage:        1 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; Hardware stack levels required when called:    1
   525 ;; This function calls:
   526 ;;		Nothing
   527 ;; This function is called by:
   528 ;;		_main
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           	psect	text1
   533  000D5E                     __ptext1:
   534                           	opt stack 0
   535  000D5E                     _readChar:
   536                           	opt stack 29
   537  000D5E                     l1225:
   538  000D5E  501D               	movf	_uartWriteIndex,w,c	;volatile
   539  000D60  181F               	xorwf	_uartReadIndex,w,c	;volatile
   540  000D62  E104               	bnz	l1227
   541  000D64  501E               	movf	_uartWriteIndex+1,w,c	;volatile
   542  000D66  1820               	xorwf	_uartReadIndex+1,w,c	;volatile
   543  000D68  B4D8               	btfsc	status,2,c
   544  000D6A  D7F9               	goto	l1225
   545  000D6C                     l1227:
   546                           
   547                           ;main.c: 200: data = uartBuf[uartReadIndex];
   548  000D6C  0E00               	movlw	low _uartBuf
   549  000D6E  241F               	addwf	_uartReadIndex,w,c	;volatile
   550  000D70  6ED9               	movwf	fsr2l,c
   551  000D72  0E02               	movlw	high _uartBuf
   552  000D74  2020               	addwfc	_uartReadIndex+1,w,c	;volatile
   553  000D76  6EDA               	movwf	fsr2h,c
   554  000D78  50DF               	movf	indf2,w,c
   555  000D7A  6E0F               	movwf	readChar@data,c
   556                           
   557                           ;main.c: 201: uartReadIndex++;
   558  000D7C  4A1F               	infsnz	_uartReadIndex,f,c	;volatile
   559  000D7E  2A20               	incf	_uartReadIndex+1,f,c	;volatile
   560                           
   561                           ;main.c: 202: if (uartReadIndex == 1024) uartReadIndex = 0;
   562  000D80  0E04               	movlw	4
   563  000D82  1820               	xorwf	_uartReadIndex+1,w,c	;volatile
   564  000D84  101F               	iorwf	_uartReadIndex,w,c	;volatile
   565  000D86  A4D8               	btfss	status,2,c
   566  000D88  D004               	goto	l118
   567  000D8A  0E00               	movlw	0
   568  000D8C  6E20               	movwf	_uartReadIndex+1,c	;volatile
   569  000D8E  0E00               	movlw	0
   570  000D90  6E1F               	movwf	_uartReadIndex,c	;volatile
   571  000D92                     l118:
   572                           
   573                           ;main.c: 203: return data;
   574  000D92  500F               	movf	readChar@data,w,c
   575  000D94  0012               	return	
   576  000D96                     __end_of_readChar:
   577                           	opt stack 0
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1h	equ	0xFE2
   586                           fsr1l	equ	0xFE1
   587                           indf2	equ	0xFDF
   588                           fsr2h	equ	0xFDA
   589                           fsr2l	equ	0xFD9
   590                           status	equ	0xFD8
   591                           
   592 ;; *************** function _onData *****************
   593 ;; Defined at:
   594 ;;		line 216 in file "receiver.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;  d               1    wreg     unsigned char 
   597 ;; Auto vars:     Size  Location     Type
   598 ;;  d               1   25[COMRAM] unsigned char 
   599 ;; Return value:  Size  Location     Type
   600 ;;                  1    wreg      void 
   601 ;; Registers used:
   602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   608 ;;      Params:         0       0       0       0       0       0       0       0       0
   609 ;;      Locals:         1       0       0       0       0       0       0       0       0
   610 ;;      Temps:          4       0       0       0       0       0       0       0       0
   611 ;;      Totals:         5       0       0       0       0       0       0       0       0
   612 ;;Total ram usage:        5 bytes
   613 ;; Hardware stack levels used:    1
   614 ;; Hardware stack levels required when called:    4
   615 ;; This function calls:
   616 ;;		_error
   617 ;;		_parseHex
   618 ;;		_readAddress
   619 ;;		_readPort
   620 ;;		_writeAddress
   621 ;;		_writeAddressPhysical
   622 ;;		_writeHex
   623 ;;		_writePortA
   624 ;;		_writePortB
   625 ;;		_writePortC
   626 ;;		_writePortD
   627 ;;		_writePortE
   628 ;;		_writeTrisA
   629 ;;		_writeTrisB
   630 ;;		_writeTrisC
   631 ;;		_writeTrisD
   632 ;;		_writeTrisE
   633 ;; This function is called by:
   634 ;;		_main
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text2
   639  000814                     __ptext2:
   640                           	opt stack 0
   641  000814                     _onData:
   642                           	opt stack 26
   643                           
   644                           ;incstack = 0
   645                           ;onData@d stored from wreg
   646  000814  6E1A               	movwf	onData@d,c
   647                           
   648                           ;receiver.c: 218: switch (state) {
   649  000816  D1C7               	goto	l1897
   650  000818                     l1659:
   651                           
   652                           ;receiver.c: 220: if (d == '<') {
   653  000818  0E3C               	movlw	60
   654  00081A  181A               	xorwf	onData@d,w,c
   655  00081C  A4D8               	btfss	status,2,c
   656  00081E  0012               	return	
   657                           
   658                           ;receiver.c: 221: state = STATE_COMMAND;
   659  000820  0E01               	movlw	1
   660  000822  6E28               	movwf	_state,c
   661                           
   662                           ;receiver.c: 222: checksumCalculated = 0;
   663  000824  0E00               	movlw	0
   664  000826  6E25               	movwf	_checksumCalculated,c
   665                           
   666                           ;receiver.c: 223: }
   667                           ;receiver.c: 224: break;
   668  000828  0012               	return	
   669  00082A                     l1663:
   670                           
   671                           ;receiver.c: 226: checksumCalculated ^= d;
   672  00082A  501A               	movf	onData@d,w,c
   673  00082C  1A25               	xorwf	_checksumCalculated,f,c
   674                           
   675                           ;receiver.c: 227: state = STATE_PORT;
   676  00082E  0E02               	movlw	2
   677  000830  6E28               	movwf	_state,c
   678                           
   679                           ;receiver.c: 228: if (d == 'r') {
   680  000832  0E72               	movlw	114
   681  000834  181A               	xorwf	onData@d,w,c
   682  000836  A4D8               	btfss	status,2,c
   683  000838  D003               	goto	l1671
   684                           
   685                           ;receiver.c: 229: command = COMMAND_READ;
   686  00083A  0E00               	movlw	0
   687  00083C  6E23               	movwf	_command,c
   688                           
   689                           ;receiver.c: 230: } else if (d == 'w') {
   690  00083E  0012               	return	
   691  000840                     l1671:
   692  000840  0E77               	movlw	119
   693  000842  181A               	xorwf	onData@d,w,c
   694  000844  A4D8               	btfss	status,2,c
   695  000846  D003               	goto	l1675
   696                           
   697                           ;receiver.c: 231: command = COMMAND_WRITE;
   698  000848  0E01               	movlw	1
   699  00084A  6E23               	movwf	_command,c
   700                           
   701                           ;receiver.c: 232: } else if (d == 't') {
   702  00084C  0012               	return	
   703  00084E                     l1675:
   704  00084E  0E74               	movlw	116
   705  000850  181A               	xorwf	onData@d,w,c
   706  000852  A4D8               	btfss	status,2,c
   707  000854  D003               	goto	l1679
   708                           
   709                           ;receiver.c: 233: command = COMMAND_TRIS;
   710  000856  0E02               	movlw	2
   711  000858  6E23               	movwf	_command,c
   712                           
   713                           ;receiver.c: 234: } else if (d == 'l') {
   714  00085A  0012               	return	
   715  00085C                     l1679:
   716  00085C  0E6C               	movlw	108
   717  00085E  181A               	xorwf	onData@d,w,c
   718  000860  A4D8               	btfss	status,2,c
   719  000862  D005               	goto	l1683
   720                           
   721                           ;receiver.c: 235: state = STATE_VALUE_HIGH_NIBBLE;
   722  000864  0E03               	movlw	3
   723  000866  6E28               	movwf	_state,c
   724                           
   725                           ;receiver.c: 236: command = COMMAND_ADR_LOW;
   726  000868  0E03               	movlw	3
   727  00086A  6E23               	movwf	_command,c
   728                           
   729                           ;receiver.c: 237: } else if (d == 'h') {
   730  00086C  0012               	return	
   731  00086E                     l1683:
   732  00086E  0E68               	movlw	104
   733  000870  181A               	xorwf	onData@d,w,c
   734  000872  A4D8               	btfss	status,2,c
   735  000874  D005               	goto	l1687
   736                           
   737                           ;receiver.c: 238: state = STATE_VALUE_HIGH_NIBBLE;
   738  000876  0E03               	movlw	3
   739  000878  6E28               	movwf	_state,c
   740                           
   741                           ;receiver.c: 239: command = COMMAND_ADR_HIGH;
   742  00087A  0E04               	movlw	4
   743  00087C  6E23               	movwf	_command,c
   744                           
   745                           ;receiver.c: 240: } else if (d == 'f') {
   746  00087E  0012               	return	
   747  000880                     l1687:
   748  000880  0E66               	movlw	102
   749  000882  181A               	xorwf	onData@d,w,c
   750  000884  A4D8               	btfss	status,2,c
   751  000886  D007               	goto	l1691
   752                           
   753                           ;receiver.c: 241: state = STATE_VALUE_HIGH_NIBBLE;
   754  000888  0E03               	movlw	3
   755  00088A  6E28               	movwf	_state,c
   756                           
   757                           ;receiver.c: 242: command = COMMAND_FLASH;
   758  00088C  0E05               	movlw	5
   759  00088E  6E23               	movwf	_command,c
   760                           
   761                           ;receiver.c: 243: flashBufferIndex = 0;
   762  000890  0E00               	movlw	0
   763  000892  6E21               	movwf	_flashBufferIndex,c
   764                           
   765                           ;receiver.c: 244: } else if (d == 'v') {
   766  000894  0012               	return	
   767  000896                     l1691:
   768  000896  0E76               	movlw	118
   769  000898  181A               	xorwf	onData@d,w,c
   770  00089A  A4D8               	btfss	status,2,c
   771  00089C  D005               	goto	l1695
   772                           
   773                           ;receiver.c: 245: state = STATE_CHECKSUM_HIGH_NIBBLE;
   774  00089E  0E05               	movlw	5
   775  0008A0  6E28               	movwf	_state,c
   776                           
   777                           ;receiver.c: 246: command = COMMAND_VERIFY;
   778  0008A2  0E06               	movlw	6
   779  0008A4  6E23               	movwf	_command,c
   780                           
   781                           ;receiver.c: 247: } else {
   782  0008A6  0012               	return	
   783  0008A8                     l1695:
   784                           
   785                           ;receiver.c: 248: error();
   786  0008A8  EC4D  F007         	call	_error	;wreg free
   787                           
   788                           ;receiver.c: 249: }
   789                           ;receiver.c: 250: break;
   790  0008AC  0012               	return	
   791  0008AE                     l1697:
   792                           
   793                           ;receiver.c: 252: checksumCalculated ^= d;
   794  0008AE  501A               	movf	onData@d,w,c
   795  0008B0  1A25               	xorwf	_checksumCalculated,f,c
   796                           
   797                           ;receiver.c: 253: if (command == COMMAND_READ) {
   798  0008B2  5023               	movf	_command,w,c
   799  0008B4  A4D8               	btfss	status,2,c
   800  0008B6  D002               	goto	l1703
   801                           
   802                           ;receiver.c: 254: state = STATE_CHECKSUM_HIGH_NIBBLE;
   803  0008B8  0E05               	movlw	5
   804  0008BA  D001               	goto	L1
   805  0008BC                     l1703:
   806                           
   807                           ;receiver.c: 256: state = STATE_VALUE_HIGH_NIBBLE;
   808  0008BC  0E03               	movlw	3
   809  0008BE                     L1:
   810  0008BE  6E28               	movwf	_state,c
   811                           
   812                           ;receiver.c: 257: }
   813                           ;receiver.c: 258: if (d == 'a') {
   814  0008C0  0E61               	movlw	97
   815  0008C2  181A               	xorwf	onData@d,w,c
   816  0008C4  A4D8               	btfss	status,2,c
   817  0008C6  D003               	goto	l1709
   818                           
   819                           ;receiver.c: 259: port = PORT_A;
   820  0008C8  0E00               	movlw	0
   821  0008CA  6E22               	movwf	_port,c
   822                           
   823                           ;receiver.c: 260: } else if (d == 'b') {
   824  0008CC  0012               	return	
   825  0008CE                     l1709:
   826  0008CE  0E62               	movlw	98
   827  0008D0  181A               	xorwf	onData@d,w,c
   828  0008D2  A4D8               	btfss	status,2,c
   829  0008D4  D003               	goto	l1713
   830                           
   831                           ;receiver.c: 261: port = PORT_B;
   832  0008D6  0E01               	movlw	1
   833  0008D8  6E22               	movwf	_port,c
   834                           
   835                           ;receiver.c: 262: } else if (d == 'c') {
   836  0008DA  0012               	return	
   837  0008DC                     l1713:
   838  0008DC  0E63               	movlw	99
   839  0008DE  181A               	xorwf	onData@d,w,c
   840  0008E0  A4D8               	btfss	status,2,c
   841  0008E2  D003               	goto	l1717
   842                           
   843                           ;receiver.c: 263: port = PORT_C;
   844  0008E4  0E02               	movlw	2
   845  0008E6  6E22               	movwf	_port,c
   846                           
   847                           ;receiver.c: 264: } else if (d == 'd') {
   848  0008E8  0012               	return	
   849  0008EA                     l1717:
   850  0008EA  0E64               	movlw	100
   851  0008EC  181A               	xorwf	onData@d,w,c
   852  0008EE  A4D8               	btfss	status,2,c
   853  0008F0  D003               	goto	l1721
   854                           
   855                           ;receiver.c: 265: port = PORT_D;
   856  0008F2  0E03               	movlw	3
   857  0008F4  6E22               	movwf	_port,c
   858                           
   859                           ;receiver.c: 266: } else if (d == 'e') {
   860  0008F6  0012               	return	
   861  0008F8                     l1721:
   862  0008F8  0E65               	movlw	101
   863  0008FA  181A               	xorwf	onData@d,w,c
   864  0008FC  A4D8               	btfss	status,2,c
   865  0008FE  D003               	goto	l1725
   866                           
   867                           ;receiver.c: 267: port = PORT_E;
   868  000900  0E04               	movlw	4
   869  000902  6E22               	movwf	_port,c
   870                           
   871                           ;receiver.c: 268: } else {
   872  000904  0012               	return	
   873  000906                     l1725:
   874                           
   875                           ;receiver.c: 269: error();
   876  000906  EC4D  F007         	call	_error	;wreg free
   877                           
   878                           ;receiver.c: 270: }
   879                           ;receiver.c: 271: break;
   880  00090A  0012               	return	
   881  00090C                     l1727:
   882                           
   883                           ;receiver.c: 273: checksumCalculated ^= d;
   884  00090C  501A               	movf	onData@d,w,c
   885  00090E  1A25               	xorwf	_checksumCalculated,f,c
   886                           
   887                           ;receiver.c: 274: temp = parseHex(d);
   888  000910  501A               	movf	onData@d,w,c
   889  000912  EC0F  F007         	call	_parseHex
   890  000916  6E24               	movwf	_temp,c
   891                           
   892                           ;receiver.c: 275: if (temp < 0) {
   893  000918  AE24               	btfss	_temp,7,c
   894  00091A  D003               	goto	l1735
   895                           
   896                           ;receiver.c: 276: error();
   897  00091C  EC4D  F007         	call	_error	;wreg free
   898                           
   899                           ;receiver.c: 277: } else {
   900  000920  0012               	return	
   901  000922                     l1735:
   902                           
   903                           ;receiver.c: 278: state = STATE_VALUE_LOW_NIBBLE;
   904  000922  0E04               	movlw	4
   905  000924  6E28               	movwf	_state,c
   906                           
   907                           ;receiver.c: 279: value = (uint8_t) temp;
   908  000926  C024  F027         	movff	_temp,_value
   909                           
   910                           ;receiver.c: 280: value <<= 4;
   911  00092A  3A27               	swapf	_value,f,c
   912  00092C  0EF0               	movlw	240
   913  00092E  1627               	andwf	_value,f,c
   914                           
   915                           ;receiver.c: 281: }
   916                           ;receiver.c: 282: break;
   917  000930  0012               	return	
   918  000932                     l1741:
   919                           
   920                           ;receiver.c: 284: checksumCalculated ^= d;
   921  000932  501A               	movf	onData@d,w,c
   922  000934  1A25               	xorwf	_checksumCalculated,f,c
   923                           
   924                           ;receiver.c: 285: temp = parseHex(d);
   925  000936  501A               	movf	onData@d,w,c
   926  000938  EC0F  F007         	call	_parseHex
   927  00093C  6E24               	movwf	_temp,c
   928                           
   929                           ;receiver.c: 286: if (temp < 0) {
   930  00093E  AE24               	btfss	_temp,7,c
   931  000940  D003               	goto	l1749
   932                           
   933                           ;receiver.c: 287: error();
   934  000942  EC4D  F007         	call	_error	;wreg free
   935                           
   936                           ;receiver.c: 288: } else {
   937  000946  0012               	return	
   938  000948                     l1749:
   939                           
   940                           ;receiver.c: 289: value |= (uint8_t) temp;
   941  000948  5024               	movf	_temp,w,c
   942  00094A  1227               	iorwf	_value,f,c
   943                           
   944                           ;receiver.c: 290: state = STATE_CHECKSUM_HIGH_NIBBLE;
   945  00094C  0E05               	movlw	5
   946  00094E  6E28               	movwf	_state,c
   947                           
   948                           ;receiver.c: 291: if (command == COMMAND_FLASH) {
   949  000950  0E05               	movlw	5
   950  000952  1823               	xorwf	_command,w,c
   951  000954  A4D8               	btfss	status,2,c
   952  000956  0012               	return	
   953                           
   954                           ;receiver.c: 292: flashBuffer[flashBufferIndex] = value;
   955  000958  5021               	movf	_flashBufferIndex,w,c
   956  00095A  0D01               	mullw	1
   957  00095C  0E00               	movlw	low _flashBuffer
   958  00095E  24F3               	addwf	prodl,w,c
   959  000960  6ED9               	movwf	fsr2l,c
   960  000962  0E01               	movlw	high _flashBuffer
   961  000964  20F4               	addwfc	prodh,w,c
   962  000966  6EDA               	movwf	fsr2h,c
   963  000968  C027  FFDF         	movff	_value,indf2
   964                           
   965                           ;receiver.c: 293: if (flashBufferIndex < 255) {
   966  00096C  2821               	incf	_flashBufferIndex,w,c
   967  00096E  B4D8               	btfsc	status,2,c
   968  000970  D002               	goto	l1761
   969                           
   970                           ;receiver.c: 294: state = STATE_VALUE_HIGH_NIBBLE;
   971  000972  0E03               	movlw	3
   972  000974  D001               	goto	L2
   973  000976                     l1761:
   974                           
   975                           ;receiver.c: 296: state = STATE_CHECKSUM_HIGH_NIBBLE;
   976  000976  0E05               	movlw	5
   977  000978                     L2:
   978  000978  6E28               	movwf	_state,c
   979                           
   980                           ;receiver.c: 297: }
   981                           ;receiver.c: 298: flashBufferIndex++;
   982  00097A  2A21               	incf	_flashBufferIndex,f,c
   983                           
   984                           ;receiver.c: 299: }
   985                           ;receiver.c: 300: }
   986                           ;receiver.c: 301: break;
   987  00097C  0012               	return	
   988  00097E                     l1765:
   989                           
   990                           ;receiver.c: 303: temp = parseHex(d);
   991  00097E  501A               	movf	onData@d,w,c
   992  000980  EC0F  F007         	call	_parseHex
   993  000984  6E24               	movwf	_temp,c
   994                           
   995                           ;receiver.c: 304: if (temp < 0) {
   996  000986  AE24               	btfss	_temp,7,c
   997  000988  D003               	goto	l1771
   998                           
   999                           ;receiver.c: 305: error();
  1000  00098A  EC4D  F007         	call	_error	;wreg free
  1001                           
  1002                           ;receiver.c: 306: } else {
  1003  00098E  0012               	return	
  1004  000990                     l1771:
  1005                           
  1006                           ;receiver.c: 307: state = STATE_CHECKSUM_LOW_NIBBLE;
  1007  000990  0E06               	movlw	6
  1008  000992  6E28               	movwf	_state,c
  1009                           
  1010                           ;receiver.c: 308: checksum = (uint8_t) temp;
  1011  000994  C024  F026         	movff	_temp,_checksum
  1012                           
  1013                           ;receiver.c: 309: checksum <<= 4;
  1014  000998  3A26               	swapf	_checksum,f,c
  1015  00099A  0EF0               	movlw	240
  1016  00099C  1626               	andwf	_checksum,f,c
  1017                           
  1018                           ;receiver.c: 310: }
  1019                           ;receiver.c: 311: break;
  1020  00099E  0012               	return	
  1021  0009A0                     l1777:
  1022                           
  1023                           ;receiver.c: 313: temp = parseHex(d);
  1024  0009A0  501A               	movf	onData@d,w,c
  1025  0009A2  EC0F  F007         	call	_parseHex
  1026  0009A6  6E24               	movwf	_temp,c
  1027                           
  1028                           ;receiver.c: 314: if (temp < 0) {
  1029  0009A8  AE24               	btfss	_temp,7,c
  1030  0009AA  D003               	goto	l1783
  1031                           
  1032                           ;receiver.c: 315: error();
  1033  0009AC  EC4D  F007         	call	_error	;wreg free
  1034                           
  1035                           ;receiver.c: 316: } else {
  1036  0009B0  0012               	return	
  1037  0009B2                     l1783:
  1038                           
  1039                           ;receiver.c: 317: state = STATE_END;
  1040  0009B2  0E07               	movlw	7
  1041  0009B4  6E28               	movwf	_state,c
  1042                           
  1043                           ;receiver.c: 318: checksum |= (uint8_t) temp;
  1044  0009B6  5024               	movf	_temp,w,c
  1045  0009B8  1226               	iorwf	_checksum,f,c
  1046                           
  1047                           ;receiver.c: 319: }
  1048                           ;receiver.c: 320: break;
  1049  0009BA  0012               	return	
  1050  0009BC                     l1787:
  1051                           
  1052                           ;receiver.c: 322: if (d == '>') {
  1053  0009BC  0E3E               	movlw	62
  1054  0009BE  181A               	xorwf	onData@d,w,c
  1055  0009C0  A4D8               	btfss	status,2,c
  1056  0009C2  D0EE               	goto	l1893
  1057                           
  1058                           ;receiver.c: 323: state = STATE_IDLE;
  1059  0009C4  0E00               	movlw	0
  1060  0009C6  6E28               	movwf	_state,c
  1061                           
  1062                           ;receiver.c: 324: if (checksumCalculated == checksum) {
  1063  0009C8  5026               	movf	_checksum,w,c
  1064  0009CA  1825               	xorwf	_checksumCalculated,w,c
  1065  0009CC  A4D8               	btfss	status,2,c
  1066  0009CE  D0E5               	goto	l1891
  1067                           
  1068                           ;receiver.c: 325: if (command == COMMAND_READ) {
  1069  0009D0  5023               	movf	_command,w,c
  1070  0009D2  A4D8               	btfss	status,2,c
  1071  0009D4  D003               	goto	l1797
  1072                           
  1073                           ;receiver.c: 326: readPort();
  1074  0009D6  EC6A  F006         	call	_readPort	;wreg free
  1075                           
  1076                           ;receiver.c: 327: } else if (command == COMMAND_WRITE) {
  1077  0009DA  D0D2               	goto	l1883
  1078  0009DC                     l1797:
  1079  0009DC  0423               	decf	_command,w,c
  1080  0009DE  A4D8               	btfss	status,2,c
  1081  0009E0  D028               	goto	l1821
  1082                           
  1083                           ;receiver.c: 328: if (port == PORT_A) {
  1084  0009E2  5022               	movf	_port,w,c
  1085  0009E4  A4D8               	btfss	status,2,c
  1086  0009E6  D004               	goto	l1803
  1087                           
  1088                           ;receiver.c: 329: writePortA(value);
  1089  0009E8  5027               	movf	_value,w,c
  1090  0009EA  EC6D  F007         	call	_writePortA
  1091                           
  1092                           ;receiver.c: 330: } else if (port == PORT_B) {
  1093  0009EE  D01E               	goto	l1819
  1094  0009F0                     l1803:
  1095  0009F0  0422               	decf	_port,w,c
  1096  0009F2  A4D8               	btfss	status,2,c
  1097  0009F4  D004               	goto	l1807
  1098                           
  1099                           ;receiver.c: 331: writePortB(value);
  1100  0009F6  5027               	movf	_value,w,c
  1101  0009F8  EC79  F007         	call	_writePortB
  1102                           
  1103                           ;receiver.c: 332: } else if (port == PORT_C) {
  1104  0009FC  D017               	goto	l1819
  1105  0009FE                     l1807:
  1106  0009FE  0E02               	movlw	2
  1107  000A00  1822               	xorwf	_port,w,c
  1108  000A02  A4D8               	btfss	status,2,c
  1109  000A04  D004               	goto	l1811
  1110                           
  1111                           ;receiver.c: 333: writePortC(value);
  1112  000A06  5027               	movf	_value,w,c
  1113  000A08  EC75  F007         	call	_writePortC
  1114                           
  1115                           ;receiver.c: 334: } else if (port == PORT_D) {
  1116  000A0C  D00F               	goto	l1819
  1117  000A0E                     l1811:
  1118  000A0E  0E03               	movlw	3
  1119  000A10  1822               	xorwf	_port,w,c
  1120  000A12  A4D8               	btfss	status,2,c
  1121  000A14  D004               	goto	l1815
  1122                           
  1123                           ;receiver.c: 335: writePortD(value);
  1124  000A16  5027               	movf	_value,w,c
  1125  000A18  EC71  F007         	call	_writePortD
  1126                           
  1127                           ;receiver.c: 336: } else if (port == PORT_E) {
  1128  000A1C  D007               	goto	l1819
  1129  000A1E                     l1815:
  1130  000A1E  0E04               	movlw	4
  1131  000A20  1822               	xorwf	_port,w,c
  1132  000A22  A4D8               	btfss	status,2,c
  1133  000A24  D003               	goto	l1819
  1134                           
  1135                           ;receiver.c: 337: writePortE(value);
  1136  000A26  5027               	movf	_value,w,c
  1137  000A28  EC69  F007         	call	_writePortE
  1138  000A2C                     l1819:
  1139                           
  1140                           ;receiver.c: 338: }
  1141                           ;receiver.c: 339: readPort();
  1142  000A2C  EC6A  F006         	call	_readPort	;wreg free
  1143                           
  1144                           ;receiver.c: 340: } else if (command == COMMAND_TRIS) {
  1145  000A30  D0A7               	goto	l1883
  1146  000A32                     l1821:
  1147  000A32  0E02               	movlw	2
  1148  000A34  1823               	xorwf	_command,w,c
  1149  000A36  A4D8               	btfss	status,2,c
  1150  000A38  D028               	goto	l1845
  1151                           
  1152                           ;receiver.c: 341: if (port == PORT_A) {
  1153  000A3A  5022               	movf	_port,w,c
  1154  000A3C  A4D8               	btfss	status,2,c
  1155  000A3E  D004               	goto	l1827
  1156                           
  1157                           ;receiver.c: 342: writeTrisA(value);
  1158  000A40  5027               	movf	_value,w,c
  1159  000A42  EC65  F007         	call	_writeTrisA
  1160                           
  1161                           ;receiver.c: 343: } else if (port == PORT_B) {
  1162  000A46  D01E               	goto	l1843
  1163  000A48                     l1827:
  1164  000A48  0422               	decf	_port,w,c
  1165  000A4A  A4D8               	btfss	status,2,c
  1166  000A4C  D004               	goto	l1831
  1167                           
  1168                           ;receiver.c: 344: writeTrisB(value);
  1169  000A4E  5027               	movf	_value,w,c
  1170  000A50  EC61  F007         	call	_writeTrisB
  1171                           
  1172                           ;receiver.c: 345: } else if (port == PORT_C) {
  1173  000A54  D017               	goto	l1843
  1174  000A56                     l1831:
  1175  000A56  0E02               	movlw	2
  1176  000A58  1822               	xorwf	_port,w,c
  1177  000A5A  A4D8               	btfss	status,2,c
  1178  000A5C  D004               	goto	l1835
  1179                           
  1180                           ;receiver.c: 346: writeTrisC(value);
  1181  000A5E  5027               	movf	_value,w,c
  1182  000A60  EC47  F007         	call	_writeTrisC
  1183                           
  1184                           ;receiver.c: 347: } else if (port == PORT_D) {
  1185  000A64  D00F               	goto	l1843
  1186  000A66                     l1835:
  1187  000A66  0E03               	movlw	3
  1188  000A68  1822               	xorwf	_port,w,c
  1189  000A6A  A4D8               	btfss	status,2,c
  1190  000A6C  D004               	goto	l1839
  1191                           
  1192                           ;receiver.c: 348: writeTrisD(value);
  1193  000A6E  5027               	movf	_value,w,c
  1194  000A70  EC5D  F007         	call	_writeTrisD
  1195                           
  1196                           ;receiver.c: 349: } else if (port == PORT_E) {
  1197  000A74  D007               	goto	l1843
  1198  000A76                     l1839:
  1199  000A76  0E04               	movlw	4
  1200  000A78  1822               	xorwf	_port,w,c
  1201  000A7A  A4D8               	btfss	status,2,c
  1202  000A7C  D003               	goto	l1843
  1203                           
  1204                           ;receiver.c: 350: writeTrisE(value);
  1205  000A7E  5027               	movf	_value,w,c
  1206  000A80  EC59  F007         	call	_writeTrisE
  1207  000A84                     l1843:
  1208                           
  1209                           ;receiver.c: 351: }
  1210                           ;receiver.c: 352: readPort();
  1211  000A84  EC6A  F006         	call	_readPort	;wreg free
  1212                           
  1213                           ;receiver.c: 353: } else if (command == COMMAND_ADR_LOW) {
  1214  000A88  D07B               	goto	l1883
  1215  000A8A                     l1845:
  1216  000A8A  0E03               	movlw	3
  1217  000A8C  1823               	xorwf	_command,w,c
  1218  000A8E  A4D8               	btfss	status,2,c
  1219  000A90  D011               	goto	l1849
  1220                           
  1221                           ;receiver.c: 354: adr = (adr & 0xff00) | value;
  1222  000A92  0E00               	movlw	0
  1223  000A94  6E16               	movwf	??_onData& (0+255),c
  1224  000A96  0EFF               	movlw	255
  1225  000A98  6E17               	movwf	(??_onData+1)& (0+255),c
  1226  000A9A  C01B  F018         	movff	_adr,??_onData+2
  1227  000A9E  C01C  F019         	movff	_adr+1,??_onData+3
  1228  000AA2  5016               	movf	??_onData,w,c
  1229  000AA4  1618               	andwf	??_onData+2,f,c
  1230  000AA6  5017               	movf	??_onData+1,w,c
  1231  000AA8  1619               	andwf	??_onData+3,f,c
  1232  000AAA  5027               	movf	_value,w,c
  1233  000AAC  1018               	iorwf	??_onData+2,w,c
  1234  000AAE  6E1B               	movwf	_adr,c
  1235  000AB0  5019               	movf	??_onData+3,w,c
  1236  000AB2  D012               	goto	L3
  1237  000AB4                     l1849:
  1238  000AB4  0E04               	movlw	4
  1239  000AB6  1823               	xorwf	_command,w,c
  1240  000AB8  A4D8               	btfss	status,2,c
  1241  000ABA  D010               	goto	l1853
  1242                           
  1243                           ;receiver.c: 356: adr = (adr & 0xff) | (value << 8);
  1244  000ABC  5027               	movf	_value,w,c
  1245  000ABE  6E17               	movwf	(??_onData+1)& (0+255),c
  1246  000AC0  6A16               	clrf	??_onData& (0+255),c
  1247  000AC2  0EFF               	movlw	255
  1248  000AC4  141B               	andwf	_adr,w,c
  1249  000AC6  6E18               	movwf	(??_onData+2)& (0+255),c
  1250  000AC8  0E00               	movlw	0
  1251  000ACA  141C               	andwf	_adr+1,w,c
  1252  000ACC  6E19               	movwf	(??_onData+3)& (0+255),c
  1253  000ACE  5016               	movf	??_onData,w,c
  1254  000AD0  1018               	iorwf	??_onData+2,w,c
  1255  000AD2  6E1B               	movwf	_adr,c
  1256  000AD4  5017               	movf	??_onData+1,w,c
  1257  000AD6  1019               	iorwf	??_onData+3,w,c
  1258  000AD8                     L3:
  1259  000AD8  6E1C               	movwf	_adr+1,c
  1260                           
  1261                           ;receiver.c: 357: } else if (command == COMMAND_FLASH) {
  1262  000ADA  D052               	goto	l1883
  1263  000ADC                     l1853:
  1264  000ADC  0E05               	movlw	5
  1265  000ADE  1823               	xorwf	_command,w,c
  1266  000AE0  A4D8               	btfss	status,2,c
  1267  000AE2  D041               	goto	l1877
  1268                           
  1269                           ;receiver.c: 358: for (flashBufferIndex = 0; flashBufferIndex < 256; flashBufferIndex++)
      +                           {
  1270  000AE4  0E00               	movlw	0
  1271  000AE6  6E21               	movwf	_flashBufferIndex,c
  1272  000AE8                     l1859:
  1273                           
  1274                           ;receiver.c: 359: writeAddressPhysical(0x5555, 0xaa);
  1275  000AE8  0E55               	movlw	85
  1276  000AEA  6E14               	movwf	writeAddressPhysical@adr+1,c
  1277  000AEC  0E55               	movlw	85
  1278  000AEE  6E13               	movwf	writeAddressPhysical@adr,c
  1279  000AF0  0EAA               	movlw	170
  1280  000AF2  6E15               	movwf	writeAddressPhysical@value,c
  1281  000AF4  ECE3  F006         	call	_writeAddressPhysical	;wreg free
  1282                           
  1283                           ;receiver.c: 360: writeAddressPhysical(0x2aaa, 0x55);
  1284  000AF8  0E2A               	movlw	42
  1285  000AFA  6E14               	movwf	writeAddressPhysical@adr+1,c
  1286  000AFC  0EAA               	movlw	170
  1287  000AFE  6E13               	movwf	writeAddressPhysical@adr,c
  1288  000B00  0E55               	movlw	85
  1289  000B02  6E15               	movwf	writeAddressPhysical@value,c
  1290  000B04  ECE3  F006         	call	_writeAddressPhysical	;wreg free
  1291                           
  1292                           ;receiver.c: 361: writeAddressPhysical(0x5555, 0xa0);
  1293  000B08  0E55               	movlw	85
  1294  000B0A  6E14               	movwf	writeAddressPhysical@adr+1,c
  1295  000B0C  0E55               	movlw	85
  1296  000B0E  6E13               	movwf	writeAddressPhysical@adr,c
  1297  000B10  0EA0               	movlw	160
  1298  000B12  6E15               	movwf	writeAddressPhysical@value,c
  1299  000B14  ECE3  F006         	call	_writeAddressPhysical	;wreg free
  1300                           
  1301                           ;receiver.c: 362: writeAddress(adr, flashBuffer[flashBufferIndex]);
  1302  000B18  C01B  F010         	movff	_adr,writeAddress@adr
  1303  000B1C  C01C  F011         	movff	_adr+1,writeAddress@adr+1
  1304  000B20  5021               	movf	_flashBufferIndex,w,c
  1305  000B22  0D01               	mullw	1
  1306  000B24  0E00               	movlw	low _flashBuffer
  1307  000B26  24F3               	addwf	prodl,w,c
  1308  000B28  6ED9               	movwf	fsr2l,c
  1309  000B2A  0E01               	movlw	high _flashBuffer
  1310  000B2C  20F4               	addwfc	prodh,w,c
  1311  000B2E  6EDA               	movwf	fsr2h,c
  1312  000B30  50DF               	movf	indf2,w,c
  1313  000B32  6E12               	movwf	writeAddress@value,c
  1314  000B34  EC90  F006         	call	_writeAddress	;wreg free
  1315                           
  1316                           ;receiver.c: 363: _delay((unsigned long)((25)*(32000000/4000000.0)));
  1317  000B38  0E42               	movlw	66
  1318  000B3A                     u1447:
  1319  000B3A  2EE8               	decfsz	wreg,f,c
  1320  000B3C  D7FE               	bra	u1447
  1321  000B3E  D000               	nop2	
  1322                           
  1323                           ;receiver.c: 364: value = readAddress(adr);
  1324  000B40  C01B  F010         	movff	_adr,readAddress@adr
  1325  000B44  C01C  F011         	movff	_adr+1,readAddress@adr+1
  1326  000B48  EC24  F007         	call	_readAddress	;wreg free
  1327  000B4C  6E27               	movwf	_value,c
  1328                           
  1329                           ;receiver.c: 365: writeHex(value);
  1330  000B4E  5027               	movf	_value,w,c
  1331  000B50  EC43  F006         	call	_writeHex
  1332                           
  1333                           ;receiver.c: 366: value ^= 0xff;
  1334  000B54  0EFF               	movlw	255
  1335  000B56  1A27               	xorwf	_value,f,c
  1336                           
  1337                           ;receiver.c: 367: writeHex(value);
  1338  000B58  5027               	movf	_value,w,c
  1339  000B5A  EC43  F006         	call	_writeHex
  1340                           
  1341                           ;receiver.c: 368: adr++;
  1342  000B5E  4A1B               	infsnz	_adr,f,c
  1343  000B60  2A1C               	incf	_adr+1,f,c
  1344  000B62  2A21               	incf	_flashBufferIndex,f,c
  1345  000B64  D7C1               	goto	l1859
  1346  000B66                     l1877:
  1347  000B66  0E06               	movlw	6
  1348  000B68  1823               	xorwf	_command,w,c
  1349  000B6A  A4D8               	btfss	status,2,c
  1350  000B6C  D009               	goto	l1883
  1351                           
  1352                           ;receiver.c: 371: value = readAddress(adr);
  1353  000B6E  C01B  F010         	movff	_adr,readAddress@adr
  1354  000B72  C01C  F011         	movff	_adr+1,readAddress@adr+1
  1355  000B76  EC24  F007         	call	_readAddress	;wreg free
  1356  000B7A  6E27               	movwf	_value,c
  1357                           
  1358                           ;receiver.c: 372: adr++;
  1359  000B7C  4A1B               	infsnz	_adr,f,c
  1360  000B7E  2A1C               	incf	_adr+1,f,c
  1361  000B80                     l1883:
  1362                           
  1363                           ;receiver.c: 373: }
  1364                           ;receiver.c: 374: if (command != COMMAND_FLASH) {
  1365  000B80  0E05               	movlw	5
  1366  000B82  1823               	xorwf	_command,w,c
  1367  000B84  B4D8               	btfsc	status,2,c
  1368  000B86  0012               	return	
  1369                           
  1370                           ;receiver.c: 375: writeHex(value);
  1371  000B88  5027               	movf	_value,w,c
  1372  000B8A  EC43  F006         	call	_writeHex
  1373                           
  1374                           ;receiver.c: 376: value ^= 0xff;
  1375  000B8E  0EFF               	movlw	255
  1376  000B90  1A27               	xorwf	_value,f,c
  1377                           
  1378                           ;receiver.c: 377: writeHex(value);
  1379  000B92  5027               	movf	_value,w,c
  1380  000B94  EC43  F006         	call	_writeHex
  1381                           
  1382                           ;receiver.c: 378: }
  1383                           ;receiver.c: 379: } else {
  1384  000B98  0012               	return	
  1385  000B9A                     l1891:
  1386                           
  1387                           ;receiver.c: 380: error();
  1388  000B9A  EC4D  F007         	call	_error	;wreg free
  1389                           
  1390                           ;receiver.c: 381: }
  1391                           ;receiver.c: 382: } else {
  1392  000B9E  0012               	return	
  1393  000BA0                     l1893:
  1394                           
  1395                           ;receiver.c: 383: error();
  1396  000BA0  EC4D  F007         	call	_error	;wreg free
  1397                           
  1398                           ;receiver.c: 386: }
  1399                           
  1400                           ;receiver.c: 384: }
  1401                           ;receiver.c: 385: break;
  1402  000BA4  0012               	return	
  1403  000BA6                     l1897:
  1404  000BA6  5028               	movf	_state,w,c
  1405                           
  1406                           ; Switch size 1, requested type "space"
  1407                           ; Number of cases is 8, Range of values is 0 to 7
  1408                           ; switch strategies available:
  1409                           ; Name         Instructions Cycles
  1410                           ; simple_byte           25    13 (average)
  1411                           ;	Chosen strategy is simple_byte
  1412  000BA8  0A00               	xorlw	0	; case 0
  1413  000BAA  B4D8               	btfsc	status,2,c
  1414  000BAC  D635               	goto	l1659
  1415  000BAE  0A01               	xorlw	1	; case 1
  1416  000BB0  B4D8               	btfsc	status,2,c
  1417  000BB2  D63B               	goto	l1663
  1418  000BB4  0A03               	xorlw	3	; case 2
  1419  000BB6  B4D8               	btfsc	status,2,c
  1420  000BB8  D67A               	goto	l1697
  1421  000BBA  0A01               	xorlw	1	; case 3
  1422  000BBC  B4D8               	btfsc	status,2,c
  1423  000BBE  D6A6               	goto	l1727
  1424  000BC0  0A07               	xorlw	7	; case 4
  1425  000BC2  B4D8               	btfsc	status,2,c
  1426  000BC4  D6B6               	goto	l1741
  1427  000BC6  0A01               	xorlw	1	; case 5
  1428  000BC8  B4D8               	btfsc	status,2,c
  1429  000BCA  D6D9               	goto	l1765
  1430  000BCC  0A03               	xorlw	3	; case 6
  1431  000BCE  B4D8               	btfsc	status,2,c
  1432  000BD0  D6E7               	goto	l1777
  1433  000BD2  0A01               	xorlw	1	; case 7
  1434  000BD4  A4D8               	btfss	status,2,c
  1435  000BD6  0012               	return	
  1436  000BD8  D6F1               	goto	l1787
  1437  000BDA                     __end_of_onData:
  1438                           	opt stack 0
  1439                           tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           prodh	equ	0xFF4
  1444                           prodl	equ	0xFF3
  1445                           postinc0	equ	0xFEE
  1446                           wreg	equ	0xFE8
  1447                           postdec1	equ	0xFE5
  1448                           fsr1h	equ	0xFE2
  1449                           fsr1l	equ	0xFE1
  1450                           indf2	equ	0xFDF
  1451                           fsr2h	equ	0xFDA
  1452                           fsr2l	equ	0xFD9
  1453                           status	equ	0xFD8
  1454                           
  1455 ;; *************** function _writeTrisE *****************
  1456 ;; Defined at:
  1457 ;;		line 166 in file "main.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  data            1    wreg     unsigned char 
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;  data            1   14[COMRAM] unsigned char 
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      void 
  1464 ;; Registers used:
  1465 ;;		wreg
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1471 ;;      Params:         0       0       0       0       0       0       0       0       0
  1472 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1473 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1474 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1475 ;;Total ram usage:        1 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; Hardware stack levels required when called:    1
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_onData
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text3
  1486  000EB2                     __ptext3:
  1487                           	opt stack 0
  1488  000EB2                     _writeTrisE:
  1489                           	opt stack 28
  1490                           
  1491                           ;incstack = 0
  1492                           ;writeTrisE@data stored from wreg
  1493  000EB2  6E0F               	movwf	writeTrisE@data,c
  1494                           
  1495                           ;main.c: 168: TRISE = data;
  1496  000EB4  C00F  FF96         	movff	writeTrisE@data,3990	;volatile
  1497  000EB8  0012               	return		;funcret
  1498  000EBA                     __end_of_writeTrisE:
  1499                           	opt stack 0
  1500                           tblptru	equ	0xFF8
  1501                           tblptrh	equ	0xFF7
  1502                           tblptrl	equ	0xFF6
  1503                           tablat	equ	0xFF5
  1504                           prodh	equ	0xFF4
  1505                           prodl	equ	0xFF3
  1506                           postinc0	equ	0xFEE
  1507                           wreg	equ	0xFE8
  1508                           postdec1	equ	0xFE5
  1509                           fsr1h	equ	0xFE2
  1510                           fsr1l	equ	0xFE1
  1511                           indf2	equ	0xFDF
  1512                           fsr2h	equ	0xFDA
  1513                           fsr2l	equ	0xFD9
  1514                           status	equ	0xFD8
  1515                           
  1516 ;; *************** function _writeTrisD *****************
  1517 ;; Defined at:
  1518 ;;		line 161 in file "main.c"
  1519 ;; Parameters:    Size  Location     Type
  1520 ;;  data            1    wreg     unsigned char 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  data            1   14[COMRAM] unsigned char 
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  1    wreg      void 
  1525 ;; Registers used:
  1526 ;;		wreg
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1532 ;;      Params:         0       0       0       0       0       0       0       0       0
  1533 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1535 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1536 ;;Total ram usage:        1 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:    1
  1539 ;; This function calls:
  1540 ;;		Nothing
  1541 ;; This function is called by:
  1542 ;;		_onData
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           	psect	text4
  1547  000EBA                     __ptext4:
  1548                           	opt stack 0
  1549  000EBA                     _writeTrisD:
  1550                           	opt stack 28
  1551                           
  1552                           ;incstack = 0
  1553                           ;writeTrisD@data stored from wreg
  1554  000EBA  6E0F               	movwf	writeTrisD@data,c
  1555                           
  1556                           ;main.c: 163: TRISD = data;
  1557  000EBC  C00F  FF95         	movff	writeTrisD@data,3989	;volatile
  1558  000EC0  0012               	return		;funcret
  1559  000EC2                     __end_of_writeTrisD:
  1560                           	opt stack 0
  1561                           tblptru	equ	0xFF8
  1562                           tblptrh	equ	0xFF7
  1563                           tblptrl	equ	0xFF6
  1564                           tablat	equ	0xFF5
  1565                           prodh	equ	0xFF4
  1566                           prodl	equ	0xFF3
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           postdec1	equ	0xFE5
  1570                           fsr1h	equ	0xFE2
  1571                           fsr1l	equ	0xFE1
  1572                           indf2	equ	0xFDF
  1573                           fsr2h	equ	0xFDA
  1574                           fsr2l	equ	0xFD9
  1575                           status	equ	0xFD8
  1576                           
  1577 ;; *************** function _writeTrisC *****************
  1578 ;; Defined at:
  1579 ;;		line 155 in file "main.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  data            1    wreg     unsigned char 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  data            1   14[COMRAM] unsigned char 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, status,0
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1593 ;;      Params:         0       0       0       0       0       0       0       0       0
  1594 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1596 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1597 ;;Total ram usage:        1 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    1
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_onData
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text5
  1608  000E8E                     __ptext5:
  1609                           	opt stack 0
  1610  000E8E                     _writeTrisC:
  1611                           	opt stack 28
  1612                           
  1613                           ;incstack = 0
  1614                           ;writeTrisC@data stored from wreg
  1615  000E8E  6E0F               	movwf	writeTrisC@data,c
  1616                           
  1617                           ;main.c: 158: TRISC = data & 0b10111111 | 0x80;
  1618  000E90  500F               	movf	writeTrisC@data,w,c
  1619  000E92  0BBF               	andlw	191
  1620  000E94  0980               	iorlw	128
  1621  000E96  6E94               	movwf	3988,c	;volatile
  1622  000E98  0012               	return		;funcret
  1623  000E9A                     __end_of_writeTrisC:
  1624                           	opt stack 0
  1625                           tblptru	equ	0xFF8
  1626                           tblptrh	equ	0xFF7
  1627                           tblptrl	equ	0xFF6
  1628                           tablat	equ	0xFF5
  1629                           prodh	equ	0xFF4
  1630                           prodl	equ	0xFF3
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1h	equ	0xFE2
  1635                           fsr1l	equ	0xFE1
  1636                           indf2	equ	0xFDF
  1637                           fsr2h	equ	0xFDA
  1638                           fsr2l	equ	0xFD9
  1639                           status	equ	0xFD8
  1640                           
  1641 ;; *************** function _writeTrisB *****************
  1642 ;; Defined at:
  1643 ;;		line 150 in file "main.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  data            1    wreg     unsigned char 
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  data            1   14[COMRAM] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1657 ;;      Params:         0       0       0       0       0       0       0       0       0
  1658 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1660 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1661 ;;Total ram usage:        1 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    1
  1664 ;; This function calls:
  1665 ;;		Nothing
  1666 ;; This function is called by:
  1667 ;;		_onData
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text6
  1672  000EC2                     __ptext6:
  1673                           	opt stack 0
  1674  000EC2                     _writeTrisB:
  1675                           	opt stack 28
  1676                           
  1677                           ;incstack = 0
  1678                           ;writeTrisB@data stored from wreg
  1679  000EC2  6E0F               	movwf	writeTrisB@data,c
  1680                           
  1681                           ;main.c: 152: TRISB = data;
  1682  000EC4  C00F  FF93         	movff	writeTrisB@data,3987	;volatile
  1683  000EC8  0012               	return		;funcret
  1684  000ECA                     __end_of_writeTrisB:
  1685                           	opt stack 0
  1686                           tblptru	equ	0xFF8
  1687                           tblptrh	equ	0xFF7
  1688                           tblptrl	equ	0xFF6
  1689                           tablat	equ	0xFF5
  1690                           prodh	equ	0xFF4
  1691                           prodl	equ	0xFF3
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           postdec1	equ	0xFE5
  1695                           fsr1h	equ	0xFE2
  1696                           fsr1l	equ	0xFE1
  1697                           indf2	equ	0xFDF
  1698                           fsr2h	equ	0xFDA
  1699                           fsr2l	equ	0xFD9
  1700                           status	equ	0xFD8
  1701                           
  1702 ;; *************** function _writeHex *****************
  1703 ;; Defined at:
  1704 ;;		line 93 in file "receiver.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  data            1    wreg     unsigned char 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  data            1   18[COMRAM] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1718 ;;      Params:         0       0       0       0       0       0       0       0       0
  1719 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1720 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1721 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1722 ;;Total ram usage:        4 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    2
  1725 ;; This function calls:
  1726 ;;		_writeChar
  1727 ;; This function is called by:
  1728 ;;		_onData
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text7
  1733  000C86                     __ptext7:
  1734                           	opt stack 0
  1735  000C86                     _writeHex:
  1736                           	opt stack 27
  1737                           
  1738                           ;incstack = 0
  1739                           ;writeHex@data stored from wreg
  1740  000C86  6E13               	movwf	writeHex@data,c
  1741                           
  1742                           ;receiver.c: 95: writeChar(hex[data >> 4]);
  1743  000C88  C013  F010         	movff	writeHex@data,??_writeHex
  1744  000C8C  3A10               	swapf	??_writeHex,f,c
  1745  000C8E  0E0F               	movlw	15
  1746  000C90  1610               	andwf	??_writeHex,f,c
  1747  000C92  5010               	movf	??_writeHex,w,c
  1748  000C94  2429               	addwf	_hex,w,c
  1749  000C96  6E11               	movwf	(??_writeHex+1)& (0+255),c
  1750  000C98  0E00               	movlw	0
  1751  000C9A  202A               	addwfc	_hex+1,w,c
  1752  000C9C  6E12               	movwf	(??_writeHex+2)& (0+255),c
  1753  000C9E  C011  FFF6         	movff	??_writeHex+1,tblptrl
  1754  000CA2  C012  FFF7         	movff	??_writeHex+2,tblptrh
  1755  000CA6                     	if	0	;tblptru may be non-zero
  1756  000CA6                     	endif
  1757  000CA6                     	if	0	;tblptru may be non-zero
  1758  000CA6                     	endif
  1759  000CA6  0008               	tblrd		*
  1760  000CA8  50F5               	movf	tablat,w,c
  1761  000CAA  EC53  F007         	call	_writeChar
  1762                           
  1763                           ;receiver.c: 96: writeChar(hex[data & 0xf]);
  1764  000CAE  C013  F010         	movff	writeHex@data,??_writeHex
  1765  000CB2  0E0F               	movlw	15
  1766  000CB4  1610               	andwf	??_writeHex,f,c
  1767  000CB6  5010               	movf	??_writeHex,w,c
  1768  000CB8  2429               	addwf	_hex,w,c
  1769  000CBA  6E11               	movwf	(??_writeHex+1)& (0+255),c
  1770  000CBC  0E00               	movlw	0
  1771  000CBE  202A               	addwfc	_hex+1,w,c
  1772  000CC0  6E12               	movwf	(??_writeHex+2)& (0+255),c
  1773  000CC2  C011  FFF6         	movff	??_writeHex+1,tblptrl
  1774  000CC6  C012  FFF7         	movff	??_writeHex+2,tblptrh
  1775  000CCA                     	if	0	;tblptru may be non-zero
  1776  000CCA                     	endif
  1777  000CCA                     	if	0	;tblptru may be non-zero
  1778  000CCA                     	endif
  1779  000CCA  0008               	tblrd		*
  1780  000CCC  50F5               	movf	tablat,w,c
  1781  000CCE  EC53  F007         	call	_writeChar
  1782  000CD2  0012               	return		;funcret
  1783  000CD4                     __end_of_writeHex:
  1784                           	opt stack 0
  1785                           tblptru	equ	0xFF8
  1786                           tblptrh	equ	0xFF7
  1787                           tblptrl	equ	0xFF6
  1788                           tablat	equ	0xFF5
  1789                           prodh	equ	0xFF4
  1790                           prodl	equ	0xFF3
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           postdec1	equ	0xFE5
  1794                           fsr1h	equ	0xFE2
  1795                           fsr1l	equ	0xFE1
  1796                           indf2	equ	0xFDF
  1797                           fsr2h	equ	0xFDA
  1798                           fsr2l	equ	0xFD9
  1799                           status	equ	0xFD8
  1800                           
  1801 ;; *************** function _writeAddressPhysical *****************
  1802 ;; Defined at:
  1803 ;;		line 184 in file "receiver.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  adr             2   18[COMRAM] unsigned int 
  1806 ;;  value           1   20[COMRAM] unsigned char 
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;		None
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg, status,2, status,0, cstack
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1818 ;;      Params:         3       0       0       0       0       0       0       0       0
  1819 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1821 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1822 ;;Total ram usage:        3 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; Hardware stack levels required when called:    3
  1825 ;; This function calls:
  1826 ;;		_logicAddressToPhysical
  1827 ;;		_logicDataToPhysical
  1828 ;;		_writeAddress
  1829 ;; This function is called by:
  1830 ;;		_onData
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           	psect	text8
  1835  000DC6                     __ptext8:
  1836                           	opt stack 0
  1837  000DC6                     _writeAddressPhysical:
  1838                           	opt stack 26
  1839                           
  1840                           ;receiver.c: 186: adr = logicAddressToPhysical(adr);
  1841                           
  1842                           ;incstack = 0
  1843  000DC6  C013  F00F         	movff	writeAddressPhysical@adr,logicAddressToPhysical@adr0
  1844  000DCA  C014  F010         	movff	writeAddressPhysical@adr+1,logicAddressToPhysical@adr0+1
  1845  000DCE  EC1A  F006         	call	_logicAddressToPhysical	;wreg free
  1846  000DD2  C00F  F013         	movff	?_logicAddressToPhysical,writeAddressPhysical@adr
  1847  000DD6  C010  F014         	movff	?_logicAddressToPhysical+1,writeAddressPhysical@adr+1
  1848                           
  1849                           ;receiver.c: 187: value = logicDataToPhysical(value);
  1850  000DDA  5015               	movf	writeAddressPhysical@value,w,c
  1851  000DDC  ECFA  F006         	call	_logicDataToPhysical
  1852  000DE0  6E15               	movwf	writeAddressPhysical@value,c
  1853                           
  1854                           ;receiver.c: 188: writeAddress(adr, value);
  1855  000DE2  C013  F010         	movff	writeAddressPhysical@adr,writeAddress@adr
  1856  000DE6  C014  F011         	movff	writeAddressPhysical@adr+1,writeAddress@adr+1
  1857  000DEA  C015  F012         	movff	writeAddressPhysical@value,writeAddress@value
  1858  000DEE  EC90  F006         	call	_writeAddress	;wreg free
  1859  000DF2  0012               	return		;funcret
  1860  000DF4                     __end_of_writeAddressPhysical:
  1861                           	opt stack 0
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           tblptrl	equ	0xFF6
  1865                           tablat	equ	0xFF5
  1866                           prodh	equ	0xFF4
  1867                           prodl	equ	0xFF3
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1h	equ	0xFE2
  1872                           fsr1l	equ	0xFE1
  1873                           indf2	equ	0xFDF
  1874                           fsr2h	equ	0xFDA
  1875                           fsr2l	equ	0xFD9
  1876                           status	equ	0xFD8
  1877                           
  1878 ;; *************** function _writeAddress *****************
  1879 ;; Defined at:
  1880 ;;		line 164 in file "receiver.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  adr             2   15[COMRAM] unsigned int 
  1883 ;;  value           1   17[COMRAM] unsigned char 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1895 ;;      Params:         3       0       0       0       0       0       0       0       0
  1896 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1898 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1899 ;;Total ram usage:        3 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    2
  1902 ;; This function calls:
  1903 ;;		_writePortA
  1904 ;;		_writePortB
  1905 ;;		_writePortC
  1906 ;;		_writePortD
  1907 ;;		_writePortE
  1908 ;;		_writeTrisA
  1909 ;; This function is called by:
  1910 ;;		_writeAddressPhysical
  1911 ;;		_onData
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text9
  1916  000D20                     __ptext9:
  1917                           	opt stack 0
  1918  000D20                     _writeAddress:
  1919                           	opt stack 26
  1920                           
  1921                           ;receiver.c: 166: writeTrisA(0);
  1922                           
  1923                           ;incstack = 0
  1924  000D20  0E00               	movlw	0
  1925  000D22  EC65  F007         	call	_writeTrisA
  1926                           
  1927                           ;receiver.c: 167: writePortA(value);
  1928  000D26  5012               	movf	writeAddress@value,w,c
  1929  000D28  EC6D  F007         	call	_writePortA
  1930                           
  1931                           ;receiver.c: 168: writePortC(0xff);
  1932  000D2C  0EFF               	movlw	255
  1933  000D2E  EC75  F007         	call	_writePortC
  1934                           
  1935                           ;receiver.c: 169: writePortB(adr & 0xff);
  1936  000D32  5010               	movf	writeAddress@adr,w,c
  1937  000D34  EC79  F007         	call	_writePortB
  1938                           
  1939                           ;receiver.c: 170: writePortD((adr >> 8) & 0xff);
  1940  000D38  5011               	movf	writeAddress@adr+1,w,c
  1941  000D3A  EC71  F007         	call	_writePortD
  1942                           
  1943                           ;receiver.c: 173: writePortE(2 | 4);
  1944  000D3E  0E06               	movlw	6
  1945  000D40  EC69  F007         	call	_writePortE
  1946                           
  1947                           ;receiver.c: 174: writePortC(2 | 0x40);
  1948  000D44  0E42               	movlw	66
  1949  000D46  EC75  F007         	call	_writePortC
  1950                           
  1951                           ;receiver.c: 177: writePortC(0xff);
  1952  000D4A  0EFF               	movlw	255
  1953  000D4C  EC75  F007         	call	_writePortC
  1954                           
  1955                           ;receiver.c: 178: writePortE(0xff);
  1956  000D50  0EFF               	movlw	255
  1957  000D52  EC69  F007         	call	_writePortE
  1958                           
  1959                           ;receiver.c: 181: writeTrisA(0xff);
  1960  000D56  0EFF               	movlw	255
  1961  000D58  EC65  F007         	call	_writeTrisA
  1962  000D5C  0012               	return		;funcret
  1963  000D5E                     __end_of_writeAddress:
  1964                           	opt stack 0
  1965                           tblptru	equ	0xFF8
  1966                           tblptrh	equ	0xFF7
  1967                           tblptrl	equ	0xFF6
  1968                           tablat	equ	0xFF5
  1969                           prodh	equ	0xFF4
  1970                           prodl	equ	0xFF3
  1971                           postinc0	equ	0xFEE
  1972                           wreg	equ	0xFE8
  1973                           postdec1	equ	0xFE5
  1974                           fsr1h	equ	0xFE2
  1975                           fsr1l	equ	0xFE1
  1976                           indf2	equ	0xFDF
  1977                           fsr2h	equ	0xFDA
  1978                           fsr2l	equ	0xFD9
  1979                           status	equ	0xFD8
  1980                           
  1981 ;; *************** function _writeTrisA *****************
  1982 ;; Defined at:
  1983 ;;		line 145 in file "main.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;  data            1    wreg     unsigned char 
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;  data            1   14[COMRAM] unsigned char 
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  1    wreg      void 
  1990 ;; Registers used:
  1991 ;;		wreg
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1997 ;;      Params:         0       0       0       0       0       0       0       0       0
  1998 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2000 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2001 ;;Total ram usage:        1 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    1
  2004 ;; This function calls:
  2005 ;;		Nothing
  2006 ;; This function is called by:
  2007 ;;		_writeAddress
  2008 ;;		_onData
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012                           	psect	text10
  2013  000ECA                     __ptext10:
  2014                           	opt stack 0
  2015  000ECA                     _writeTrisA:
  2016                           	opt stack 28
  2017                           
  2018                           ;incstack = 0
  2019                           ;writeTrisA@data stored from wreg
  2020  000ECA  6E0F               	movwf	writeTrisA@data,c
  2021                           
  2022                           ;main.c: 147: TRISA = data;
  2023  000ECC  C00F  FF92         	movff	writeTrisA@data,3986	;volatile
  2024  000ED0  0012               	return		;funcret
  2025  000ED2                     __end_of_writeTrisA:
  2026                           	opt stack 0
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           prodh	equ	0xFF4
  2032                           prodl	equ	0xFF3
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postdec1	equ	0xFE5
  2036                           fsr1h	equ	0xFE2
  2037                           fsr1l	equ	0xFE1
  2038                           indf2	equ	0xFDF
  2039                           fsr2h	equ	0xFDA
  2040                           fsr2l	equ	0xFD9
  2041                           status	equ	0xFD8
  2042                           
  2043 ;; *************** function _writePortE *****************
  2044 ;; Defined at:
  2045 ;;		line 140 in file "main.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  data            1    wreg     unsigned char 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  data            1   14[COMRAM] unsigned char 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2059 ;;      Params:         0       0       0       0       0       0       0       0       0
  2060 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2062 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2063 ;;Total ram usage:        1 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    1
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_writeAddress
  2070 ;;		_onData
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text11
  2075  000ED2                     __ptext11:
  2076                           	opt stack 0
  2077  000ED2                     _writePortE:
  2078                           	opt stack 28
  2079                           
  2080                           ;incstack = 0
  2081                           ;writePortE@data stored from wreg
  2082  000ED2  6E0F               	movwf	writePortE@data,c
  2083                           
  2084                           ;main.c: 142: PORTE = data;
  2085  000ED4  C00F  FF84         	movff	writePortE@data,3972	;volatile
  2086  000ED8  0012               	return		;funcret
  2087  000EDA                     __end_of_writePortE:
  2088                           	opt stack 0
  2089                           tblptru	equ	0xFF8
  2090                           tblptrh	equ	0xFF7
  2091                           tblptrl	equ	0xFF6
  2092                           tablat	equ	0xFF5
  2093                           prodh	equ	0xFF4
  2094                           prodl	equ	0xFF3
  2095                           postinc0	equ	0xFEE
  2096                           wreg	equ	0xFE8
  2097                           postdec1	equ	0xFE5
  2098                           fsr1h	equ	0xFE2
  2099                           fsr1l	equ	0xFE1
  2100                           indf2	equ	0xFDF
  2101                           fsr2h	equ	0xFDA
  2102                           fsr2l	equ	0xFD9
  2103                           status	equ	0xFD8
  2104                           
  2105 ;; *************** function _writePortA *****************
  2106 ;; Defined at:
  2107 ;;		line 120 in file "main.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  data            1    wreg     unsigned char 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  data            1   14[COMRAM] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2121 ;;      Params:         0       0       0       0       0       0       0       0       0
  2122 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2123 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2124 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2125 ;;Total ram usage:        1 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    1
  2128 ;; This function calls:
  2129 ;;		Nothing
  2130 ;; This function is called by:
  2131 ;;		_writeAddress
  2132 ;;		_onData
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text12
  2137  000EDA                     __ptext12:
  2138                           	opt stack 0
  2139  000EDA                     _writePortA:
  2140                           	opt stack 28
  2141                           
  2142                           ;incstack = 0
  2143                           ;writePortA@data stored from wreg
  2144  000EDA  6E0F               	movwf	writePortA@data,c
  2145                           
  2146                           ;main.c: 122: PORTA = data;
  2147  000EDC  C00F  FF80         	movff	writePortA@data,3968	;volatile
  2148  000EE0  0012               	return		;funcret
  2149  000EE2                     __end_of_writePortA:
  2150                           	opt stack 0
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           postinc0	equ	0xFEE
  2158                           wreg	equ	0xFE8
  2159                           postdec1	equ	0xFE5
  2160                           fsr1h	equ	0xFE2
  2161                           fsr1l	equ	0xFE1
  2162                           indf2	equ	0xFDF
  2163                           fsr2h	equ	0xFDA
  2164                           fsr2l	equ	0xFD9
  2165                           status	equ	0xFD8
  2166                           
  2167 ;; *************** function _logicDataToPhysical *****************
  2168 ;; Defined at:
  2169 ;;		line 136 in file "receiver.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  value0          1    wreg     unsigned char 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;  value0          1   15[COMRAM] unsigned char 
  2174 ;;  value           1   14[COMRAM] unsigned char 
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      unsigned char 
  2177 ;; Registers used:
  2178 ;;		wreg, status,2, status,0
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2184 ;;      Params:         0       0       0       0       0       0       0       0       0
  2185 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2186 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2187 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2188 ;;Total ram usage:        2 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    1
  2191 ;; This function calls:
  2192 ;;		Nothing
  2193 ;; This function is called by:
  2194 ;;		_writeAddressPhysical
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           	psect	text13
  2199  000DF4                     __ptext13:
  2200                           	opt stack 0
  2201  000DF4                     _logicDataToPhysical:
  2202                           	opt stack 27
  2203                           
  2204                           ;incstack = 0
  2205                           ;logicDataToPhysical@value0 stored from wreg
  2206  000DF4  6E10               	movwf	logicDataToPhysical@value0,c
  2207                           
  2208                           ;receiver.c: 138: uint8_t value = 0;
  2209  000DF6  0E00               	movlw	0
  2210  000DF8  6E0F               	movwf	logicDataToPhysical@value,c
  2211                           
  2212                           ;receiver.c: 139: if (value0 & (1 << 0)) value |= 1 << 3;
  2213  000DFA  B010               	btfsc	logicDataToPhysical@value0,0,c
  2214  000DFC  860F               	bsf	logicDataToPhysical@value,3,c
  2215                           
  2216                           ;receiver.c: 140: if (value0 & (1 << 1)) value |= 1 << 4;
  2217  000DFE  B210               	btfsc	logicDataToPhysical@value0,1,c
  2218  000E00  880F               	bsf	logicDataToPhysical@value,4,c
  2219                           
  2220                           ;receiver.c: 141: if (value0 & (1 << 2)) value |= 1 << 2;
  2221  000E02  B410               	btfsc	logicDataToPhysical@value0,2,c
  2222  000E04  840F               	bsf	logicDataToPhysical@value,2,c
  2223                           
  2224                           ;receiver.c: 142: if (value0 & (1 << 3)) value |= 1 << 5;
  2225  000E06  B610               	btfsc	logicDataToPhysical@value0,3,c
  2226  000E08  8A0F               	bsf	logicDataToPhysical@value,5,c
  2227                           
  2228                           ;receiver.c: 143: if (value0 & (1 << 4)) value |= 1 << 1;
  2229  000E0A  B810               	btfsc	logicDataToPhysical@value0,4,c
  2230  000E0C  820F               	bsf	logicDataToPhysical@value,1,c
  2231                           
  2232                           ;receiver.c: 144: if (value0 & (1 << 5)) value |= 1 << 6;
  2233  000E0E  BA10               	btfsc	logicDataToPhysical@value0,5,c
  2234  000E10  8C0F               	bsf	logicDataToPhysical@value,6,c
  2235                           
  2236                           ;receiver.c: 145: if (value0 & (1 << 6)) value |= 1 << 0;
  2237  000E12  BC10               	btfsc	logicDataToPhysical@value0,6,c
  2238  000E14  800F               	bsf	logicDataToPhysical@value,0,c
  2239                           
  2240                           ;receiver.c: 146: if (value0 & (1 << 7)) value |= 1 << 7;
  2241  000E16  BE10               	btfsc	logicDataToPhysical@value0,7,c
  2242  000E18  8E0F               	bsf	logicDataToPhysical@value,7,c
  2243                           
  2244                           ;receiver.c: 147: return value;
  2245  000E1A  500F               	movf	logicDataToPhysical@value,w,c
  2246  000E1C  0012               	return	
  2247  000E1E                     __end_of_logicDataToPhysical:
  2248                           	opt stack 0
  2249                           tblptru	equ	0xFF8
  2250                           tblptrh	equ	0xFF7
  2251                           tblptrl	equ	0xFF6
  2252                           tablat	equ	0xFF5
  2253                           prodh	equ	0xFF4
  2254                           prodl	equ	0xFF3
  2255                           postinc0	equ	0xFEE
  2256                           wreg	equ	0xFE8
  2257                           postdec1	equ	0xFE5
  2258                           fsr1h	equ	0xFE2
  2259                           fsr1l	equ	0xFE1
  2260                           indf2	equ	0xFDF
  2261                           fsr2h	equ	0xFDA
  2262                           fsr2l	equ	0xFD9
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _logicAddressToPhysical *****************
  2266 ;; Defined at:
  2267 ;;		line 114 in file "receiver.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  adr0            2   14[COMRAM] unsigned int 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  adr             2   16[COMRAM] unsigned int 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  2   14[COMRAM] unsigned int 
  2274 ;; Registers used:
  2275 ;;		wreg, status,2, status,0
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2281 ;;      Params:         2       0       0       0       0       0       0       0       0
  2282 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2284 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2285 ;;Total ram usage:        4 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    1
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_writeAddressPhysical
  2292 ;;		_readAddressPhysical
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text14
  2297  000C34                     __ptext14:
  2298                           	opt stack 0
  2299  000C34                     _logicAddressToPhysical:
  2300                           	opt stack 27
  2301                           
  2302                           ;receiver.c: 116: uint16_t adr = 0;
  2303                           
  2304                           ;incstack = 0
  2305  000C34  0E00               	movlw	0
  2306  000C36  6E12               	movwf	logicAddressToPhysical@adr+1,c
  2307  000C38  0E00               	movlw	0
  2308  000C3A  6E11               	movwf	logicAddressToPhysical@adr,c
  2309                           
  2310                           ;receiver.c: 117: if (adr0 & (1 << 0)) adr |= 1 << 0;
  2311  000C3C  B00F               	btfsc	logicAddressToPhysical@adr0,0,c
  2312  000C3E  8011               	bsf	logicAddressToPhysical@adr,0,c
  2313                           
  2314                           ;receiver.c: 118: if (adr0 & (1 << 1)) adr |= 1 << 12;
  2315  000C40  B20F               	btfsc	logicAddressToPhysical@adr0,1,c
  2316  000C42  8812               	bsf	logicAddressToPhysical@adr+1,4,c
  2317                           
  2318                           ;receiver.c: 119: if (adr0 & (1 << 2)) adr |= 1 << 13;
  2319  000C44  B40F               	btfsc	logicAddressToPhysical@adr0,2,c
  2320  000C46  8A12               	bsf	logicAddressToPhysical@adr+1,5,c
  2321                           
  2322                           ;receiver.c: 120: if (adr0 & (1 << 3)) adr |= 1 << 14;
  2323  000C48  B60F               	btfsc	logicAddressToPhysical@adr0,3,c
  2324  000C4A  8C12               	bsf	logicAddressToPhysical@adr+1,6,c
  2325                           
  2326                           ;receiver.c: 121: if (adr0 & (1 << 4)) adr |= 1 << 10;
  2327  000C4C  B80F               	btfsc	logicAddressToPhysical@adr0,4,c
  2328  000C4E  8412               	bsf	logicAddressToPhysical@adr+1,2,c
  2329                           
  2330                           ;receiver.c: 122: if (adr0 & (1 << 5)) adr |= 1 << 2;
  2331  000C50  BA0F               	btfsc	logicAddressToPhysical@adr0,5,c
  2332  000C52  8411               	bsf	logicAddressToPhysical@adr,2,c
  2333                           
  2334                           ;receiver.c: 123: if (adr0 & (1 << 6)) adr |= 1 << 3;
  2335  000C54  BC0F               	btfsc	logicAddressToPhysical@adr0,6,c
  2336  000C56  8611               	bsf	logicAddressToPhysical@adr,3,c
  2337                           
  2338                           ;receiver.c: 124: if (adr0 & (1 << 7)) adr |= 1 << 11;
  2339  000C58  BE0F               	btfsc	logicAddressToPhysical@adr0,7,c
  2340  000C5A  8612               	bsf	logicAddressToPhysical@adr+1,3,c
  2341                           
  2342                           ;receiver.c: 125: if (adr0 & (1 << 8)) adr |= 1 << 8;
  2343  000C5C  B010               	btfsc	logicAddressToPhysical@adr0+1,0,c
  2344  000C5E  8012               	bsf	logicAddressToPhysical@adr+1,0,c
  2345                           
  2346                           ;receiver.c: 126: if (adr0 & (1 << 9)) adr |= 1 << 6;
  2347  000C60  B210               	btfsc	logicAddressToPhysical@adr0+1,1,c
  2348  000C62  8C11               	bsf	logicAddressToPhysical@adr,6,c
  2349                           
  2350                           ;receiver.c: 127: if (adr0 & (1 << 10)) adr |= 1 << 1;
  2351  000C64  B410               	btfsc	logicAddressToPhysical@adr0+1,2,c
  2352  000C66  8211               	bsf	logicAddressToPhysical@adr,1,c
  2353                           
  2354                           ;receiver.c: 128: if (adr0 & (1 << 11)) adr |= 1 << 7;
  2355  000C68  B610               	btfsc	logicAddressToPhysical@adr0+1,3,c
  2356  000C6A  8E11               	bsf	logicAddressToPhysical@adr,7,c
  2357                           
  2358                           ;receiver.c: 129: if (adr0 & (1 << 12)) adr |= 1 << 4;
  2359  000C6C  B810               	btfsc	logicAddressToPhysical@adr0+1,4,c
  2360  000C6E  8811               	bsf	logicAddressToPhysical@adr,4,c
  2361                           
  2362                           ;receiver.c: 130: if (adr0 & (1 << 13)) adr |= 1 << 5;
  2363  000C70  BA10               	btfsc	logicAddressToPhysical@adr0+1,5,c
  2364  000C72  8A11               	bsf	logicAddressToPhysical@adr,5,c
  2365                           
  2366                           ;receiver.c: 131: if (adr0 & (1 << 14)) adr |= 1 << 9;
  2367  000C74  BC10               	btfsc	logicAddressToPhysical@adr0+1,6,c
  2368  000C76  8212               	bsf	logicAddressToPhysical@adr+1,1,c
  2369                           
  2370                           ;receiver.c: 132: if (adr0 & (1 << 15)) adr |= 1 << 15;
  2371  000C78  BE10               	btfsc	logicAddressToPhysical@adr0+1,7,c
  2372  000C7A  8E12               	bsf	logicAddressToPhysical@adr+1,7,c
  2373                           
  2374                           ;receiver.c: 133: return adr;
  2375  000C7C  C011  F00F         	movff	logicAddressToPhysical@adr,?_logicAddressToPhysical
  2376  000C80  C012  F010         	movff	logicAddressToPhysical@adr+1,?_logicAddressToPhysical+1
  2377  000C84  0012               	return	
  2378  000C86                     __end_of_logicAddressToPhysical:
  2379                           	opt stack 0
  2380                           tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           prodh	equ	0xFF4
  2385                           prodl	equ	0xFF3
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           postdec1	equ	0xFE5
  2389                           fsr1h	equ	0xFE2
  2390                           fsr1l	equ	0xFE1
  2391                           indf2	equ	0xFDF
  2392                           fsr2h	equ	0xFDA
  2393                           fsr2l	equ	0xFD9
  2394                           status	equ	0xFD8
  2395                           
  2396 ;; *************** function _readPort *****************
  2397 ;; Defined at:
  2398 ;;		line 99 in file "receiver.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      void 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2412 ;;      Params:         0       0       0       0       0       0       0       0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2415 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    2
  2419 ;; This function calls:
  2420 ;;		_readPortA
  2421 ;;		_readPortB
  2422 ;;		_readPortC
  2423 ;;		_readPortD
  2424 ;;		_readPortE
  2425 ;; This function is called by:
  2426 ;;		_onData
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text15
  2431  000CD4                     __ptext15:
  2432                           	opt stack 0
  2433  000CD4                     _readPort:
  2434                           	opt stack 27
  2435                           
  2436                           ;receiver.c: 101: if (port == PORT_A) {
  2437                           
  2438                           ;incstack = 0
  2439  000CD4  5022               	movf	_port,w,c
  2440  000CD6  A4D8               	btfss	status,2,c
  2441  000CD8  D004               	goto	l1177
  2442                           
  2443                           ;receiver.c: 102: value = readPortA();
  2444  000CDA  EC85  F007         	call	_readPortA	;wreg free
  2445  000CDE  6E27               	movwf	_value,c
  2446                           
  2447                           ;receiver.c: 103: } else if (port == PORT_B) {
  2448  000CE0  0012               	return	
  2449  000CE2                     l1177:
  2450  000CE2  0422               	decf	_port,w,c
  2451  000CE4  A4D8               	btfss	status,2,c
  2452  000CE6  D004               	goto	l1181
  2453                           
  2454                           ;receiver.c: 104: value = readPortB();
  2455  000CE8  EC83  F007         	call	_readPortB	;wreg free
  2456  000CEC  6E27               	movwf	_value,c
  2457                           
  2458                           ;receiver.c: 105: } else if (port == PORT_C) {
  2459  000CEE  0012               	return	
  2460  000CF0                     l1181:
  2461  000CF0  0E02               	movlw	2
  2462  000CF2  1822               	xorwf	_port,w,c
  2463  000CF4  A4D8               	btfss	status,2,c
  2464  000CF6  D004               	goto	l1185
  2465                           
  2466                           ;receiver.c: 106: value = readPortC();
  2467  000CF8  EC81  F007         	call	_readPortC	;wreg free
  2468  000CFC  6E27               	movwf	_value,c
  2469                           
  2470                           ;receiver.c: 107: } else if (port == PORT_D) {
  2471  000CFE  0012               	return	
  2472  000D00                     l1185:
  2473  000D00  0E03               	movlw	3
  2474  000D02  1822               	xorwf	_port,w,c
  2475  000D04  A4D8               	btfss	status,2,c
  2476  000D06  D004               	goto	l1189
  2477                           
  2478                           ;receiver.c: 108: value = readPortD();
  2479  000D08  EC7F  F007         	call	_readPortD	;wreg free
  2480  000D0C  6E27               	movwf	_value,c
  2481                           
  2482                           ;receiver.c: 109: } else if (port == PORT_E) {
  2483  000D0E  0012               	return	
  2484  000D10                     l1189:
  2485  000D10  0E04               	movlw	4
  2486  000D12  1822               	xorwf	_port,w,c
  2487  000D14  A4D8               	btfss	status,2,c
  2488  000D16  0012               	return	
  2489                           
  2490                           ;receiver.c: 110: value = readPortE();
  2491  000D18  EC7D  F007         	call	_readPortE	;wreg free
  2492  000D1C  6E27               	movwf	_value,c
  2493  000D1E  0012               	return	
  2494  000D20                     __end_of_readPort:
  2495                           	opt stack 0
  2496                           tblptru	equ	0xFF8
  2497                           tblptrh	equ	0xFF7
  2498                           tblptrl	equ	0xFF6
  2499                           tablat	equ	0xFF5
  2500                           prodh	equ	0xFF4
  2501                           prodl	equ	0xFF3
  2502                           postinc0	equ	0xFEE
  2503                           wreg	equ	0xFE8
  2504                           postdec1	equ	0xFE5
  2505                           fsr1h	equ	0xFE2
  2506                           fsr1l	equ	0xFE1
  2507                           indf2	equ	0xFDF
  2508                           fsr2h	equ	0xFDA
  2509                           fsr2l	equ	0xFD9
  2510                           status	equ	0xFD8
  2511                           
  2512 ;; *************** function _readPortE *****************
  2513 ;; Defined at:
  2514 ;;		line 191 in file "main.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;		None
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;		None
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      unsigned char 
  2521 ;; Registers used:
  2522 ;;		wreg, status,2
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2528 ;;      Params:         0       0       0       0       0       0       0       0       0
  2529 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2530 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2531 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2532 ;;Total ram usage:        0 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    1
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_readPort
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	text16
  2543  000EFA                     __ptext16:
  2544                           	opt stack 0
  2545  000EFA                     _readPortE:
  2546                           	opt stack 27
  2547                           
  2548                           ;main.c: 193: return PORTE;
  2549                           
  2550                           ;incstack = 0
  2551  000EFA  5084               	movf	3972,w,c	;volatile
  2552  000EFC  0012               	return	
  2553  000EFE                     __end_of_readPortE:
  2554                           	opt stack 0
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           tblptrl	equ	0xFF6
  2558                           tablat	equ	0xFF5
  2559                           prodh	equ	0xFF4
  2560                           prodl	equ	0xFF3
  2561                           postinc0	equ	0xFEE
  2562                           wreg	equ	0xFE8
  2563                           postdec1	equ	0xFE5
  2564                           fsr1h	equ	0xFE2
  2565                           fsr1l	equ	0xFE1
  2566                           indf2	equ	0xFDF
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _readPortD *****************
  2572 ;; Defined at:
  2573 ;;		line 186 in file "main.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;		None
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;		None
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      unsigned char 
  2580 ;; Registers used:
  2581 ;;		wreg, status,2
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2587 ;;      Params:         0       0       0       0       0       0       0       0       0
  2588 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2590 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2591 ;;Total ram usage:        0 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:    1
  2594 ;; This function calls:
  2595 ;;		Nothing
  2596 ;; This function is called by:
  2597 ;;		_readPort
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text17
  2602  000EFE                     __ptext17:
  2603                           	opt stack 0
  2604  000EFE                     _readPortD:
  2605                           	opt stack 27
  2606                           
  2607                           ;main.c: 188: return PORTD;
  2608                           
  2609                           ;incstack = 0
  2610  000EFE  5083               	movf	3971,w,c	;volatile
  2611  000F00  0012               	return	
  2612  000F02                     __end_of_readPortD:
  2613                           	opt stack 0
  2614                           tblptru	equ	0xFF8
  2615                           tblptrh	equ	0xFF7
  2616                           tblptrl	equ	0xFF6
  2617                           tablat	equ	0xFF5
  2618                           prodh	equ	0xFF4
  2619                           prodl	equ	0xFF3
  2620                           postinc0	equ	0xFEE
  2621                           wreg	equ	0xFE8
  2622                           postdec1	equ	0xFE5
  2623                           fsr1h	equ	0xFE2
  2624                           fsr1l	equ	0xFE1
  2625                           indf2	equ	0xFDF
  2626                           fsr2h	equ	0xFDA
  2627                           fsr2l	equ	0xFD9
  2628                           status	equ	0xFD8
  2629                           
  2630 ;; *************** function _readPortC *****************
  2631 ;; Defined at:
  2632 ;;		line 181 in file "main.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;		None
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;		None
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      unsigned char 
  2639 ;; Registers used:
  2640 ;;		wreg, status,2
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2646 ;;      Params:         0       0       0       0       0       0       0       0       0
  2647 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2648 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2649 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2650 ;;Total ram usage:        0 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    1
  2653 ;; This function calls:
  2654 ;;		Nothing
  2655 ;; This function is called by:
  2656 ;;		_readPort
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text18
  2661  000F02                     __ptext18:
  2662                           	opt stack 0
  2663  000F02                     _readPortC:
  2664                           	opt stack 27
  2665                           
  2666                           ;main.c: 183: return PORTC;
  2667                           
  2668                           ;incstack = 0
  2669  000F02  5082               	movf	3970,w,c	;volatile
  2670  000F04  0012               	return	
  2671  000F06                     __end_of_readPortC:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           prodh	equ	0xFF4
  2678                           prodl	equ	0xFF3
  2679                           postinc0	equ	0xFEE
  2680                           wreg	equ	0xFE8
  2681                           postdec1	equ	0xFE5
  2682                           fsr1h	equ	0xFE2
  2683                           fsr1l	equ	0xFE1
  2684                           indf2	equ	0xFDF
  2685                           fsr2h	equ	0xFDA
  2686                           fsr2l	equ	0xFD9
  2687                           status	equ	0xFD8
  2688                           
  2689 ;; *************** function _readPortB *****************
  2690 ;; Defined at:
  2691 ;;		line 176 in file "main.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      unsigned char 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2705 ;;      Params:         0       0       0       0       0       0       0       0       0
  2706 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2708 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    1
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_readPort
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text19
  2720  000F06                     __ptext19:
  2721                           	opt stack 0
  2722  000F06                     _readPortB:
  2723                           	opt stack 27
  2724                           
  2725                           ;main.c: 178: return PORTB;
  2726                           
  2727                           ;incstack = 0
  2728  000F06  5081               	movf	3969,w,c	;volatile
  2729  000F08  0012               	return	
  2730  000F0A                     __end_of_readPortB:
  2731                           	opt stack 0
  2732                           tblptru	equ	0xFF8
  2733                           tblptrh	equ	0xFF7
  2734                           tblptrl	equ	0xFF6
  2735                           tablat	equ	0xFF5
  2736                           prodh	equ	0xFF4
  2737                           prodl	equ	0xFF3
  2738                           postinc0	equ	0xFEE
  2739                           wreg	equ	0xFE8
  2740                           postdec1	equ	0xFE5
  2741                           fsr1h	equ	0xFE2
  2742                           fsr1l	equ	0xFE1
  2743                           indf2	equ	0xFDF
  2744                           fsr2h	equ	0xFDA
  2745                           fsr2l	equ	0xFD9
  2746                           status	equ	0xFD8
  2747                           
  2748 ;; *************** function _readAddress *****************
  2749 ;; Defined at:
  2750 ;;		line 191 in file "receiver.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;  adr             2   15[COMRAM] unsigned int 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  d               1   17[COMRAM] unsigned char 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      unsigned char 
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, cstack
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2764 ;;      Params:         2       0       0       0       0       0       0       0       0
  2765 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2767 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2768 ;;Total ram usage:        3 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    2
  2771 ;; This function calls:
  2772 ;;		_readPortA
  2773 ;;		_writePortB
  2774 ;;		_writePortC
  2775 ;;		_writePortD
  2776 ;; This function is called by:
  2777 ;;		_onData
  2778 ;;		_readAddressPhysical
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           	psect	text20
  2783  000E48                     __ptext20:
  2784                           	opt stack 0
  2785  000E48                     _readAddress:
  2786                           	opt stack 27
  2787                           
  2788                           ;receiver.c: 193: uint8_t d;
  2789                           ;receiver.c: 195: writePortC(0xff);
  2790                           
  2791                           ;incstack = 0
  2792  000E48  0EFF               	movlw	255
  2793  000E4A  EC75  F007         	call	_writePortC
  2794                           
  2795                           ;receiver.c: 196: writePortB(adr & 0xff);
  2796  000E4E  5010               	movf	readAddress@adr,w,c
  2797  000E50  EC79  F007         	call	_writePortB
  2798                           
  2799                           ;receiver.c: 197: writePortD((adr >> 8) & 0xff);
  2800  000E54  5011               	movf	readAddress@adr+1,w,c
  2801  000E56  EC71  F007         	call	_writePortD
  2802                           
  2803                           ;receiver.c: 200: writePortC(0x40);
  2804  000E5A  0E40               	movlw	64
  2805  000E5C  EC75  F007         	call	_writePortC
  2806                           
  2807                           ;receiver.c: 202: d = readPortA();
  2808  000E60  EC85  F007         	call	_readPortA	;wreg free
  2809  000E64  6E12               	movwf	readAddress@d,c
  2810                           
  2811                           ;receiver.c: 204: writePortC(0xff);
  2812  000E66  0EFF               	movlw	255
  2813  000E68  EC75  F007         	call	_writePortC
  2814                           
  2815                           ;receiver.c: 206: return d;
  2816  000E6C  5012               	movf	readAddress@d,w,c
  2817  000E6E  0012               	return	
  2818  000E70                     __end_of_readAddress:
  2819                           	opt stack 0
  2820                           tblptru	equ	0xFF8
  2821                           tblptrh	equ	0xFF7
  2822                           tblptrl	equ	0xFF6
  2823                           tablat	equ	0xFF5
  2824                           prodh	equ	0xFF4
  2825                           prodl	equ	0xFF3
  2826                           postinc0	equ	0xFEE
  2827                           wreg	equ	0xFE8
  2828                           postdec1	equ	0xFE5
  2829                           fsr1h	equ	0xFE2
  2830                           fsr1l	equ	0xFE1
  2831                           indf2	equ	0xFDF
  2832                           fsr2h	equ	0xFDA
  2833                           fsr2l	equ	0xFD9
  2834                           status	equ	0xFD8
  2835                           
  2836 ;; *************** function _writePortD *****************
  2837 ;; Defined at:
  2838 ;;		line 135 in file "main.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  data            1    wreg     unsigned char 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  data            1   14[COMRAM] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2852 ;;      Params:         0       0       0       0       0       0       0       0       0
  2853 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2855 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2856 ;;Total ram usage:        1 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    1
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_writeAddress
  2863 ;;		_readAddress
  2864 ;;		_onData
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text21
  2869  000EE2                     __ptext21:
  2870                           	opt stack 0
  2871  000EE2                     _writePortD:
  2872                           	opt stack 28
  2873                           
  2874                           ;incstack = 0
  2875                           ;writePortD@data stored from wreg
  2876  000EE2  6E0F               	movwf	writePortD@data,c
  2877                           
  2878                           ;main.c: 137: PORTD = data;
  2879  000EE4  C00F  FF83         	movff	writePortD@data,3971	;volatile
  2880  000EE8  0012               	return		;funcret
  2881  000EEA                     __end_of_writePortD:
  2882                           	opt stack 0
  2883                           tblptru	equ	0xFF8
  2884                           tblptrh	equ	0xFF7
  2885                           tblptrl	equ	0xFF6
  2886                           tablat	equ	0xFF5
  2887                           prodh	equ	0xFF4
  2888                           prodl	equ	0xFF3
  2889                           postinc0	equ	0xFEE
  2890                           wreg	equ	0xFE8
  2891                           postdec1	equ	0xFE5
  2892                           fsr1h	equ	0xFE2
  2893                           fsr1l	equ	0xFE1
  2894                           indf2	equ	0xFDF
  2895                           fsr2h	equ	0xFDA
  2896                           fsr2l	equ	0xFD9
  2897                           status	equ	0xFD8
  2898                           
  2899 ;; *************** function _writePortC *****************
  2900 ;; Defined at:
  2901 ;;		line 130 in file "main.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  data            1    wreg     unsigned char 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  data            1   14[COMRAM] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2915 ;;      Params:         0       0       0       0       0       0       0       0       0
  2916 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2918 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2919 ;;Total ram usage:        1 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    1
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_writeAddress
  2926 ;;		_readAddress
  2927 ;;		_onData
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text22
  2932  000EEA                     __ptext22:
  2933                           	opt stack 0
  2934  000EEA                     _writePortC:
  2935                           	opt stack 28
  2936                           
  2937                           ;incstack = 0
  2938                           ;writePortC@data stored from wreg
  2939  000EEA  6E0F               	movwf	writePortC@data,c
  2940                           
  2941                           ;main.c: 132: PORTC = data;
  2942  000EEC  C00F  FF82         	movff	writePortC@data,3970	;volatile
  2943  000EF0  0012               	return		;funcret
  2944  000EF2                     __end_of_writePortC:
  2945                           	opt stack 0
  2946                           tblptru	equ	0xFF8
  2947                           tblptrh	equ	0xFF7
  2948                           tblptrl	equ	0xFF6
  2949                           tablat	equ	0xFF5
  2950                           prodh	equ	0xFF4
  2951                           prodl	equ	0xFF3
  2952                           postinc0	equ	0xFEE
  2953                           wreg	equ	0xFE8
  2954                           postdec1	equ	0xFE5
  2955                           fsr1h	equ	0xFE2
  2956                           fsr1l	equ	0xFE1
  2957                           indf2	equ	0xFDF
  2958                           fsr2h	equ	0xFDA
  2959                           fsr2l	equ	0xFD9
  2960                           status	equ	0xFD8
  2961                           
  2962 ;; *************** function _writePortB *****************
  2963 ;; Defined at:
  2964 ;;		line 125 in file "main.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  data            1    wreg     unsigned char 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  data            1   14[COMRAM] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2978 ;;      Params:         0       0       0       0       0       0       0       0       0
  2979 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2981 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2982 ;;Total ram usage:        1 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    1
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_writeAddress
  2989 ;;		_readAddress
  2990 ;;		_onData
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text23
  2995  000EF2                     __ptext23:
  2996                           	opt stack 0
  2997  000EF2                     _writePortB:
  2998                           	opt stack 28
  2999                           
  3000                           ;incstack = 0
  3001                           ;writePortB@data stored from wreg
  3002  000EF2  6E0F               	movwf	writePortB@data,c
  3003                           
  3004                           ;main.c: 127: PORTB = data;
  3005  000EF4  C00F  FF81         	movff	writePortB@data,3969	;volatile
  3006  000EF8  0012               	return		;funcret
  3007  000EFA                     __end_of_writePortB:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           postinc0	equ	0xFEE
  3016                           wreg	equ	0xFE8
  3017                           postdec1	equ	0xFE5
  3018                           fsr1h	equ	0xFE2
  3019                           fsr1l	equ	0xFE1
  3020                           indf2	equ	0xFDF
  3021                           fsr2h	equ	0xFDA
  3022                           fsr2l	equ	0xFD9
  3023                           status	equ	0xFD8
  3024                           
  3025 ;; *************** function _readPortA *****************
  3026 ;; Defined at:
  3027 ;;		line 171 in file "main.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      unsigned char 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3041 ;;      Params:         0       0       0       0       0       0       0       0       0
  3042 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3044 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3045 ;;Total ram usage:        0 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_readPort
  3052 ;;		_readAddress
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text24
  3057  000F0A                     __ptext24:
  3058                           	opt stack 0
  3059  000F0A                     _readPortA:
  3060                           	opt stack 27
  3061                           
  3062                           ;main.c: 173: return PORTA;
  3063                           
  3064                           ;incstack = 0
  3065  000F0A  5080               	movf	3968,w,c	;volatile
  3066  000F0C  0012               	return	
  3067  000F0E                     __end_of_readPortA:
  3068                           	opt stack 0
  3069                           tblptru	equ	0xFF8
  3070                           tblptrh	equ	0xFF7
  3071                           tblptrl	equ	0xFF6
  3072                           tablat	equ	0xFF5
  3073                           prodh	equ	0xFF4
  3074                           prodl	equ	0xFF3
  3075                           postinc0	equ	0xFEE
  3076                           wreg	equ	0xFE8
  3077                           postdec1	equ	0xFE5
  3078                           fsr1h	equ	0xFE2
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8
  3084                           
  3085 ;; *************** function _parseHex *****************
  3086 ;; Defined at:
  3087 ;;		line 76 in file "receiver.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  x               1    wreg     unsigned char 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  x               1   14[COMRAM] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      char 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3101 ;;      Params:         0       0       0       0       0       0       0       0       0
  3102 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3104 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3105 ;;Total ram usage:        1 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    1
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_onData
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text25
  3116  000E1E                     __ptext25:
  3117                           	opt stack 0
  3118  000E1E                     _parseHex:
  3119                           	opt stack 28
  3120                           
  3121                           ;incstack = 0
  3122                           ;parseHex@x stored from wreg
  3123  000E1E  6E0F               	movwf	parseHex@x,c
  3124                           
  3125                           ;receiver.c: 78: if (x >= '0' && x <= '9') {
  3126  000E20  0E2F               	movlw	47
  3127  000E22  640F               	cpfsgt	parseHex@x,c
  3128  000E24  D006               	goto	l1155
  3129  000E26  0E3A               	movlw	58
  3130  000E28  600F               	cpfslt	parseHex@x,c
  3131  000E2A  D003               	goto	l1155
  3132                           
  3133                           ;receiver.c: 79: return x - '0';
  3134  000E2C  500F               	movf	parseHex@x,w,c
  3135  000E2E  0FD0               	addlw	208
  3136  000E30  0012               	return	
  3137  000E32                     l1155:
  3138  000E32  0E60               	movlw	96
  3139  000E34  640F               	cpfsgt	parseHex@x,c
  3140  000E36  D006               	goto	l1163
  3141  000E38  0E67               	movlw	103
  3142  000E3A  600F               	cpfslt	parseHex@x,c
  3143  000E3C  D003               	goto	l1163
  3144                           
  3145                           ;receiver.c: 81: return x - 'a' + 10;
  3146  000E3E  500F               	movf	parseHex@x,w,c
  3147  000E40  0FA9               	addlw	169
  3148  000E42  0012               	return	
  3149  000E44                     l1163:
  3150                           
  3151                           ;receiver.c: 82: }
  3152                           ;receiver.c: 83: return -1;
  3153  000E44  0EFF               	movlw	255
  3154  000E46  0012               	return	
  3155  000E48                     __end_of_parseHex:
  3156                           	opt stack 0
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           postdec1	equ	0xFE5
  3166                           fsr1h	equ	0xFE2
  3167                           fsr1l	equ	0xFE1
  3168                           indf2	equ	0xFDF
  3169                           fsr2h	equ	0xFDA
  3170                           fsr2l	equ	0xFD9
  3171                           status	equ	0xFD8
  3172                           
  3173 ;; *************** function _error *****************
  3174 ;; Defined at:
  3175 ;;		line 86 in file "receiver.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;		None
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;		None
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  1    wreg      void 
  3182 ;; Registers used:
  3183 ;;		wreg, status,2, cstack
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3189 ;;      Params:         0       0       0       0       0       0       0       0       0
  3190 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3191 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3192 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3193 ;;Total ram usage:        0 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    2
  3196 ;; This function calls:
  3197 ;;		_writeChar
  3198 ;; This function is called by:
  3199 ;;		_onData
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           	psect	text26
  3204  000E9A                     __ptext26:
  3205                           	opt stack 0
  3206  000E9A                     _error:
  3207                           	opt stack 27
  3208                           
  3209                           ;receiver.c: 88: state = STATE_IDLE;
  3210                           
  3211                           ;incstack = 0
  3212  000E9A  0E00               	movlw	0
  3213  000E9C  6E28               	movwf	_state,c
  3214                           
  3215                           ;receiver.c: 89: writeChar('?');
  3216  000E9E  0E3F               	movlw	63
  3217  000EA0  EC53  F007         	call	_writeChar
  3218  000EA4  0012               	return		;funcret
  3219  000EA6                     __end_of_error:
  3220                           	opt stack 0
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodh	equ	0xFF4
  3226                           prodl	equ	0xFF3
  3227                           postinc0	equ	0xFEE
  3228                           wreg	equ	0xFE8
  3229                           postdec1	equ	0xFE5
  3230                           fsr1h	equ	0xFE2
  3231                           fsr1l	equ	0xFE1
  3232                           indf2	equ	0xFDF
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function _writeChar *****************
  3238 ;; Defined at:
  3239 ;;		line 206 in file "main.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  data            1    wreg     unsigned char 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  data            1   14[COMRAM] unsigned char 
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  1    wreg      void 
  3246 ;; Registers used:
  3247 ;;		wreg
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3253 ;;      Params:         0       0       0       0       0       0       0       0       0
  3254 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3256 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3257 ;;Total ram usage:        1 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    1
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		_error
  3264 ;;		_writeHex
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text27
  3269  000EA6                     __ptext27:
  3270                           	opt stack 0
  3271  000EA6                     _writeChar:
  3272                           	opt stack 27
  3273                           
  3274                           ;incstack = 0
  3275                           ;writeChar@data stored from wreg
  3276  000EA6  6E0F               	movwf	writeChar@data,c
  3277  000EA8                     l122:
  3278  000EA8  A2AC               	btfss	4012,1,c	;volatile
  3279  000EAA  D7FE               	goto	l122
  3280                           
  3281                           ;main.c: 209: TXREG1 = data;
  3282  000EAC  C00F  FFAD         	movff	writeChar@data,4013	;volatile
  3283  000EB0  0012               	return		;funcret
  3284  000EB2                     __end_of_writeChar:
  3285                           	opt stack 0
  3286                           tblptru	equ	0xFF8
  3287                           tblptrh	equ	0xFF7
  3288                           tblptrl	equ	0xFF6
  3289                           tablat	equ	0xFF5
  3290                           prodh	equ	0xFF4
  3291                           prodl	equ	0xFF3
  3292                           postinc0	equ	0xFEE
  3293                           wreg	equ	0xFE8
  3294                           postdec1	equ	0xFE5
  3295                           fsr1h	equ	0xFE2
  3296                           fsr1l	equ	0xFE1
  3297                           indf2	equ	0xFDF
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function _initUart *****************
  3303 ;; Defined at:
  3304 ;;		line 97 in file "main.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		wreg, status,2
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3318 ;;      Params:         0       0       0       0       0       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3321 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3322 ;;Total ram usage:        0 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    1
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_main
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text28
  3333  000E70                     __ptext28:
  3334                           	opt stack 0
  3335  000E70                     _initUart:
  3336                           	opt stack 29
  3337                           
  3338                           ;main.c: 99: TXSTA1bits.SYNC = 0;
  3339                           
  3340                           ;incstack = 0
  3341  000E70  98AC               	bcf	4012,4,c	;volatile
  3342                           
  3343                           ;main.c: 100: TXSTA1bits.TX9 = 0;
  3344  000E72  9CAC               	bcf	4012,6,c	;volatile
  3345                           
  3346                           ;main.c: 101: TXSTA1bits.TXEN = 1;
  3347  000E74  8AAC               	bsf	4012,5,c	;volatile
  3348                           
  3349                           ;main.c: 103: RCSTA1bits.RX9 = 0;
  3350  000E76  9CAB               	bcf	4011,6,c	;volatile
  3351                           
  3352                           ;main.c: 104: RCSTA1bits.CREN = 1;
  3353  000E78  88AB               	bsf	4011,4,c	;volatile
  3354                           
  3355                           ;main.c: 105: RCSTA1bits.SPEN = 1;
  3356  000E7A  8EAB               	bsf	4011,7,c	;volatile
  3357                           
  3358                           ;main.c: 107: BAUDCON1bits.BRG16 = 1;
  3359  000E7C  86B8               	bsf	4024,3,c	;volatile
  3360                           
  3361                           ;main.c: 108: TXSTA1bits.BRGH = 1;
  3362  000E7E  84AC               	bsf	4012,2,c	;volatile
  3363                           
  3364                           ;main.c: 109: SPBRG1 = 15;
  3365  000E80  0E0F               	movlw	15
  3366  000E82  6EAF               	movwf	4015,c	;volatile
  3367                           
  3368                           ;main.c: 112: RCONbits.IPEN = 1;
  3369  000E84  8ED0               	bsf	4048,7,c	;volatile
  3370                           
  3371                           ;main.c: 113: INTCONbits.GIE = 1;
  3372  000E86  8EF2               	bsf	intcon,7,c	;volatile
  3373                           
  3374                           ;main.c: 114: INTCONbits.PEIE = 1;
  3375  000E88  8CF2               	bsf	intcon,6,c	;volatile
  3376                           
  3377                           ;main.c: 117: PIE1bits.RCIE = 1;
  3378  000E8A  8A9D               	bsf	3997,5,c	;volatile
  3379  000E8C  0012               	return		;funcret
  3380  000E8E                     __end_of_initUart:
  3381                           	opt stack 0
  3382                           tblptru	equ	0xFF8
  3383                           tblptrh	equ	0xFF7
  3384                           tblptrl	equ	0xFF6
  3385                           tablat	equ	0xFF5
  3386                           prodh	equ	0xFF4
  3387                           prodl	equ	0xFF3
  3388                           intcon	equ	0xFF2
  3389                           postinc0	equ	0xFEE
  3390                           wreg	equ	0xFE8
  3391                           postdec1	equ	0xFE5
  3392                           fsr1h	equ	0xFE2
  3393                           fsr1l	equ	0xFE1
  3394                           indf2	equ	0xFDF
  3395                           fsr2h	equ	0xFDA
  3396                           fsr2l	equ	0xFD9
  3397                           status	equ	0xFD8
  3398                           
  3399 ;; *************** function _receiveData *****************
  3400 ;; Defined at:
  3401 ;;		line 84 in file "main.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;		None
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;		None
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3415 ;;      Params:         0       0       0       0       0       0       0       0       0
  3416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3417 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3418 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3419 ;;Total ram usage:       14 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		Interrupt level 2
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	intcode
  3429  000008                     __pintcode:
  3430                           	opt stack 0
  3431  000008                     _receiveData:
  3432                           	opt stack 26
  3433                           
  3434                           ;incstack = 0
  3435  000008  822B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3436  00000A  CFFA F001          	movff	pclath,??_receiveData
  3437  00000E  CFFB F002          	movff	pclatu,??_receiveData+1
  3438  000012  CFE9 F003          	movff	fsr0l,??_receiveData+2
  3439  000016  CFEA F004          	movff	fsr0h,??_receiveData+3
  3440  00001A  CFE1 F005          	movff	fsr1l,??_receiveData+4
  3441  00001E  CFE2 F006          	movff	fsr1h,??_receiveData+5
  3442  000022  CFD9 F007          	movff	fsr2l,??_receiveData+6
  3443  000026  CFDA F008          	movff	fsr2h,??_receiveData+7
  3444  00002A  CFF3 F009          	movff	prodl,??_receiveData+8
  3445  00002E  CFF4 F00A          	movff	prodh,??_receiveData+9
  3446  000032  CFF6 F00B          	movff	tblptrl,??_receiveData+10
  3447  000036  CFF7 F00C          	movff	tblptrh,??_receiveData+11
  3448  00003A  CFF8 F00D          	movff	tblptru,??_receiveData+12
  3449  00003E  CFF5 F00E          	movff	tablat,??_receiveData+13
  3450                           
  3451                           ;main.c: 85: if (RCSTA1bits.OERR == 1) {
  3452  000042  A2AB               	btfss	4011,1,c	;volatile
  3453  000044  D003               	goto	i2l61
  3454                           
  3455                           ;main.c: 86: RCSTA1bits.OERR = 0;
  3456  000046  92AB               	bcf	4011,1,c	;volatile
  3457                           
  3458                           ;main.c: 87: RCSTA1bits.CREN = 0;
  3459  000048  98AB               	bcf	4011,4,c	;volatile
  3460                           
  3461                           ;main.c: 88: RCSTA1bits.CREN = 1;
  3462  00004A  88AB               	bsf	4011,4,c	;volatile
  3463  00004C                     i2l61:
  3464                           
  3465                           ;main.c: 89: }
  3466                           ;main.c: 90: if (PIR1bits.RC1IF == 1) {
  3467  00004C  AA9E               	btfss	3998,5,c	;volatile
  3468  00004E  D013               	goto	i2l64
  3469                           
  3470                           ;main.c: 91: uartBuf[uartWriteIndex] = RCREG1;
  3471  000050  0E00               	movlw	low _uartBuf
  3472  000052  241D               	addwf	_uartWriteIndex,w,c	;volatile
  3473  000054  6ED9               	movwf	fsr2l,c
  3474  000056  0E02               	movlw	high _uartBuf
  3475  000058  201E               	addwfc	_uartWriteIndex+1,w,c	;volatile
  3476  00005A  6EDA               	movwf	fsr2h,c
  3477  00005C  CFAE FFDF          	movff	4014,indf2	;volatile
  3478                           
  3479                           ;main.c: 92: uartWriteIndex++;
  3480  000060  4A1D               	infsnz	_uartWriteIndex,f,c	;volatile
  3481  000062  2A1E               	incf	_uartWriteIndex+1,f,c	;volatile
  3482                           
  3483                           ;main.c: 93: if (uartWriteIndex == 1024) uartWriteIndex = 0;
  3484  000064  0E04               	movlw	4
  3485  000066  181E               	xorwf	_uartWriteIndex+1,w,c	;volatile
  3486  000068  101D               	iorwf	_uartWriteIndex,w,c	;volatile
  3487  00006A  A4D8               	btfss	status,2,c
  3488  00006C  D004               	goto	i2l64
  3489  00006E  0E00               	movlw	0
  3490  000070  6E1E               	movwf	_uartWriteIndex+1,c	;volatile
  3491  000072  0E00               	movlw	0
  3492  000074  6E1D               	movwf	_uartWriteIndex,c	;volatile
  3493  000076                     i2l64:
  3494  000076  C00E  FFF5         	movff	??_receiveData+13,tablat
  3495  00007A  C00D  FFF8         	movff	??_receiveData+12,tblptru
  3496  00007E  C00C  FFF7         	movff	??_receiveData+11,tblptrh
  3497  000082  C00B  FFF6         	movff	??_receiveData+10,tblptrl
  3498  000086  C00A  FFF4         	movff	??_receiveData+9,prodh
  3499  00008A  C009  FFF3         	movff	??_receiveData+8,prodl
  3500  00008E  C008  FFDA         	movff	??_receiveData+7,fsr2h
  3501  000092  C007  FFD9         	movff	??_receiveData+6,fsr2l
  3502  000096  C006  FFE2         	movff	??_receiveData+5,fsr1h
  3503  00009A  C005  FFE1         	movff	??_receiveData+4,fsr1l
  3504  00009E  C004  FFEA         	movff	??_receiveData+3,fsr0h
  3505  0000A2  C003  FFE9         	movff	??_receiveData+2,fsr0l
  3506  0000A6  C002  FFFB         	movff	??_receiveData+1,pclatu
  3507  0000AA  C001  FFFA         	movff	??_receiveData,pclath
  3508  0000AE  922B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3509  0000B0  0011               	retfie		f
  3510  0000B2                     __end_of_receiveData:
  3511                           	opt stack 0
  3512                           pclatu	equ	0xFFB
  3513                           pclath	equ	0xFFA
  3514                           tblptru	equ	0xFF8
  3515                           tblptrh	equ	0xFF7
  3516                           tblptrl	equ	0xFF6
  3517                           tablat	equ	0xFF5
  3518                           prodh	equ	0xFF4
  3519                           prodl	equ	0xFF3
  3520                           intcon	equ	0xFF2
  3521                           postinc0	equ	0xFEE
  3522                           fsr0h	equ	0xFEA
  3523                           fsr0l	equ	0xFE9
  3524                           wreg	equ	0xFE8
  3525                           postdec1	equ	0xFE5
  3526                           fsr1h	equ	0xFE2
  3527                           fsr1l	equ	0xFE1
  3528                           indf2	equ	0xFDF
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           pclatu	equ	0xFFB
  3533                           pclath	equ	0xFFA
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           postinc0	equ	0xFEE
  3542                           fsr0h	equ	0xFEA
  3543                           fsr0l	equ	0xFE9
  3544                           wreg	equ	0xFE8
  3545                           postdec1	equ	0xFE5
  3546                           fsr1h	equ	0xFE2
  3547                           fsr1l	equ	0xFE1
  3548                           indf2	equ	0xFDF
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553                           	psect	rparam
  3554  0000                     pclatu	equ	0xFFB
  3555                           pclath	equ	0xFFA
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           intcon	equ	0xFF2
  3563                           postinc0	equ	0xFEE
  3564                           fsr0h	equ	0xFEA
  3565                           fsr0l	equ	0xFE9
  3566                           wreg	equ	0xFE8
  3567                           postdec1	equ	0xFE5
  3568                           fsr1h	equ	0xFE2
  3569                           fsr1l	equ	0xFE1
  3570                           indf2	equ	0xFDF
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575                           	psect	temp
  3576  00002B                     btemp:
  3577                           	opt stack 0
  3578  00002B                     	ds	1
  3579  0000                     int$flags	set	btemp
  3580                           pclatu	equ	0xFFB
  3581                           pclath	equ	0xFFA
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon	equ	0xFF2
  3589                           postinc0	equ	0xFEE
  3590                           fsr0h	equ	0xFEA
  3591                           fsr0l	equ	0xFE9
  3592                           wreg	equ	0xFE8
  3593                           postdec1	equ	0xFE5
  3594                           fsr1h	equ	0xFE2
  3595                           fsr1l	equ	0xFE1
  3596                           indf2	equ	0xFDF
  3597                           fsr2h	equ	0xFDA
  3598                           fsr2l	equ	0xFD9
  3599                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        2
    BSS         1294
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     26      42
    BANK0           160      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    hex	PTR unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_onData
    _onData->_writeAddressPhysical
    _writeHex->_writeChar
    _writeAddressPhysical->_logicAddressToPhysical
    _writeAddressPhysical->_writeAddress
    _writeAddress->_writePortA
    _writeAddress->_writePortB
    _writeAddress->_writePortC
    _writeAddress->_writePortD
    _writeAddress->_writePortE
    _writeAddress->_writeTrisA
    _readAddress->_writePortB
    _readAddress->_writePortC
    _readAddress->_writePortD
    _error->_writeChar

Critical Paths under _receiveData in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _receiveData in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _receiveData in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _receiveData in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _receiveData in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _receiveData in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _receiveData in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _receiveData in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _receiveData in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3283
                           _initUart
                             _onData
                           _readChar
 ---------------------------------------------------------------------------------
 (1) _readChar                                             1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _onData                                               5     5      0    3268
                                             21 COMRAM     5     5      0
                              _error
                           _parseHex
                        _readAddress
                           _readPort
                       _writeAddress
               _writeAddressPhysical
                           _writeHex
                         _writePortA
                         _writePortB
                         _writePortC
                         _writePortD
                         _writePortE
                         _writeTrisA
                         _writeTrisB
                         _writeTrisC
                         _writeTrisD
                         _writeTrisE
 ---------------------------------------------------------------------------------
 (2) _writeTrisE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeHex                                             4     4      0      45
                                             15 COMRAM     4     4      0
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeAddressPhysical                                 3     0      3    1684
                                             18 COMRAM     3     0      3
             _logicAddressToPhysical
                _logicDataToPhysical
                       _writeAddress
 ---------------------------------------------------------------------------------
 (3) _writeAddress                                         3     0      3     460
                                             15 COMRAM     3     0      3
                         _writePortA
                         _writePortB
                         _writePortC
                         _writePortD
                         _writePortE
                         _writeTrisA
 ---------------------------------------------------------------------------------
 (2) _writeTrisA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _logicDataToPhysical                                  2     2      0     135
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _logicAddressToPhysical                               4     2      2     543
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _readPort                                             0     0      0       0
                          _readPortA
                          _readPortB
                          _readPortC
                          _readPortD
                          _readPortE
 ---------------------------------------------------------------------------------
 (3) _readPortE                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortD                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortB                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readAddress                                          3     1      2     340
                                             15 COMRAM     3     1      2
                          _readPortA
                         _writePortB
                         _writePortC
                         _writePortD
 ---------------------------------------------------------------------------------
 (2) _writePortD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _readPortA                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parseHex                                             1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _error                                                0     0      0      15
                          _writeChar
 ---------------------------------------------------------------------------------
 (3) _writeChar                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _receiveData                                         14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initUart
   _onData
     _error
       _writeChar
     _parseHex
     _readAddress
       _readPortA
       _writePortB
       _writePortC
       _writePortD
     _readPort
       _readPortA
       _readPortB
       _readPortC
       _readPortD
       _readPortE
     _writeAddress
       _writePortA
       _writePortB
       _writePortC
       _writePortD
       _writePortE
       _writeTrisA
     _writeAddressPhysical
       _logicAddressToPhysical
       _logicDataToPhysical
       _writeAddress
         _writePortA
         _writePortB
         _writePortC
         _writePortD
         _writePortE
         _writeTrisA
     _writeHex
       _writeChar
     _writePortA
     _writePortB
     _writePortC
     _writePortD
     _writePortE
     _writeTrisA
     _writeTrisB
     _writeTrisC
     _writeTrisD
     _writeTrisE
   _readChar

 _receiveData (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     400      21       50.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0     100       8      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1A      2A       1       44.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12A       6        0.0%
DATA                 0      0     52A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Jan  7 01:11:13 2018

                 writePortA@data 000F                   writePortB@data 000F  
                 writePortC@data 000F                   writePortD@data 000F  
                 writePortE@data 000F                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                      __CFG_LVP$ON 000000  
                            l122 0EA8                              l118 0D92  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _adr 001B                              _hex 0029  
                            prod 000FF3                   writeTrisA@data 000F  
                            wreg 000FE8                   writeTrisB@data 000F  
                     _TXSTA1bits 000FAC                   writeTrisC@data 000F  
                 writeTrisD@data 000F                   writeTrisE@data 000F  
                           l1225 0D5E                             l1163 0E44  
                           l1155 0E32                             l1227 0D6C  
                           l1181 0CF0                             l1185 0D00  
                           l1177 0CE2                             l1189 0D10  
                           l1703 08BC                             l1721 08F8  
                           l1713 08DC                             l1811 0A0E  
                           l1803 09F0                             l1821 0A32  
                           l1741 0932                             l1725 0906  
                           l1717 08EA                             l1709 08CE  
                           l1831 0A56                             l1815 0A1E  
                           l1807 09FE                             l1735 0922  
                           l1727 090C                             l1671 0840  
                           l1663 082A                             l1761 0976  
                           l1913 0DBC                             l1835 0A66  
                           l1843 0A84                             l1827 0A48  
                           l1819 0A2C                             l1771 0990  
                           l1691 0896                             l1683 086E  
                           l1675 084E                             l1659 0818  
                           l1853 0ADC                             l1845 0A8A  
                           l1765 097E                             l1749 0948  
                           l1839 0A76                             l1783 09B2  
                           l1695 08A8                             l1687 0880  
                           l1679 085C                             l1849 0AB4  
                           l1777 09A0                             l1697 08AE  
                           l1859 0AE8                             l1883 0B80  
                           l1891 0B9A                             l1787 09BC  
                           l1877 0B66                             l1797 09DC  
                           l1893 0BA0                             l1897 0BA6  
                           STR_1 0801                             u1447 0B3A  
                           i2l61 004C                             i2l64 0076  
                           _main 0D96                             _temp 0024  
                           _port 0022                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 002B                    __CFG_BORV$190 000000  
                           prodh 000FF4                             prodl 000FF3  
                           start 00B2                    __CFG_IESO$OFF 000000  
                   ?_readAddress 0010                     ___param_bank 000000  
                   _BAUDCON1bits 000FB8              _logicDataToPhysical 0DF4  
                          ?_main 0001                            _PORTA 000F80  
                          _PORTB 000F81                            _PORTC 000F82  
                          _PORTD 000F83                            _PORTE 000F84  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                          _error 0E9A                            _value 0027  
                          _state 0028            __size_of_writeAddress 003E  
                          pclath 000FFA             ?_logicDataToPhysical 0001  
                          tablat 000FF5                            status 000FD8  
                 __CFG_T3CMX$RC0 000000                     ?_receiveData 0001  
                 __CFG_ICPRT$OFF 000000                   __CFG_MCLRE$OFF 000000  
                __initialization 0BDA                     __end_of_main 0DC6  
                 __CFG_PCLKEN$ON 000000                           ??_main 001B  
                  __activetblptr 000002     __end_of_writeAddressPhysical 0DF4  
                   _writeAddress 0D20                   __CFG_SDOMX$RB3 000000  
                __CFG_CCP2MX$RC1 000000                           _ADCON0 000FC2  
                         ?_error 0001                           _ANSELA 000F5B  
                         _ANSELC 000F5D            ??_logicDataToPhysical 000F  
                 __CFG_WDTEN$OFF 000000                           _RCREG1 000FAE  
                         _SPBRG1 000FAF                           _TXREG1 000FAD  
                 __CFG_XINST$OFF 000000                   __CFG_STVREN$ON 000000  
               __end_of_readChar 0D96                           _onData 0814  
               __end_of_initUart 0E8E                 __end_of_readPort 0D20  
                         clear_0 0BFA                           clear_1 0C0E  
                         clear_2 0C20                 __end_of_parseHex 0E48  
                   __pdataCOMRAM 0029                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_writeHex 0CD4  
           __CFG_LS48MHZ$SYS24X4 000000                       __accesstop 0060  
        __end_of__initialization 0C26                  __CFG_PBADEN$OFF 000000  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000             __size_of_readAddress 0028  
                  __end_of_error 0EA6        logicDataToPhysical@value0 0010  
                        ??_error 0010                       __pbssBANK1 0100  
             __size_of_readPortA 0004               __size_of_readPortB 0004  
             __size_of_readPortC 0004               __size_of_readPortD 0004  
             __size_of_readPortE 0004             _writeAddressPhysical 0DC6  
           __size_of_receiveData 00AA                __CFG_PLLSEL$PLL4X 000000  
                   readAddress@d 0012                     readChar@data 000F  
                 readAddress@adr 0010                          ?_onData 0001  
       logicDataToPhysical@value 000F         ??_logicAddressToPhysical 0011  
                      ?_readChar 0001                        ?_initUart 0001  
                      ?_readPort 0001               __size_of_writeChar 000C  
                      ?_parseHex 0001            ?_writeAddressPhysical 0013  
                        __Hparam 0000                          __Lparam 0000  
                   __psmallconst 0800                  __size_of_onData 03C6  
                        __pcinit 0BDA                          __ramtop 0800  
                      ?_writeHex 0001                          __ptext0 0D96  
                        __ptext1 0D5E                          __ptext2 0814  
                        __ptext3 0EB2                          __ptext4 0EBA  
                        __ptext5 0E8E                          __ptext6 0EC2  
                        __ptext7 0C86                          __ptext8 0DC6  
                        __ptext9 0D20                          _command 0023  
              __end_of_readPortA 0F0E                __end_of_readPortB 0F0A  
              __end_of_readPortC 0F06                __end_of_readPortD 0F02  
              __end_of_readPortE 0EFE                          _uartBuf 0200  
                        onData@d 001A             end_of_initialization 0C26  
                     ??_readChar 000F                       ??_initUart 000F  
                  __Lmediumconst 0000                       ??_readPort 000F  
                     ??_parseHex 000F                     writeHex@data 0013  
                        postdec1 000FE5                          postinc0 000FEE  
                     ??_writeHex 0010                __end_of_writeChar 0EB2  
    __end_of_logicDataToPhysical 0E1E  __size_of_logicAddressToPhysical 0052  
         ??_writeAddressPhysical 0016        logicAddressToPhysical@adr 0011  
                     _writePortA 0EDA                       _writePortB 0EF2  
                     _writePortC 0EEA                       _writePortD 0EE2  
                     _writePortE 0ED2                       _writeTrisA 0ECA  
                     _writeTrisB 0EC2                       _writeTrisC 0E8E  
                     _writeTrisD 0EBA                       _writeTrisE 0EB2  
                  __pidataCOMRAM 0F0E                   __end_of_onData 0BDA  
            start_initialization 0BDA                  __CFG_nLPBOR$OFF 000000  
                  ??_readAddress 0012           _logicAddressToPhysical 0C34  
                       ??_onData 0016                      __pbssBIGRAM 0200  
                    __pbssCOMRAM 001B                   _uartWriteIndex 001D  
              writeAddress@value 0012                    ??_receiveData 0001  
              __size_of_readChar 0038                  writeAddress@adr 0010  
              __size_of_initUart 001E                __size_of_readPort 004C  
              __size_of_parseHex 002A                        __pintcode 0008  
     logicAddressToPhysical@adr0 000F                      ?_writePortA 0001  
                    ?_writePortB 0001                      ?_writePortC 0001  
                    ?_writePortD 0001                      ?_writePortE 0001  
                    ?_writeTrisA 0001                      ?_writeTrisB 0001  
                    ?_writeTrisC 0001                      ?_writeTrisD 0001  
                    ?_writeTrisE 0001              __end_of_readAddress 0E70  
                    __smallconst 0800                    ?_writeAddress 0010  
              __size_of_writeHex 004E                        _readPortA 0F0A  
                      _readPortB 0F06                        _readPortC 0F02  
                      _readPortD 0EFE                        _readPortE 0EFA  
                 __size_of_error 000C                      _flashBuffer 0100  
                       _PIE1bits 000F9D                         _PIR1bits 000F9E  
                       _RCONbits 000FD0                 __CFG_WDTPS$32768 000000  
            __end_of_receiveData 00B2                    _uartReadIndex 001F  
                 ??_writeAddress 0013                __CFG_CFGPLLEN$OFF 000000  
                      _writeChar 0EA6                       ?_readPortA 0001  
                     ?_readPortB 0001                       ?_readPortC 0001  
                     ?_readPortD 0001                       ?_readPortE 0001  
            __size_of_writePortA 0008              __size_of_writePortB 0008  
            __size_of_writePortC 0008              __size_of_writePortD 0008  
            __size_of_writePortE 0008              __size_of_writeTrisA 0008  
            __size_of_writeTrisB 0008              __size_of_writeTrisC 000C  
            __size_of_writeTrisD 0008              __size_of_writeTrisE 0008  
      writeAddressPhysical@value 0015                         __Hrparam 0000  
        writeAddressPhysical@adr 0013                      _readAddress 0E48  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
                      parseHex@x 000F                         _checksum 0026  
               _flashBufferIndex 0021                       ?_writeChar 0001  
                       __ptext10 0ECA                         __ptext11 0ED2  
                       __ptext20 0E48                         __ptext12 0EDA  
                       __ptext21 0EE2                         __ptext13 0DF4  
                       __ptext22 0EEA                         __ptext14 0C34  
                       __ptext23 0EF2                         __ptext15 0CD4  
                       __ptext24 0F0A                         __ptext16 0EFA  
                       __ptext25 0E1E                         __ptext17 0EFE  
                       __ptext26 0E9A                         __ptext18 0F02  
                       __ptext27 0EA6                         __ptext19 0F06  
                       __ptext28 0E70     __size_of_logicDataToPhysical 002A  
                       _readChar 0D5E                         _initUart 0E70  
                       _readPort 0CD4                    __size_of_main 0030  
                    _receiveData 0008                         _parseHex 0E1E  
  __size_of_writeAddressPhysical 002E          ?_logicAddressToPhysical 000F  
                       int$flags 002B                         _writeHex 0C86  
             _checksumCalculated 0025                       _INTCONbits 000FF2  
                    ??_readPortA 000F                      ??_readPortB 000F  
                    ??_readPortC 000F                      ??_readPortD 000F  
                    ??_readPortE 000F                         intlevel2 0000  
                  writeChar@data 000F   __end_of_logicAddressToPhysical 0C86  
                     _RCSTA1bits 000FAB             __end_of_writeAddress 0D5E  
                     _OSCCONbits 000FD3             __CFG_CPUDIV$NOCLKDIV 000000  
                   ??_writePortA 000F                     ??_writePortB 000F  
                   ??_writePortC 000F                     ??_writePortD 000F  
                   ??_writePortE 000F                     ??_writeTrisA 000F  
                   ??_writeTrisB 000F                     ??_writeTrisC 000F  
                   ??_writeTrisD 000F                     ??_writeTrisE 000F  
                    ??_writeChar 000F               __CFG_FOSC$INTOSCIO 000000  
             __end_of_writePortA 0EE2               __end_of_writePortB 0EFA  
             __end_of_writePortC 0EF2               __end_of_writePortD 0EEA  
             __end_of_writePortE 0EDA               __end_of_writeTrisA 0ED2  
             __end_of_writeTrisB 0ECA               __end_of_writeTrisC 0E9A  
             __end_of_writeTrisD 0EC2               __end_of_writeTrisE 0EBA  
