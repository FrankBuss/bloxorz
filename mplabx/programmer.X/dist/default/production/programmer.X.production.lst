

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Jan 26 07:30:58 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.42
    51                           ; Generated 13/04/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F45K50 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  00101C                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _hex
    90  00101C  01                 	db	low STR_1
    91  00101D  08                 	db	high STR_1
    92  0000                     _ANSELC	set	3933
    93  0000                     _ANSELA	set	3931
    94  0000                     _TRISDbits	set	3989
    95  0000                     _PORTDbits	set	3971
    96  0000                     _ADCON0	set	4034
    97  0000                     _OSCCONbits	set	4051
    98  0000                     _TXREG1	set	4013
    99  0000                     _TRISE	set	3990
   100  0000                     _TRISD	set	3989
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISB	set	3987
   103  0000                     _TRISA	set	3986
   104  0000                     _PORTE	set	3972
   105  0000                     _PORTD	set	3971
   106  0000                     _PORTC	set	3970
   107  0000                     _PORTB	set	3969
   108  0000                     _PORTA	set	3968
   109  0000                     _PIE1bits	set	3997
   110  0000                     _INTCONbits	set	4082
   111  0000                     _RCONbits	set	4048
   112  0000                     _SPBRG1	set	4015
   113  0000                     _BAUDCON1bits	set	4024
   114  0000                     _TXSTA1bits	set	4012
   115  0000                     _RCREG1	set	4014
   116  0000                     _PIR1bits	set	3998
   117  0000                     _RCSTA1bits	set	4011
   118                           
   119                           	psect	smallconst
   120  000800                     __psmallconst:
   121                           	opt stack 0
   122  000800  00                 	db	0
   123  000801                     STR_1:
   124  000801  30                 	db	48	;'0'
   125  000802  31                 	db	49	;'1'
   126  000803  32                 	db	50	;'2'
   127  000804  33                 	db	51	;'3'
   128  000805  34                 	db	52	;'4'
   129  000806  35                 	db	53	;'5'
   130  000807  36                 	db	54	;'6'
   131  000808  37                 	db	55	;'7'
   132  000809  38                 	db	56	;'8'
   133  00080A  39                 	db	57	;'9'
   134  00080B  61                 	db	97	;'a'
   135  00080C  62                 	db	98	;'b'
   136  00080D  63                 	db	99	;'c'
   137  00080E  64                 	db	100	;'d'
   138  00080F  65                 	db	101	;'e'
   139  000810  66                 	db	102	;'f'
   140  000811  00                 	db	0
   141                           
   142                           ; #config settings
   143  000812  00                 	db	0	; dummy byte at the end
   144  0000                     
   145                           	psect	cinit
   146  000CAE                     __pcinit:
   147                           	opt stack 0
   148  000CAE                     start_initialization:
   149                           	opt stack 0
   150  000CAE                     __initialization:
   151                           	opt stack 0
   152                           
   153                           ; Initialize objects allocated to COMRAM (2 bytes)
   154                           ; load TBLPTR registers with __pidataCOMRAM
   155  000CAE  0E1C               	movlw	low __pidataCOMRAM
   156  000CB0  6EF6               	movwf	tblptrl,c
   157  000CB2  0E10               	movlw	high __pidataCOMRAM
   158  000CB4  6EF7               	movwf	tblptrh,c
   159  000CB6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   160  000CB8  6EF8               	movwf	tblptru,c
   161  000CBA  0009               	tblrd		*+	;fetch initializer
   162  000CBC  CFF5 F02C          	movff	tablat,__pdataCOMRAM
   163  000CC0  0009               	tblrd		*+	;fetch initializer
   164  000CC2  CFF5 F02D          	movff	tablat,__pdataCOMRAM+1
   165                           
   166                           ; Clear objects allocated to BIGRAM (1024 bytes)
   167  000CC6  EE02  F000         	lfsr	0,__pbssBIGRAM
   168  000CCA  EE14 F000          	lfsr	1,1024
   169  000CCE                     clear_0:
   170  000CCE  6AEE               	clrf	postinc0,c
   171  000CD0  50E5               	movf	postdec1,w,c
   172  000CD2  50E1               	movf	fsr1l,w,c
   173  000CD4  E1FC               	bnz	clear_0
   174  000CD6  50E2               	movf	fsr1h,w,c
   175  000CD8  E1FA               	bnz	clear_0
   176                           
   177                           ; Clear objects allocated to BANK1 (256 bytes)
   178  000CDA  EE01  F000         	lfsr	0,__pbssBANK1
   179  000CDE  EE11 F000          	lfsr	1,256
   180  000CE2                     clear_1:
   181  000CE2  6AEE               	clrf	postinc0,c
   182  000CE4  50E5               	movf	postdec1,w,c
   183  000CE6  50E1               	movf	fsr1l,w,c
   184  000CE8  E1FC               	bnz	clear_1
   185  000CEA  50E2               	movf	fsr1h,w,c
   186  000CEC  E1FA               	bnz	clear_1
   187                           
   188                           ; Clear objects allocated to COMRAM (17 bytes)
   189  000CEE  EE00  F01B         	lfsr	0,__pbssCOMRAM
   190  000CF2  0E11               	movlw	17
   191  000CF4                     clear_2:
   192  000CF4  6AEE               	clrf	postinc0,c
   193  000CF6  06E8               	decf	wreg,f,c
   194  000CF8  E1FD               	bnz	clear_2
   195  000CFA                     end_of_initialization:
   196                           	opt stack 0
   197  000CFA                     __end_of__initialization:
   198                           	opt stack 0
   199  000CFA  902E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   200  000CFC  922E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   201  000CFE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   202  000D00  6EF8               	movwf	tblptru,c
   203  000D02  0100               	movlb	0
   204  000D04  EF35  F007         	goto	_main	;jump to C main() function
   205                           tblptru	equ	0xFF8
   206                           tblptrh	equ	0xFF7
   207                           tblptrl	equ	0xFF6
   208                           tablat	equ	0xFF5
   209                           postinc0	equ	0xFEE
   210                           wreg	equ	0xFE8
   211                           postdec1	equ	0xFE5
   212                           fsr1h	equ	0xFE2
   213                           fsr1l	equ	0xFE1
   214                           
   215                           	psect	bssCOMRAM
   216  00001B                     __pbssCOMRAM:
   217                           	opt stack 0
   218  00001B                     _flashBufferIndex:
   219                           	opt stack 0
   220  00001B                     	ds	2
   221  00001D                     _adr:
   222                           	opt stack 0
   223  00001D                     	ds	2
   224  00001F                     _uartWriteIndex:
   225                           	opt stack 0
   226  00001F                     	ds	2
   227  000021                     _uartReadIndex:
   228                           	opt stack 0
   229  000021                     	ds	2
   230  000023                     _shift:
   231                           	opt stack 0
   232  000023                     	ds	1
   233  000024                     _shiftCounter:
   234                           	opt stack 0
   235  000024                     	ds	1
   236  000025                     _port:
   237                           	opt stack 0
   238  000025                     	ds	1
   239  000026                     _command:
   240                           	opt stack 0
   241  000026                     	ds	1
   242  000027                     _temp:
   243                           	opt stack 0
   244  000027                     	ds	1
   245  000028                     _checksumCalculated:
   246                           	opt stack 0
   247  000028                     	ds	1
   248  000029                     _checksum:
   249                           	opt stack 0
   250  000029                     	ds	1
   251  00002A                     _value:
   252                           	opt stack 0
   253  00002A                     	ds	1
   254  00002B                     _state:
   255                           	opt stack 0
   256  00002B                     	ds	1
   257                           tblptru	equ	0xFF8
   258                           tblptrh	equ	0xFF7
   259                           tblptrl	equ	0xFF6
   260                           tablat	equ	0xFF5
   261                           postinc0	equ	0xFEE
   262                           wreg	equ	0xFE8
   263                           postdec1	equ	0xFE5
   264                           fsr1h	equ	0xFE2
   265                           fsr1l	equ	0xFE1
   266                           
   267                           	psect	dataCOMRAM
   268  00002C                     __pdataCOMRAM:
   269                           	opt stack 0
   270  00002C                     _hex:
   271                           	opt stack 0
   272  00002C                     	ds	2
   273                           tblptru	equ	0xFF8
   274                           tblptrh	equ	0xFF7
   275                           tblptrl	equ	0xFF6
   276                           tablat	equ	0xFF5
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           postdec1	equ	0xFE5
   280                           fsr1h	equ	0xFE2
   281                           fsr1l	equ	0xFE1
   282                           
   283                           	psect	bssBANK1
   284  000100                     __pbssBANK1:
   285                           	opt stack 0
   286  000100                     _flashBuffer:
   287                           	opt stack 0
   288  000100                     	ds	256
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           postdec1	equ	0xFE5
   296                           fsr1h	equ	0xFE2
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	bssBIGRAM
   300  000200                     __pbssBIGRAM:
   301                           	opt stack 0
   302  000200                     _uartBuf:
   303                           	opt stack 0
   304  000200                     	ds	1024
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1h	equ	0xFE2
   313                           fsr1l	equ	0xFE1
   314                           
   315                           	psect	cstackCOMRAM
   316  000001                     __pcstackCOMRAM:
   317                           	opt stack 0
   318  000001                     ??_receiveData:
   319  000001                     
   320                           ; 2 bytes @ 0x0
   321  000001                     	ds	14
   322  00000F                     ?_logicAddressToPhysical:
   323                           	opt stack 0
   324  00000F                     writePortA@data:
   325                           	opt stack 0
   326  00000F                     writePortB@data:
   327                           	opt stack 0
   328  00000F                     writePortC@data:
   329                           	opt stack 0
   330  00000F                     writePortD@data:
   331                           	opt stack 0
   332  00000F                     writePortE@data:
   333                           	opt stack 0
   334  00000F                     writeTrisA@data:
   335                           	opt stack 0
   336  00000F                     writeTrisB@data:
   337                           	opt stack 0
   338  00000F                     writeTrisC@data:
   339                           	opt stack 0
   340  00000F                     writeTrisD@data:
   341                           	opt stack 0
   342  00000F                     writeTrisE@data:
   343                           	opt stack 0
   344  00000F                     readChar@data:
   345                           	opt stack 0
   346  00000F                     writeChar@data:
   347                           	opt stack 0
   348  00000F                     parseHex@x:
   349                           	opt stack 0
   350  00000F                     logicDataToPhysical@pvalue:
   351                           	opt stack 0
   352  00000F                     writeByte@b:
   353                           	opt stack 0
   354  00000F                     logicAddressToPhysical@adr0:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0xE
   358  00000F                     	ds	1
   359  000010                     ??_writeHex:
   360  000010                     logicDataToPhysical@value0:
   361                           	opt stack 0
   362  000010                     sendBankCommand@bank:
   363                           	opt stack 0
   364  000010                     sendProgrammerEnableCommand@enable:
   365                           	opt stack 0
   366  000010                     writeAddress@adr:
   367                           	opt stack 0
   368  000010                     readAddress@adr:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0xF
   372  000010                     	ds	1
   373  000011                     logicAddressToPhysical@padr:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x10
   377  000011                     	ds	1
   378  000012                     writeAddress@value:
   379                           	opt stack 0
   380  000012                     readAddress@d:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x11
   384  000012                     	ds	1
   385  000013                     writeHex@data:
   386                           	opt stack 0
   387  000013                     writeAddressPhysical@adr:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x12
   391  000013                     	ds	2
   392  000015                     writeAddressPhysical@value:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x14
   396  000015                     	ds	1
   397  000016                     ??_onData:
   398  000016                     
   399                           ; 1 bytes @ 0x15
   400  000016                     	ds	4
   401  00001A                     onData@d:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x19
   405  00001A                     	ds	1
   406  00001B                     tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           postdec1	equ	0xFE5
   413                           fsr1h	equ	0xFE2
   414                           fsr1l	equ	0xFE1
   415                           
   416                           ; 1 bytes @ 0x1A
   417 ;;
   418 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   419 ;;
   420 ;; *************** function _main *****************
   421 ;; Defined at:
   422 ;;		line 218 in file "main.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;		None
   425 ;; Auto vars:     Size  Location     Type
   426 ;;		None
   427 ;; Return value:  Size  Location     Type
   428 ;;                  2  129[None  ] int 
   429 ;; Registers used:
   430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   431 ;; Tracked objects:
   432 ;;		On entry : 0/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   436 ;;      Params:         0       0       0       0       0       0       0       0       0
   437 ;;      Locals:         0       0       0       0       0       0       0       0       0
   438 ;;      Temps:          0       0       0       0       0       0       0       0       0
   439 ;;      Totals:         0       0       0       0       0       0       0       0       0
   440 ;;Total ram usage:        0 bytes
   441 ;; Hardware stack levels required when called:    5
   442 ;; This function calls:
   443 ;;		_initUart
   444 ;;		_onData
   445 ;;		_readChar
   446 ;; This function is called by:
   447 ;;		Startup code after reset
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           	psect	text0
   452  000E6A                     __ptext0:
   453                           	opt stack 0
   454  000E6A                     _main:
   455                           	opt stack 26
   456                           
   457                           ;main.c: 221: OSCCONbits.IRCF = 7;
   458                           
   459                           ;incstack = 0
   460  000E6A  88D3               	bsf	4051,4,c	;volatile
   461  000E6C  8AD3               	bsf	4051,5,c	;volatile
   462  000E6E  8CD3               	bsf	4051,6,c	;volatile
   463                           
   464                           ;main.c: 224: ANSELA = 0;
   465  000E70  0E00               	movlw	0
   466  000E72  010F               	movlb	15	; () banked
   467  000E74  6F5B               	movwf	91,b	;volatile
   468                           
   469                           ;main.c: 225: ANSELC = 0;
   470  000E76  0E00               	movlw	0
   471  000E78  010F               	movlb	15	; () banked
   472  000E7A  6F5D               	movwf	93,b	;volatile
   473                           
   474                           ;main.c: 228: ADCON0 = 0;
   475  000E7C  0E00               	movlw	0
   476  000E7E  6EC2               	movwf	4034,c	;volatile
   477                           
   478                           ; BSR set to: 15
   479                           ;main.c: 231: PORTC = 0xff;
   480  000E80  6882               	setf	3970,c	;volatile
   481                           
   482                           ; BSR set to: 15
   483                           ;main.c: 234: TRISA = 0xff;
   484  000E82  6892               	setf	3986,c	;volatile
   485                           
   486                           ; BSR set to: 15
   487                           ;main.c: 235: TRISB = 0xff;
   488  000E84  6893               	setf	3987,c	;volatile
   489                           
   490                           ;main.c: 236: TRISC = 0b10111111;
   491  000E86  0EBF               	movlw	191
   492  000E88  6E94               	movwf	3988,c	;volatile
   493                           
   494                           ; BSR set to: 15
   495                           ;main.c: 237: TRISD = 0xff;
   496  000E8A  6895               	setf	3989,c	;volatile
   497                           
   498                           ; BSR set to: 15
   499                           ;main.c: 239: initUart();
   500  000E8C  ECA2  F007         	call	_initUart	;wreg free
   501  000E90                     l1934:
   502                           
   503                           ;main.c: 243: onData(readChar());
   504  000E90  EC19  F007         	call	_readChar	;wreg free
   505  000E94  EC0A  F004         	call	_onData
   506  000E98  D7FB               	goto	l1934
   507  000E9A                     __end_of_main:
   508                           	opt stack 0
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           postdec1	equ	0xFE5
   516                           fsr1h	equ	0xFE2
   517                           fsr1l	equ	0xFE1
   518                           
   519 ;; *************** function _readChar *****************
   520 ;; Defined at:
   521 ;;		line 202 in file "main.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;  data            1   14[COMRAM] unsigned char 
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      unsigned char 
   528 ;; Registers used:
   529 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   535 ;;      Params:         0       0       0       0       0       0       0       0       0
   536 ;;      Locals:         1       0       0       0       0       0       0       0       0
   537 ;;      Temps:          0       0       0       0       0       0       0       0       0
   538 ;;      Totals:         1       0       0       0       0       0       0       0       0
   539 ;;Total ram usage:        1 bytes
   540 ;; Hardware stack levels used:    1
   541 ;; Hardware stack levels required when called:    1
   542 ;; This function calls:
   543 ;;		Nothing
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           	psect	text1
   550  000E32                     __ptext1:
   551                           	opt stack 0
   552  000E32                     _readChar:
   553                           	opt stack 29
   554  000E32                     l1252:
   555  000E32  501F               	movf	_uartWriteIndex,w,c	;volatile
   556  000E34  1821               	xorwf	_uartReadIndex,w,c	;volatile
   557  000E36  E104               	bnz	l1254
   558  000E38  5020               	movf	_uartWriteIndex+1,w,c	;volatile
   559  000E3A  1822               	xorwf	_uartReadIndex+1,w,c	;volatile
   560  000E3C  B4D8               	btfsc	status,2,c
   561  000E3E  D7F9               	goto	l1252
   562  000E40                     l1254:
   563                           
   564                           ;main.c: 206: data = uartBuf[uartReadIndex];
   565  000E40  0E00               	movlw	low _uartBuf
   566  000E42  2421               	addwf	_uartReadIndex,w,c	;volatile
   567  000E44  6ED9               	movwf	fsr2l,c
   568  000E46  0E02               	movlw	high _uartBuf
   569  000E48  2022               	addwfc	_uartReadIndex+1,w,c	;volatile
   570  000E4A  6EDA               	movwf	fsr2h,c
   571  000E4C  50DF               	movf	indf2,w,c
   572  000E4E  6E0F               	movwf	readChar@data,c
   573                           
   574                           ;main.c: 207: uartReadIndex++;
   575  000E50  4A21               	infsnz	_uartReadIndex,f,c	;volatile
   576  000E52  2A22               	incf	_uartReadIndex+1,f,c	;volatile
   577                           
   578                           ;main.c: 208: if (uartReadIndex == 1024) uartReadIndex = 0;
   579  000E54  0E04               	movlw	4
   580  000E56  1822               	xorwf	_uartReadIndex+1,w,c	;volatile
   581  000E58  1021               	iorwf	_uartReadIndex,w,c	;volatile
   582  000E5A  A4D8               	btfss	status,2,c
   583  000E5C  D004               	goto	l118
   584  000E5E  0E00               	movlw	0
   585  000E60  6E22               	movwf	_uartReadIndex+1,c	;volatile
   586  000E62  0E00               	movlw	0
   587  000E64  6E21               	movwf	_uartReadIndex,c	;volatile
   588  000E66                     l118:
   589                           
   590                           ;main.c: 209: return data;
   591  000E66  500F               	movf	readChar@data,w,c
   592  000E68  0012               	return	
   593  000E6A                     __end_of_readChar:
   594                           	opt stack 0
   595                           tblptru	equ	0xFF8
   596                           tblptrh	equ	0xFF7
   597                           tblptrl	equ	0xFF6
   598                           tablat	equ	0xFF5
   599                           postinc0	equ	0xFEE
   600                           wreg	equ	0xFE8
   601                           postdec1	equ	0xFE5
   602                           fsr1h	equ	0xFE2
   603                           fsr1l	equ	0xFE1
   604                           indf2	equ	0xFDF
   605                           fsr2h	equ	0xFDA
   606                           fsr2l	equ	0xFD9
   607                           status	equ	0xFD8
   608                           
   609 ;; *************** function _onData *****************
   610 ;; Defined at:
   611 ;;		line 302 in file "receiver.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;  d               1    wreg     unsigned char 
   614 ;; Auto vars:     Size  Location     Type
   615 ;;  d               1   25[COMRAM] unsigned char 
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   625 ;;      Params:         0       0       0       0       0       0       0       0       0
   626 ;;      Locals:         1       0       0       0       0       0       0       0       0
   627 ;;      Temps:          4       0       0       0       0       0       0       0       0
   628 ;;      Totals:         5       0       0       0       0       0       0       0       0
   629 ;;Total ram usage:        5 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; Hardware stack levels required when called:    4
   632 ;; This function calls:
   633 ;;		_error
   634 ;;		_parseHex
   635 ;;		_readAddress
   636 ;;		_readPort
   637 ;;		_sendBankCommand
   638 ;;		_sendProgrammerEnableCommand
   639 ;;		_writeAddress
   640 ;;		_writeAddressPhysical
   641 ;;		_writeHex
   642 ;;		_writePortA
   643 ;;		_writePortB
   644 ;;		_writePortC
   645 ;;		_writePortD
   646 ;;		_writePortE
   647 ;;		_writeTrisA
   648 ;;		_writeTrisB
   649 ;;		_writeTrisC
   650 ;;		_writeTrisD
   651 ;;		_writeTrisE
   652 ;; This function is called by:
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text2
   658  000814                     __ptext2:
   659                           	opt stack 0
   660  000814                     _onData:
   661                           	opt stack 26
   662                           
   663                           ;incstack = 0
   664                           ;onData@d stored from wreg
   665  000814  6E1A               	movwf	onData@d,c
   666                           
   667                           ;receiver.c: 304: switch (state) {
   668  000816  D1ED               	goto	l1918
   669  000818                     l1660:
   670                           
   671                           ;receiver.c: 306: if (d == '<') {
   672  000818  0E3C               	movlw	60
   673  00081A  181A               	xorwf	onData@d,w,c
   674  00081C  A4D8               	btfss	status,2,c
   675  00081E  0012               	return	
   676                           
   677                           ;receiver.c: 307: state = STATE_COMMAND;
   678  000820  0E01               	movlw	1
   679  000822  6E2B               	movwf	_state,c
   680                           
   681                           ;receiver.c: 308: checksumCalculated = 0;
   682  000824  0E00               	movlw	0
   683  000826  6E28               	movwf	_checksumCalculated,c
   684                           
   685                           ;receiver.c: 309: }
   686                           ;receiver.c: 310: break;
   687  000828  0012               	return	
   688  00082A                     l1664:
   689                           
   690                           ;receiver.c: 312: checksumCalculated ^= d;
   691  00082A  501A               	movf	onData@d,w,c
   692  00082C  1A28               	xorwf	_checksumCalculated,f,c
   693                           
   694                           ;receiver.c: 313: state = STATE_PORT;
   695  00082E  0E02               	movlw	2
   696  000830  6E2B               	movwf	_state,c
   697                           
   698                           ;receiver.c: 314: if (d == 'r') {
   699  000832  0E72               	movlw	114
   700  000834  181A               	xorwf	onData@d,w,c
   701  000836  A4D8               	btfss	status,2,c
   702  000838  D003               	goto	l1672
   703                           
   704                           ;receiver.c: 315: command = COMMAND_READ;
   705  00083A  0E00               	movlw	0
   706  00083C  6E26               	movwf	_command,c
   707                           
   708                           ;receiver.c: 316: } else if (d == 'w') {
   709  00083E  0012               	return	
   710  000840                     l1672:
   711  000840  0E77               	movlw	119
   712  000842  181A               	xorwf	onData@d,w,c
   713  000844  A4D8               	btfss	status,2,c
   714  000846  D003               	goto	l1676
   715                           
   716                           ;receiver.c: 317: command = COMMAND_WRITE;
   717  000848  0E01               	movlw	1
   718  00084A  6E26               	movwf	_command,c
   719                           
   720                           ;receiver.c: 318: } else if (d == 't') {
   721  00084C  0012               	return	
   722  00084E                     l1676:
   723  00084E  0E74               	movlw	116
   724  000850  181A               	xorwf	onData@d,w,c
   725  000852  A4D8               	btfss	status,2,c
   726  000854  D003               	goto	l1680
   727                           
   728                           ;receiver.c: 319: command = COMMAND_TRIS;
   729  000856  0E02               	movlw	2
   730  000858  6E26               	movwf	_command,c
   731                           
   732                           ;receiver.c: 320: } else if (d == 'l') {
   733  00085A  0012               	return	
   734  00085C                     l1680:
   735  00085C  0E6C               	movlw	108
   736  00085E  181A               	xorwf	onData@d,w,c
   737  000860  A4D8               	btfss	status,2,c
   738  000862  D005               	goto	l1684
   739                           
   740                           ;receiver.c: 321: state = STATE_VALUE_HIGH_NIBBLE;
   741  000864  0E03               	movlw	3
   742  000866  6E2B               	movwf	_state,c
   743                           
   744                           ;receiver.c: 322: command = COMMAND_ADR_LOW;
   745  000868  0E03               	movlw	3
   746  00086A  6E26               	movwf	_command,c
   747                           
   748                           ;receiver.c: 323: } else if (d == 'h') {
   749  00086C  0012               	return	
   750  00086E                     l1684:
   751  00086E  0E68               	movlw	104
   752  000870  181A               	xorwf	onData@d,w,c
   753  000872  A4D8               	btfss	status,2,c
   754  000874  D005               	goto	l1688
   755                           
   756                           ;receiver.c: 324: state = STATE_VALUE_HIGH_NIBBLE;
   757  000876  0E03               	movlw	3
   758  000878  6E2B               	movwf	_state,c
   759                           
   760                           ;receiver.c: 325: command = COMMAND_ADR_HIGH;
   761  00087A  0E04               	movlw	4
   762  00087C  6E26               	movwf	_command,c
   763                           
   764                           ;receiver.c: 326: } else if (d == 'f') {
   765  00087E  0012               	return	
   766  000880                     l1688:
   767  000880  0E66               	movlw	102
   768  000882  181A               	xorwf	onData@d,w,c
   769  000884  A4D8               	btfss	status,2,c
   770  000886  D009               	goto	l1692
   771                           
   772                           ;receiver.c: 327: state = STATE_VALUE_HIGH_NIBBLE;
   773  000888  0E03               	movlw	3
   774  00088A  6E2B               	movwf	_state,c
   775                           
   776                           ;receiver.c: 328: command = COMMAND_FLASH;
   777  00088C  0E05               	movlw	5
   778  00088E  6E26               	movwf	_command,c
   779                           
   780                           ;receiver.c: 329: flashBufferIndex = 0;
   781  000890  0E00               	movlw	0
   782  000892  6E1C               	movwf	_flashBufferIndex+1,c
   783  000894  0E00               	movlw	0
   784  000896  6E1B               	movwf	_flashBufferIndex,c
   785                           
   786                           ;receiver.c: 330: } else if (d == 'v') {
   787  000898  0012               	return	
   788  00089A                     l1692:
   789  00089A  0E76               	movlw	118
   790  00089C  181A               	xorwf	onData@d,w,c
   791  00089E  A4D8               	btfss	status,2,c
   792  0008A0  D005               	goto	l1696
   793                           
   794                           ;receiver.c: 331: state = STATE_CHECKSUM_HIGH_NIBBLE;
   795  0008A2  0E05               	movlw	5
   796  0008A4  6E2B               	movwf	_state,c
   797                           
   798                           ;receiver.c: 332: command = COMMAND_VERIFY;
   799  0008A6  0E06               	movlw	6
   800  0008A8  6E26               	movwf	_command,c
   801                           
   802                           ;receiver.c: 333: } else if (d == 'b') {
   803  0008AA  0012               	return	
   804  0008AC                     l1696:
   805  0008AC  0E62               	movlw	98
   806  0008AE  181A               	xorwf	onData@d,w,c
   807  0008B0  A4D8               	btfss	status,2,c
   808  0008B2  D005               	goto	l1700
   809                           
   810                           ;receiver.c: 334: state = STATE_VALUE_HIGH_NIBBLE;
   811  0008B4  0E03               	movlw	3
   812  0008B6  6E2B               	movwf	_state,c
   813                           
   814                           ;receiver.c: 335: command = COMMAND_BANK;
   815  0008B8  0E07               	movlw	7
   816  0008BA  6E26               	movwf	_command,c
   817                           
   818                           ;receiver.c: 336: } else if (d == 'p') {
   819  0008BC  0012               	return	
   820  0008BE                     l1700:
   821  0008BE  0E70               	movlw	112
   822  0008C0  181A               	xorwf	onData@d,w,c
   823  0008C2  A4D8               	btfss	status,2,c
   824  0008C4  D005               	goto	l1704
   825                           
   826                           ;receiver.c: 337: state = STATE_VALUE_HIGH_NIBBLE;
   827  0008C6  0E03               	movlw	3
   828  0008C8  6E2B               	movwf	_state,c
   829                           
   830                           ;receiver.c: 338: command = COMMAND_PROGRAMMER_ENABLE;
   831  0008CA  0E08               	movlw	8
   832  0008CC  6E26               	movwf	_command,c
   833                           
   834                           ;receiver.c: 339: } else {
   835  0008CE  0012               	return	
   836  0008D0                     l1704:
   837                           
   838                           ;receiver.c: 340: error();
   839  0008D0  ECD3  F007         	call	_error	;wreg free
   840                           
   841                           ;receiver.c: 341: }
   842                           ;receiver.c: 342: break;
   843  0008D4  0012               	return	
   844  0008D6                     l1706:
   845                           
   846                           ;receiver.c: 344: checksumCalculated ^= d;
   847  0008D6  501A               	movf	onData@d,w,c
   848  0008D8  1A28               	xorwf	_checksumCalculated,f,c
   849                           
   850                           ;receiver.c: 345: if (command == COMMAND_READ) {
   851  0008DA  5026               	movf	_command,w,c
   852  0008DC  A4D8               	btfss	status,2,c
   853  0008DE  D002               	goto	l1712
   854                           
   855                           ;receiver.c: 346: state = STATE_CHECKSUM_HIGH_NIBBLE;
   856  0008E0  0E05               	movlw	5
   857  0008E2  D001               	goto	L1
   858  0008E4                     l1712:
   859                           
   860                           ;receiver.c: 348: state = STATE_VALUE_HIGH_NIBBLE;
   861  0008E4  0E03               	movlw	3
   862  0008E6                     L1:
   863  0008E6  6E2B               	movwf	_state,c
   864                           
   865                           ;receiver.c: 349: }
   866                           ;receiver.c: 350: if (d == 'a') {
   867  0008E8  0E61               	movlw	97
   868  0008EA  181A               	xorwf	onData@d,w,c
   869  0008EC  A4D8               	btfss	status,2,c
   870  0008EE  D003               	goto	l1718
   871                           
   872                           ;receiver.c: 351: port = PORT_A;
   873  0008F0  0E00               	movlw	0
   874  0008F2  6E25               	movwf	_port,c
   875                           
   876                           ;receiver.c: 352: } else if (d == 'b') {
   877  0008F4  0012               	return	
   878  0008F6                     l1718:
   879  0008F6  0E62               	movlw	98
   880  0008F8  181A               	xorwf	onData@d,w,c
   881  0008FA  A4D8               	btfss	status,2,c
   882  0008FC  D003               	goto	l1722
   883                           
   884                           ;receiver.c: 353: port = PORT_B;
   885  0008FE  0E01               	movlw	1
   886  000900  6E25               	movwf	_port,c
   887                           
   888                           ;receiver.c: 354: } else if (d == 'c') {
   889  000902  0012               	return	
   890  000904                     l1722:
   891  000904  0E63               	movlw	99
   892  000906  181A               	xorwf	onData@d,w,c
   893  000908  A4D8               	btfss	status,2,c
   894  00090A  D003               	goto	l1726
   895                           
   896                           ;receiver.c: 355: port = PORT_C;
   897  00090C  0E02               	movlw	2
   898  00090E  6E25               	movwf	_port,c
   899                           
   900                           ;receiver.c: 356: } else if (d == 'd') {
   901  000910  0012               	return	
   902  000912                     l1726:
   903  000912  0E64               	movlw	100
   904  000914  181A               	xorwf	onData@d,w,c
   905  000916  A4D8               	btfss	status,2,c
   906  000918  D003               	goto	l1730
   907                           
   908                           ;receiver.c: 357: port = PORT_D;
   909  00091A  0E03               	movlw	3
   910  00091C  6E25               	movwf	_port,c
   911                           
   912                           ;receiver.c: 358: } else if (d == 'e') {
   913  00091E  0012               	return	
   914  000920                     l1730:
   915  000920  0E65               	movlw	101
   916  000922  181A               	xorwf	onData@d,w,c
   917  000924  A4D8               	btfss	status,2,c
   918  000926  D003               	goto	l1734
   919                           
   920                           ;receiver.c: 359: port = PORT_E;
   921  000928  0E04               	movlw	4
   922  00092A  6E25               	movwf	_port,c
   923                           
   924                           ;receiver.c: 360: } else {
   925  00092C  0012               	return	
   926  00092E                     l1734:
   927                           
   928                           ;receiver.c: 361: error();
   929  00092E  ECD3  F007         	call	_error	;wreg free
   930                           
   931                           ;receiver.c: 362: }
   932                           ;receiver.c: 363: break;
   933  000932  0012               	return	
   934  000934                     l1736:
   935                           
   936                           ;receiver.c: 365: checksumCalculated ^= d;
   937  000934  501A               	movf	onData@d,w,c
   938  000936  1A28               	xorwf	_checksumCalculated,f,c
   939                           
   940                           ;receiver.c: 366: temp = parseHex(d);
   941  000938  501A               	movf	onData@d,w,c
   942  00093A  EC79  F007         	call	_parseHex
   943  00093E  6E27               	movwf	_temp,c
   944                           
   945                           ;receiver.c: 367: if (temp < 0) {
   946  000940  AE27               	btfss	_temp,7,c
   947  000942  D003               	goto	l1744
   948                           
   949                           ;receiver.c: 368: error();
   950  000944  ECD3  F007         	call	_error	;wreg free
   951                           
   952                           ;receiver.c: 369: } else {
   953  000948  0012               	return	
   954  00094A                     l1744:
   955                           
   956                           ;receiver.c: 370: state = STATE_VALUE_LOW_NIBBLE;
   957  00094A  0E04               	movlw	4
   958  00094C  6E2B               	movwf	_state,c
   959                           
   960                           ;receiver.c: 371: value = (uint8_t) temp;
   961  00094E  C027  F02A         	movff	_temp,_value
   962                           
   963                           ;receiver.c: 372: value <<= 4;
   964  000952  3A2A               	swapf	_value,f,c
   965  000954  0EF0               	movlw	240
   966  000956  162A               	andwf	_value,f,c
   967                           
   968                           ;receiver.c: 373: }
   969                           ;receiver.c: 374: break;
   970  000958  0012               	return	
   971  00095A                     l1750:
   972                           
   973                           ;receiver.c: 376: checksumCalculated ^= d;
   974  00095A  501A               	movf	onData@d,w,c
   975  00095C  1A28               	xorwf	_checksumCalculated,f,c
   976                           
   977                           ;receiver.c: 377: temp = parseHex(d);
   978  00095E  501A               	movf	onData@d,w,c
   979  000960  EC79  F007         	call	_parseHex
   980  000964  6E27               	movwf	_temp,c
   981                           
   982                           ;receiver.c: 378: if (temp < 0) {
   983  000966  AE27               	btfss	_temp,7,c
   984  000968  D003               	goto	l1758
   985                           
   986                           ;receiver.c: 379: error();
   987  00096A  ECD3  F007         	call	_error	;wreg free
   988                           
   989                           ;receiver.c: 380: } else {
   990  00096E  0012               	return	
   991  000970                     l1758:
   992                           
   993                           ;receiver.c: 381: value |= (uint8_t) temp;
   994  000970  5027               	movf	_temp,w,c
   995  000972  122A               	iorwf	_value,f,c
   996                           
   997                           ;receiver.c: 382: state = STATE_CHECKSUM_HIGH_NIBBLE;
   998  000974  0E05               	movlw	5
   999  000976  6E2B               	movwf	_state,c
  1000                           
  1001                           ;receiver.c: 383: if (command == COMMAND_FLASH) {
  1002  000978  0E05               	movlw	5
  1003  00097A  1826               	xorwf	_command,w,c
  1004  00097C  A4D8               	btfss	status,2,c
  1005  00097E  0012               	return	
  1006                           
  1007                           ;receiver.c: 384: flashBuffer[flashBufferIndex] = value;
  1008  000980  0E00               	movlw	low _flashBuffer
  1009  000982  241B               	addwf	_flashBufferIndex,w,c
  1010  000984  6ED9               	movwf	fsr2l,c
  1011  000986  0E01               	movlw	high _flashBuffer
  1012  000988  201C               	addwfc	_flashBufferIndex+1,w,c
  1013  00098A  6EDA               	movwf	fsr2h,c
  1014  00098C  C02A  FFDF         	movff	_value,indf2
  1015                           
  1016                           ;receiver.c: 385: if (flashBufferIndex < 255) {
  1017  000990  501C               	movf	_flashBufferIndex+1,w,c
  1018  000992  E105               	bnz	l1770
  1019  000994  281B               	incf	_flashBufferIndex,w,c
  1020  000996  B0D8               	btfsc	status,0,c
  1021  000998  D002               	goto	l1770
  1022                           
  1023                           ;receiver.c: 386: state = STATE_VALUE_HIGH_NIBBLE;
  1024  00099A  0E03               	movlw	3
  1025  00099C  D001               	goto	L2
  1026  00099E                     l1770:
  1027                           
  1028                           ;receiver.c: 388: state = STATE_CHECKSUM_HIGH_NIBBLE;
  1029  00099E  0E05               	movlw	5
  1030  0009A0                     L2:
  1031  0009A0  6E2B               	movwf	_state,c
  1032                           
  1033                           ;receiver.c: 389: }
  1034                           ;receiver.c: 390: flashBufferIndex++;
  1035  0009A2  4A1B               	infsnz	_flashBufferIndex,f,c
  1036  0009A4  2A1C               	incf	_flashBufferIndex+1,f,c
  1037                           
  1038                           ;receiver.c: 391: }
  1039                           ;receiver.c: 392: }
  1040                           ;receiver.c: 393: break;
  1041  0009A6  0012               	return	
  1042  0009A8                     l1774:
  1043                           
  1044                           ;receiver.c: 395: temp = parseHex(d);
  1045  0009A8  501A               	movf	onData@d,w,c
  1046  0009AA  EC79  F007         	call	_parseHex
  1047  0009AE  6E27               	movwf	_temp,c
  1048                           
  1049                           ;receiver.c: 396: if (temp < 0) {
  1050  0009B0  AE27               	btfss	_temp,7,c
  1051  0009B2  D003               	goto	l1780
  1052                           
  1053                           ;receiver.c: 397: error();
  1054  0009B4  ECD3  F007         	call	_error	;wreg free
  1055                           
  1056                           ;receiver.c: 398: } else {
  1057  0009B8  0012               	return	
  1058  0009BA                     l1780:
  1059                           
  1060                           ;receiver.c: 399: state = STATE_CHECKSUM_LOW_NIBBLE;
  1061  0009BA  0E06               	movlw	6
  1062  0009BC  6E2B               	movwf	_state,c
  1063                           
  1064                           ;receiver.c: 400: checksum = (uint8_t) temp;
  1065  0009BE  C027  F029         	movff	_temp,_checksum
  1066                           
  1067                           ;receiver.c: 401: checksum <<= 4;
  1068  0009C2  3A29               	swapf	_checksum,f,c
  1069  0009C4  0EF0               	movlw	240
  1070  0009C6  1629               	andwf	_checksum,f,c
  1071                           
  1072                           ;receiver.c: 402: }
  1073                           ;receiver.c: 403: break;
  1074  0009C8  0012               	return	
  1075  0009CA                     l1786:
  1076                           
  1077                           ;receiver.c: 405: temp = parseHex(d);
  1078  0009CA  501A               	movf	onData@d,w,c
  1079  0009CC  EC79  F007         	call	_parseHex
  1080  0009D0  6E27               	movwf	_temp,c
  1081                           
  1082                           ;receiver.c: 406: if (temp < 0) {
  1083  0009D2  AE27               	btfss	_temp,7,c
  1084  0009D4  D003               	goto	l1792
  1085                           
  1086                           ;receiver.c: 407: error();
  1087  0009D6  ECD3  F007         	call	_error	;wreg free
  1088                           
  1089                           ;receiver.c: 408: } else {
  1090  0009DA  0012               	return	
  1091  0009DC                     l1792:
  1092                           
  1093                           ;receiver.c: 409: state = STATE_END;
  1094  0009DC  0E07               	movlw	7
  1095  0009DE  6E2B               	movwf	_state,c
  1096                           
  1097                           ;receiver.c: 410: checksum |= (uint8_t) temp;
  1098  0009E0  5027               	movf	_temp,w,c
  1099  0009E2  1229               	iorwf	_checksum,f,c
  1100                           
  1101                           ;receiver.c: 411: }
  1102                           ;receiver.c: 412: break;
  1103  0009E4  0012               	return	
  1104  0009E6                     l1796:
  1105                           
  1106                           ;receiver.c: 414: if (d == '>') {
  1107  0009E6  0E3E               	movlw	62
  1108  0009E8  181A               	xorwf	onData@d,w,c
  1109  0009EA  A4D8               	btfss	status,2,c
  1110  0009EC  D0FF               	goto	l1914
  1111                           
  1112                           ;receiver.c: 415: state = STATE_IDLE;
  1113  0009EE  0E00               	movlw	0
  1114  0009F0  6E2B               	movwf	_state,c
  1115                           
  1116                           ;receiver.c: 416: if (checksumCalculated == checksum) {
  1117  0009F2  5029               	movf	_checksum,w,c
  1118  0009F4  1828               	xorwf	_checksumCalculated,w,c
  1119  0009F6  A4D8               	btfss	status,2,c
  1120  0009F8  D0F6               	goto	l1912
  1121                           
  1122                           ;receiver.c: 417: if (command == COMMAND_READ) {
  1123  0009FA  5026               	movf	_command,w,c
  1124  0009FC  A4D8               	btfss	status,2,c
  1125  0009FE  D003               	goto	l1806
  1126                           
  1127                           ;receiver.c: 418: readPort();
  1128  000A00  ECD4  F006         	call	_readPort	;wreg free
  1129                           
  1130                           ;receiver.c: 419: } else if (command == COMMAND_WRITE) {
  1131  000A04  D0E3               	goto	l1904
  1132  000A06                     l1806:
  1133  000A06  0426               	decf	_command,w,c
  1134  000A08  A4D8               	btfss	status,2,c
  1135  000A0A  D028               	goto	l1830
  1136                           
  1137                           ;receiver.c: 420: if (port == PORT_A) {
  1138  000A0C  5025               	movf	_port,w,c
  1139  000A0E  A4D8               	btfss	status,2,c
  1140  000A10  D004               	goto	l1812
  1141                           
  1142                           ;receiver.c: 421: writePortA(value);
  1143  000A12  502A               	movf	_value,w,c
  1144  000A14  ECF4  F007         	call	_writePortA
  1145                           
  1146                           ;receiver.c: 422: } else if (port == PORT_B) {
  1147  000A18  D01E               	goto	l1828
  1148  000A1A                     l1812:
  1149  000A1A  0425               	decf	_port,w,c
  1150  000A1C  A4D8               	btfss	status,2,c
  1151  000A1E  D004               	goto	l1816
  1152                           
  1153                           ;receiver.c: 423: writePortB(value);
  1154  000A20  502A               	movf	_value,w,c
  1155  000A22  EC00  F008         	call	_writePortB
  1156                           
  1157                           ;receiver.c: 424: } else if (port == PORT_C) {
  1158  000A26  D017               	goto	l1828
  1159  000A28                     l1816:
  1160  000A28  0E02               	movlw	2
  1161  000A2A  1825               	xorwf	_port,w,c
  1162  000A2C  A4D8               	btfss	status,2,c
  1163  000A2E  D004               	goto	l1820
  1164                           
  1165                           ;receiver.c: 425: writePortC(value);
  1166  000A30  502A               	movf	_value,w,c
  1167  000A32  ECFC  F007         	call	_writePortC
  1168                           
  1169                           ;receiver.c: 426: } else if (port == PORT_D) {
  1170  000A36  D00F               	goto	l1828
  1171  000A38                     l1820:
  1172  000A38  0E03               	movlw	3
  1173  000A3A  1825               	xorwf	_port,w,c
  1174  000A3C  A4D8               	btfss	status,2,c
  1175  000A3E  D004               	goto	l1824
  1176                           
  1177                           ;receiver.c: 427: writePortD(value);
  1178  000A40  502A               	movf	_value,w,c
  1179  000A42  ECF8  F007         	call	_writePortD
  1180                           
  1181                           ;receiver.c: 428: } else if (port == PORT_E) {
  1182  000A46  D007               	goto	l1828
  1183  000A48                     l1824:
  1184  000A48  0E04               	movlw	4
  1185  000A4A  1825               	xorwf	_port,w,c
  1186  000A4C  A4D8               	btfss	status,2,c
  1187  000A4E  D003               	goto	l1828
  1188                           
  1189                           ;receiver.c: 429: writePortE(value);
  1190  000A50  502A               	movf	_value,w,c
  1191  000A52  ECF0  F007         	call	_writePortE
  1192  000A56                     l1828:
  1193                           
  1194                           ;receiver.c: 430: }
  1195                           ;receiver.c: 431: readPort();
  1196  000A56  ECD4  F006         	call	_readPort	;wreg free
  1197                           
  1198                           ;receiver.c: 432: } else if (command == COMMAND_TRIS) {
  1199  000A5A  D0B8               	goto	l1904
  1200  000A5C                     l1830:
  1201  000A5C  0E02               	movlw	2
  1202  000A5E  1826               	xorwf	_command,w,c
  1203  000A60  A4D8               	btfss	status,2,c
  1204  000A62  D028               	goto	l1854
  1205                           
  1206                           ;receiver.c: 433: if (port == PORT_A) {
  1207  000A64  5025               	movf	_port,w,c
  1208  000A66  A4D8               	btfss	status,2,c
  1209  000A68  D004               	goto	l1836
  1210                           
  1211                           ;receiver.c: 434: writeTrisA(value);
  1212  000A6A  502A               	movf	_value,w,c
  1213  000A6C  ECEC  F007         	call	_writeTrisA
  1214                           
  1215                           ;receiver.c: 435: } else if (port == PORT_B) {
  1216  000A70  D01E               	goto	l1852
  1217  000A72                     l1836:
  1218  000A72  0425               	decf	_port,w,c
  1219  000A74  A4D8               	btfss	status,2,c
  1220  000A76  D004               	goto	l1840
  1221                           
  1222                           ;receiver.c: 436: writeTrisB(value);
  1223  000A78  502A               	movf	_value,w,c
  1224  000A7A  ECE8  F007         	call	_writeTrisB
  1225                           
  1226                           ;receiver.c: 437: } else if (port == PORT_C) {
  1227  000A7E  D017               	goto	l1852
  1228  000A80                     l1840:
  1229  000A80  0E02               	movlw	2
  1230  000A82  1825               	xorwf	_port,w,c
  1231  000A84  A4D8               	btfss	status,2,c
  1232  000A86  D004               	goto	l1844
  1233                           
  1234                           ;receiver.c: 438: writeTrisC(value);
  1235  000A88  502A               	movf	_value,w,c
  1236  000A8A  ECCD  F007         	call	_writeTrisC
  1237                           
  1238                           ;receiver.c: 439: } else if (port == PORT_D) {
  1239  000A8E  D00F               	goto	l1852
  1240  000A90                     l1844:
  1241  000A90  0E03               	movlw	3
  1242  000A92  1825               	xorwf	_port,w,c
  1243  000A94  A4D8               	btfss	status,2,c
  1244  000A96  D004               	goto	l1848
  1245                           
  1246                           ;receiver.c: 440: writeTrisD(value);
  1247  000A98  502A               	movf	_value,w,c
  1248  000A9A  ECDF  F007         	call	_writeTrisD
  1249                           
  1250                           ;receiver.c: 441: } else if (port == PORT_E) {
  1251  000A9E  D007               	goto	l1852
  1252  000AA0                     l1848:
  1253  000AA0  0E04               	movlw	4
  1254  000AA2  1825               	xorwf	_port,w,c
  1255  000AA4  A4D8               	btfss	status,2,c
  1256  000AA6  D003               	goto	l1852
  1257                           
  1258                           ;receiver.c: 442: writeTrisE(value);
  1259  000AA8  502A               	movf	_value,w,c
  1260  000AAA  ECE4  F007         	call	_writeTrisE
  1261  000AAE                     l1852:
  1262                           
  1263                           ;receiver.c: 443: }
  1264                           ;receiver.c: 444: readPort();
  1265  000AAE  ECD4  F006         	call	_readPort	;wreg free
  1266                           
  1267                           ;receiver.c: 445: } else if (command == COMMAND_ADR_LOW) {
  1268  000AB2  D08C               	goto	l1904
  1269  000AB4                     l1854:
  1270  000AB4  0E03               	movlw	3
  1271  000AB6  1826               	xorwf	_command,w,c
  1272  000AB8  A4D8               	btfss	status,2,c
  1273  000ABA  D012               	goto	l1858
  1274                           
  1275                           ;receiver.c: 446: adr = (adr & 0xff00) | value;
  1276  000ABC  0E00               	movlw	0
  1277  000ABE  6E16               	movwf	??_onData& (0+255),c
  1278  000AC0  0EFF               	movlw	255
  1279  000AC2  6E17               	movwf	(??_onData+1)& (0+255),c
  1280  000AC4  C01D  F018         	movff	_adr,??_onData+2
  1281  000AC8  C01E  F019         	movff	_adr+1,??_onData+3
  1282  000ACC  5016               	movf	??_onData,w,c
  1283  000ACE  1618               	andwf	??_onData+2,f,c
  1284  000AD0  5017               	movf	??_onData+1,w,c
  1285  000AD2  1619               	andwf	??_onData+3,f,c
  1286  000AD4  502A               	movf	_value,w,c
  1287  000AD6  1018               	iorwf	??_onData+2,w,c
  1288  000AD8  6E1D               	movwf	_adr,c
  1289  000ADA  5019               	movf	??_onData+3,w,c
  1290  000ADC  6E1E               	movwf	_adr+1,c
  1291                           
  1292                           ;receiver.c: 447: } else if (command == COMMAND_ADR_HIGH) {
  1293  000ADE  D076               	goto	l1904
  1294  000AE0                     l1858:
  1295  000AE0  0E04               	movlw	4
  1296  000AE2  1826               	xorwf	_command,w,c
  1297  000AE4  A4D8               	btfss	status,2,c
  1298  000AE6  D00C               	goto	l1862
  1299                           
  1300                           ;receiver.c: 448: adr &= 0xff;
  1301  000AE8  0EFF               	movlw	255
  1302  000AEA  161D               	andwf	_adr,f,c
  1303  000AEC  0E00               	movlw	0
  1304  000AEE  161E               	andwf	_adr+1,f,c
  1305                           
  1306                           ;receiver.c: 449: adr |= (uint16_t) (value << 8);
  1307  000AF0  502A               	movf	_value,w,c
  1308  000AF2  6E17               	movwf	(??_onData+1)& (0+255),c
  1309  000AF4  6A16               	clrf	??_onData& (0+255),c
  1310  000AF6  5016               	movf	??_onData,w,c
  1311  000AF8  121D               	iorwf	_adr,f,c
  1312  000AFA  5017               	movf	??_onData+1,w,c
  1313  000AFC  121E               	iorwf	_adr+1,f,c
  1314                           
  1315                           ;receiver.c: 450: } else if (command == COMMAND_FLASH) {
  1316  000AFE  D066               	goto	l1904
  1317  000B00                     l1862:
  1318  000B00  0E05               	movlw	5
  1319  000B02  1826               	xorwf	_command,w,c
  1320  000B04  A4D8               	btfss	status,2,c
  1321  000B06  D045               	goto	l1890
  1322                           
  1323                           ;receiver.c: 451: for (flashBufferIndex = 0; flashBufferIndex < 256; flashBufferIndex++)
      +                           {
  1324  000B08  0E00               	movlw	0
  1325  000B0A  6E1C               	movwf	_flashBufferIndex+1,c
  1326  000B0C  0E00               	movlw	0
  1327  000B0E  6E1B               	movwf	_flashBufferIndex,c
  1328  000B10                     l1866:
  1329  000B10  041C               	decf	_flashBufferIndex+1,w,c
  1330  000B12  B0D8               	btfsc	status,0,c
  1331  000B14  D05B               	goto	l1904
  1332                           
  1333                           ;receiver.c: 452: writeAddressPhysical(0x5555, 0xaa);
  1334  000B16  0E55               	movlw	85
  1335  000B18  6E14               	movwf	writeAddressPhysical@adr+1,c
  1336  000B1A  0E55               	movlw	85
  1337  000B1C  6E13               	movwf	writeAddressPhysical@adr,c
  1338  000B1E  0EAA               	movlw	170
  1339  000B20  6E15               	movwf	writeAddressPhysical@value,c
  1340  000B22  EC4D  F007         	call	_writeAddressPhysical	;wreg free
  1341                           
  1342                           ;receiver.c: 453: writeAddressPhysical(0x2aaa, 0x55);
  1343  000B26  0E2A               	movlw	42
  1344  000B28  6E14               	movwf	writeAddressPhysical@adr+1,c
  1345  000B2A  0EAA               	movlw	170
  1346  000B2C  6E13               	movwf	writeAddressPhysical@adr,c
  1347  000B2E  0E55               	movlw	85
  1348  000B30  6E15               	movwf	writeAddressPhysical@value,c
  1349  000B32  EC4D  F007         	call	_writeAddressPhysical	;wreg free
  1350                           
  1351                           ;receiver.c: 454: writeAddressPhysical(0x5555, 0xa0);
  1352  000B36  0E55               	movlw	85
  1353  000B38  6E14               	movwf	writeAddressPhysical@adr+1,c
  1354  000B3A  0E55               	movlw	85
  1355  000B3C  6E13               	movwf	writeAddressPhysical@adr,c
  1356  000B3E  0EA0               	movlw	160
  1357  000B40  6E15               	movwf	writeAddressPhysical@value,c
  1358  000B42  EC4D  F007         	call	_writeAddressPhysical	;wreg free
  1359                           
  1360                           ;receiver.c: 455: writeAddress(adr, flashBuffer[flashBufferIndex]);
  1361  000B46  C01D  F010         	movff	_adr,writeAddress@adr
  1362  000B4A  C01E  F011         	movff	_adr+1,writeAddress@adr+1
  1363  000B4E  0E00               	movlw	low _flashBuffer
  1364  000B50  241B               	addwf	_flashBufferIndex,w,c
  1365  000B52  6ED9               	movwf	fsr2l,c
  1366  000B54  0E01               	movlw	high _flashBuffer
  1367  000B56  201C               	addwfc	_flashBufferIndex+1,w,c
  1368  000B58  6EDA               	movwf	fsr2h,c
  1369  000B5A  50DF               	movf	indf2,w,c
  1370  000B5C  6E12               	movwf	writeAddress@value,c
  1371  000B5E  ECFA  F006         	call	_writeAddress	;wreg free
  1372                           
  1373                           ;receiver.c: 456: _delay((unsigned long)((25)*(16000000/4000000.0)));
  1374  000B62  0E21               	movlw	33
  1375  000B64                     u1487:
  1376  000B64  2EE8               	decfsz	wreg,f,c
  1377  000B66  D7FE               	bra	u1487
  1378  000B68  F000               	nop	
  1379                           
  1380                           ;receiver.c: 457: value = readAddress(adr);
  1381  000B6A  C01D  F010         	movff	_adr,readAddress@adr
  1382  000B6E  C01E  F011         	movff	_adr+1,readAddress@adr+1
  1383  000B72  EC8E  F007         	call	_readAddress	;wreg free
  1384  000B76  6E2A               	movwf	_value,c
  1385                           
  1386                           ;receiver.c: 458: writeHex(value);
  1387  000B78  502A               	movf	_value,w,c
  1388  000B7A  ECAD  F006         	call	_writeHex
  1389                           
  1390                           ;receiver.c: 459: value ^= 0xff;
  1391  000B7E  0EFF               	movlw	255
  1392  000B80  1A2A               	xorwf	_value,f,c
  1393                           
  1394                           ;receiver.c: 460: writeHex(value);
  1395  000B82  502A               	movf	_value,w,c
  1396  000B84  ECAD  F006         	call	_writeHex
  1397                           
  1398                           ;receiver.c: 461: adr++;
  1399  000B88  4A1D               	infsnz	_adr,f,c
  1400  000B8A  2A1E               	incf	_adr+1,f,c
  1401  000B8C  4A1B               	infsnz	_flashBufferIndex,f,c
  1402  000B8E  2A1C               	incf	_flashBufferIndex+1,f,c
  1403  000B90  D7BF               	goto	l1866
  1404  000B92                     l1890:
  1405  000B92  0E06               	movlw	6
  1406  000B94  1826               	xorwf	_command,w,c
  1407  000B96  A4D8               	btfss	status,2,c
  1408  000B98  D00A               	goto	l1896
  1409                           
  1410                           ;receiver.c: 464: value = readAddress(adr);
  1411  000B9A  C01D  F010         	movff	_adr,readAddress@adr
  1412  000B9E  C01E  F011         	movff	_adr+1,readAddress@adr+1
  1413  000BA2  EC8E  F007         	call	_readAddress	;wreg free
  1414  000BA6  6E2A               	movwf	_value,c
  1415                           
  1416                           ;receiver.c: 465: adr++;
  1417  000BA8  4A1D               	infsnz	_adr,f,c
  1418  000BAA  2A1E               	incf	_adr+1,f,c
  1419                           
  1420                           ;receiver.c: 466: } else if (command == COMMAND_BANK) {
  1421  000BAC  D00F               	goto	l1904
  1422  000BAE                     l1896:
  1423  000BAE  0E07               	movlw	7
  1424  000BB0  1826               	xorwf	_command,w,c
  1425  000BB2  A4D8               	btfss	status,2,c
  1426  000BB4  D004               	goto	l1900
  1427                           
  1428                           ;receiver.c: 467: sendBankCommand(value);
  1429  000BB6  502A               	movf	_value,w,c
  1430  000BB8  ECBF  F007         	call	_sendBankCommand
  1431                           
  1432                           ;receiver.c: 468: } else if (command == COMMAND_PROGRAMMER_ENABLE ) {
  1433  000BBC  D007               	goto	l1904
  1434  000BBE                     l1900:
  1435  000BBE  0E08               	movlw	8
  1436  000BC0  1826               	xorwf	_command,w,c
  1437  000BC2  A4D8               	btfss	status,2,c
  1438  000BC4  D003               	goto	l1904
  1439                           
  1440                           ;receiver.c: 469: sendProgrammerEnableCommand(value);
  1441  000BC6  502A               	movf	_value,w,c
  1442  000BC8  ECB1  F007         	call	_sendProgrammerEnableCommand
  1443  000BCC                     l1904:
  1444                           
  1445                           ;receiver.c: 470: }
  1446                           ;receiver.c: 471: if (command != COMMAND_FLASH) {
  1447  000BCC  0E05               	movlw	5
  1448  000BCE  1826               	xorwf	_command,w,c
  1449  000BD0  B4D8               	btfsc	status,2,c
  1450  000BD2  0012               	return	
  1451                           
  1452                           ;receiver.c: 472: writeHex(value);
  1453  000BD4  502A               	movf	_value,w,c
  1454  000BD6  ECAD  F006         	call	_writeHex
  1455                           
  1456                           ;receiver.c: 473: value ^= 0xff;
  1457  000BDA  0EFF               	movlw	255
  1458  000BDC  1A2A               	xorwf	_value,f,c
  1459                           
  1460                           ;receiver.c: 474: writeHex(value);
  1461  000BDE  502A               	movf	_value,w,c
  1462  000BE0  ECAD  F006         	call	_writeHex
  1463                           
  1464                           ;receiver.c: 475: }
  1465                           ;receiver.c: 476: } else {
  1466  000BE4  0012               	return	
  1467  000BE6                     l1912:
  1468                           
  1469                           ;receiver.c: 477: error();
  1470  000BE6  ECD3  F007         	call	_error	;wreg free
  1471                           
  1472                           ;receiver.c: 478: }
  1473                           ;receiver.c: 479: } else {
  1474  000BEA  0012               	return	
  1475  000BEC                     l1914:
  1476                           
  1477                           ;receiver.c: 480: error();
  1478  000BEC  ECD3  F007         	call	_error	;wreg free
  1479                           
  1480                           ;receiver.c: 483: }
  1481                           
  1482                           ;receiver.c: 481: }
  1483                           ;receiver.c: 482: break;
  1484  000BF0  0012               	return	
  1485  000BF2                     l1918:
  1486  000BF2  502B               	movf	_state,w,c
  1487                           
  1488                           ; Switch size 1, requested type "space"
  1489                           ; Number of cases is 8, Range of values is 0 to 7
  1490                           ; switch strategies available:
  1491                           ; Name         Instructions Cycles
  1492                           ; simple_byte           25    13 (average)
  1493                           ;	Chosen strategy is simple_byte
  1494  000BF4  0A00               	xorlw	0	; case 0
  1495  000BF6  B4D8               	btfsc	status,2,c
  1496  000BF8  D60F               	goto	l1660
  1497  000BFA  0A01               	xorlw	1	; case 1
  1498  000BFC  B4D8               	btfsc	status,2,c
  1499  000BFE  D615               	goto	l1664
  1500  000C00  0A03               	xorlw	3	; case 2
  1501  000C02  B4D8               	btfsc	status,2,c
  1502  000C04  D668               	goto	l1706
  1503  000C06  0A01               	xorlw	1	; case 3
  1504  000C08  B4D8               	btfsc	status,2,c
  1505  000C0A  D694               	goto	l1736
  1506  000C0C  0A07               	xorlw	7	; case 4
  1507  000C0E  B4D8               	btfsc	status,2,c
  1508  000C10  D6A4               	goto	l1750
  1509  000C12  0A01               	xorlw	1	; case 5
  1510  000C14  B4D8               	btfsc	status,2,c
  1511  000C16  D6C8               	goto	l1774
  1512  000C18  0A03               	xorlw	3	; case 6
  1513  000C1A  B4D8               	btfsc	status,2,c
  1514  000C1C  D6D6               	goto	l1786
  1515  000C1E  0A01               	xorlw	1	; case 7
  1516  000C20  A4D8               	btfss	status,2,c
  1517  000C22  0012               	return	
  1518  000C24  D6E0               	goto	l1796
  1519  000C26                     __end_of_onData:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1h	equ	0xFE2
  1529                           fsr1l	equ	0xFE1
  1530                           indf2	equ	0xFDF
  1531                           fsr2h	equ	0xFDA
  1532                           fsr2l	equ	0xFD9
  1533                           status	equ	0xFD8
  1534                           
  1535 ;; *************** function _writeTrisE *****************
  1536 ;; Defined at:
  1537 ;;		line 172 in file "main.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  data            1    wreg     unsigned char 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  data            1   14[COMRAM] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1551 ;;      Params:         0       0       0       0       0       0       0       0       0
  1552 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1554 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1555 ;;Total ram usage:        1 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    1
  1558 ;; This function calls:
  1559 ;;		Nothing
  1560 ;; This function is called by:
  1561 ;;		_onData
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           	psect	text3
  1566  000FC8                     __ptext3:
  1567                           	opt stack 0
  1568  000FC8                     _writeTrisE:
  1569                           	opt stack 28
  1570                           
  1571                           ;incstack = 0
  1572                           ;writeTrisE@data stored from wreg
  1573  000FC8  6E0F               	movwf	writeTrisE@data,c
  1574                           
  1575                           ;main.c: 174: TRISE = data;
  1576  000FCA  C00F  FF96         	movff	writeTrisE@data,3990	;volatile
  1577  000FCE  0012               	return		;funcret
  1578  000FD0                     __end_of_writeTrisE:
  1579                           	opt stack 0
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           postdec1	equ	0xFE5
  1587                           fsr1h	equ	0xFE2
  1588                           fsr1l	equ	0xFE1
  1589                           indf2	equ	0xFDF
  1590                           fsr2h	equ	0xFDA
  1591                           fsr2l	equ	0xFD9
  1592                           status	equ	0xFD8
  1593                           
  1594 ;; *************** function _writeTrisD *****************
  1595 ;; Defined at:
  1596 ;;		line 166 in file "main.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  data            1    wreg     unsigned char 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  data            1   14[COMRAM] unsigned char 
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, status,0
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1610 ;;      Params:         0       0       0       0       0       0       0       0       0
  1611 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1612 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1613 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1614 ;;Total ram usage:        1 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    1
  1617 ;; This function calls:
  1618 ;;		Nothing
  1619 ;; This function is called by:
  1620 ;;		_onData
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text4
  1625  000FBE                     __ptext4:
  1626                           	opt stack 0
  1627  000FBE                     _writeTrisD:
  1628                           	opt stack 28
  1629                           
  1630                           ;incstack = 0
  1631                           ;writeTrisD@data stored from wreg
  1632  000FBE  6E0F               	movwf	writeTrisD@data,c
  1633                           
  1634                           ;main.c: 169: TRISD = (uint8_t) (data | 0x80);
  1635  000FC0  500F               	movf	writeTrisD@data,w,c
  1636  000FC2  0980               	iorlw	128
  1637  000FC4  6E95               	movwf	3989,c	;volatile
  1638  000FC6  0012               	return		;funcret
  1639  000FC8                     __end_of_writeTrisD:
  1640                           	opt stack 0
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           postdec1	equ	0xFE5
  1648                           fsr1h	equ	0xFE2
  1649                           fsr1l	equ	0xFE1
  1650                           indf2	equ	0xFDF
  1651                           fsr2h	equ	0xFDA
  1652                           fsr2l	equ	0xFD9
  1653                           status	equ	0xFD8
  1654                           
  1655 ;; *************** function _writeTrisC *****************
  1656 ;; Defined at:
  1657 ;;		line 160 in file "main.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  data            1    wreg     unsigned char 
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  data            1   14[COMRAM] unsigned char 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  1    wreg      void 
  1664 ;; Registers used:
  1665 ;;		wreg, status,2, status,0
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1671 ;;      Params:         0       0       0       0       0       0       0       0       0
  1672 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1673 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1674 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1675 ;;Total ram usage:        1 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    1
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_onData
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text5
  1686  000F9A                     __ptext5:
  1687                           	opt stack 0
  1688  000F9A                     _writeTrisC:
  1689                           	opt stack 28
  1690                           
  1691                           ;incstack = 0
  1692                           ;writeTrisC@data stored from wreg
  1693  000F9A  6E0F               	movwf	writeTrisC@data,c
  1694                           
  1695                           ;main.c: 163: TRISC = (uint8_t) (data & 0b10111111 | 0x80);
  1696  000F9C  500F               	movf	writeTrisC@data,w,c
  1697  000F9E  0BBF               	andlw	191
  1698  000FA0  0980               	iorlw	128
  1699  000FA2  6E94               	movwf	3988,c	;volatile
  1700  000FA4  0012               	return		;funcret
  1701  000FA6                     __end_of_writeTrisC:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           fsr1h	equ	0xFE2
  1711                           fsr1l	equ	0xFE1
  1712                           indf2	equ	0xFDF
  1713                           fsr2h	equ	0xFDA
  1714                           fsr2l	equ	0xFD9
  1715                           status	equ	0xFD8
  1716                           
  1717 ;; *************** function _writeTrisB *****************
  1718 ;; Defined at:
  1719 ;;		line 155 in file "main.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  data            1    wreg     unsigned char 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  data            1   14[COMRAM] unsigned char 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1733 ;;      Params:         0       0       0       0       0       0       0       0       0
  1734 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1735 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1736 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1737 ;;Total ram usage:        1 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    1
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_onData
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text6
  1748  000FD0                     __ptext6:
  1749                           	opt stack 0
  1750  000FD0                     _writeTrisB:
  1751                           	opt stack 28
  1752                           
  1753                           ;incstack = 0
  1754                           ;writeTrisB@data stored from wreg
  1755  000FD0  6E0F               	movwf	writeTrisB@data,c
  1756                           
  1757                           ;main.c: 157: TRISB = data;
  1758  000FD2  C00F  FF93         	movff	writeTrisB@data,3987	;volatile
  1759  000FD6  0012               	return		;funcret
  1760  000FD8                     __end_of_writeTrisB:
  1761                           	opt stack 0
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1h	equ	0xFE2
  1770                           fsr1l	equ	0xFE1
  1771                           indf2	equ	0xFDF
  1772                           fsr2h	equ	0xFDA
  1773                           fsr2l	equ	0xFD9
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function _writeHex *****************
  1777 ;; Defined at:
  1778 ;;		line 97 in file "receiver.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  data            1    wreg     unsigned char 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  data            1   18[COMRAM] unsigned char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0
  1793 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1794 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1795 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1796 ;;Total ram usage:        4 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    2
  1799 ;; This function calls:
  1800 ;;		_writeChar
  1801 ;; This function is called by:
  1802 ;;		_onData
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text7
  1807  000D5A                     __ptext7:
  1808                           	opt stack 0
  1809  000D5A                     _writeHex:
  1810                           	opt stack 27
  1811                           
  1812                           ;incstack = 0
  1813                           ;writeHex@data stored from wreg
  1814  000D5A  6E13               	movwf	writeHex@data,c
  1815                           
  1816                           ;receiver.c: 99: writeChar(hex[data >> 4]);
  1817  000D5C  C013  F010         	movff	writeHex@data,??_writeHex
  1818  000D60  3A10               	swapf	??_writeHex,f,c
  1819  000D62  0E0F               	movlw	15
  1820  000D64  1610               	andwf	??_writeHex,f,c
  1821  000D66  5010               	movf	??_writeHex,w,c
  1822  000D68  242C               	addwf	_hex,w,c
  1823  000D6A  6E11               	movwf	(??_writeHex+1)& (0+255),c
  1824  000D6C  0E00               	movlw	0
  1825  000D6E  202D               	addwfc	_hex+1,w,c
  1826  000D70  6E12               	movwf	(??_writeHex+2)& (0+255),c
  1827  000D72  C011  FFF6         	movff	??_writeHex+1,tblptrl
  1828  000D76  C012  FFF7         	movff	??_writeHex+2,tblptrh
  1829  000D7A                     	if	0	;tblptru may be non-zero
  1830  000D7A                     	endif
  1831  000D7A                     	if	0	;tblptru may be non-zero
  1832  000D7A                     	endif
  1833  000D7A  0008               	tblrd		*
  1834  000D7C  50F5               	movf	tablat,w,c
  1835  000D7E  ECD9  F007         	call	_writeChar
  1836                           
  1837                           ;receiver.c: 100: writeChar(hex[data & 0xf]);
  1838  000D82  C013  F010         	movff	writeHex@data,??_writeHex
  1839  000D86  0E0F               	movlw	15
  1840  000D88  1610               	andwf	??_writeHex,f,c
  1841  000D8A  5010               	movf	??_writeHex,w,c
  1842  000D8C  242C               	addwf	_hex,w,c
  1843  000D8E  6E11               	movwf	(??_writeHex+1)& (0+255),c
  1844  000D90  0E00               	movlw	0
  1845  000D92  202D               	addwfc	_hex+1,w,c
  1846  000D94  6E12               	movwf	(??_writeHex+2)& (0+255),c
  1847  000D96  C011  FFF6         	movff	??_writeHex+1,tblptrl
  1848  000D9A  C012  FFF7         	movff	??_writeHex+2,tblptrh
  1849  000D9E                     	if	0	;tblptru may be non-zero
  1850  000D9E                     	endif
  1851  000D9E                     	if	0	;tblptru may be non-zero
  1852  000D9E                     	endif
  1853  000D9E  0008               	tblrd		*
  1854  000DA0  50F5               	movf	tablat,w,c
  1855  000DA2  ECD9  F007         	call	_writeChar
  1856  000DA6  0012               	return		;funcret
  1857  000DA8                     __end_of_writeHex:
  1858                           	opt stack 0
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           postinc0	equ	0xFEE
  1864                           wreg	equ	0xFE8
  1865                           postdec1	equ	0xFE5
  1866                           fsr1h	equ	0xFE2
  1867                           fsr1l	equ	0xFE1
  1868                           indf2	equ	0xFDF
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8
  1872                           
  1873 ;; *************** function _writeAddressPhysical *****************
  1874 ;; Defined at:
  1875 ;;		line 174 in file "receiver.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  adr             2   18[COMRAM] unsigned int 
  1878 ;;  value           1   20[COMRAM] unsigned char 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, status,2, status,0, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1890 ;;      Params:         3       0       0       0       0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1893 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1894 ;;Total ram usage:        3 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    3
  1897 ;; This function calls:
  1898 ;;		_logicAddressToPhysical
  1899 ;;		_logicDataToPhysical
  1900 ;;		_writeAddress
  1901 ;; This function is called by:
  1902 ;;		_onData
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text8
  1907  000E9A                     __ptext8:
  1908                           	opt stack 0
  1909  000E9A                     _writeAddressPhysical:
  1910                           	opt stack 26
  1911                           
  1912                           ;receiver.c: 176: adr = logicAddressToPhysical(adr);
  1913                           
  1914                           ;incstack = 0
  1915  000E9A  C013  F00F         	movff	writeAddressPhysical@adr,logicAddressToPhysical@adr0
  1916  000E9E  C014  F010         	movff	writeAddressPhysical@adr+1,logicAddressToPhysical@adr0+1
  1917  000EA2  EC84  F006         	call	_logicAddressToPhysical	;wreg free
  1918  000EA6  C00F  F013         	movff	?_logicAddressToPhysical,writeAddressPhysical@adr
  1919  000EAA  C010  F014         	movff	?_logicAddressToPhysical+1,writeAddressPhysical@adr+1
  1920                           
  1921                           ;receiver.c: 177: value = logicDataToPhysical(value);
  1922  000EAE  5015               	movf	writeAddressPhysical@value,w,c
  1923  000EB0  EC64  F007         	call	_logicDataToPhysical
  1924  000EB4  6E15               	movwf	writeAddressPhysical@value,c
  1925                           
  1926                           ;receiver.c: 178: writeAddress(adr, value);
  1927  000EB6  C013  F010         	movff	writeAddressPhysical@adr,writeAddress@adr
  1928  000EBA  C014  F011         	movff	writeAddressPhysical@adr+1,writeAddress@adr+1
  1929  000EBE  C015  F012         	movff	writeAddressPhysical@value,writeAddress@value
  1930  000EC2  ECFA  F006         	call	_writeAddress	;wreg free
  1931  000EC6  0012               	return		;funcret
  1932  000EC8                     __end_of_writeAddressPhysical:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           postinc0	equ	0xFEE
  1939                           wreg	equ	0xFE8
  1940                           postdec1	equ	0xFE5
  1941                           fsr1h	equ	0xFE2
  1942                           fsr1l	equ	0xFE1
  1943                           indf2	equ	0xFDF
  1944                           fsr2h	equ	0xFDA
  1945                           fsr2l	equ	0xFD9
  1946                           status	equ	0xFD8
  1947                           
  1948 ;; *************** function _writeAddress *****************
  1949 ;; Defined at:
  1950 ;;		line 154 in file "receiver.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  adr             2   15[COMRAM] unsigned int 
  1953 ;;  value           1   17[COMRAM] unsigned char 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;		None
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      void 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1965 ;;      Params:         3       0       0       0       0       0       0       0       0
  1966 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1967 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1968 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1969 ;;Total ram usage:        3 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    2
  1972 ;; This function calls:
  1973 ;;		_writePortA
  1974 ;;		_writePortB
  1975 ;;		_writePortC
  1976 ;;		_writePortD
  1977 ;;		_writePortE
  1978 ;;		_writeTrisA
  1979 ;; This function is called by:
  1980 ;;		_writeAddressPhysical
  1981 ;;		_onData
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text9
  1986  000DF4                     __ptext9:
  1987                           	opt stack 0
  1988  000DF4                     _writeAddress:
  1989                           	opt stack 26
  1990                           
  1991                           ;receiver.c: 156: writeTrisA(0);
  1992                           
  1993                           ;incstack = 0
  1994  000DF4  0E00               	movlw	0
  1995  000DF6  ECEC  F007         	call	_writeTrisA
  1996                           
  1997                           ;receiver.c: 157: writePortA(value);
  1998  000DFA  5012               	movf	writeAddress@value,w,c
  1999  000DFC  ECF4  F007         	call	_writePortA
  2000                           
  2001                           ;receiver.c: 158: writePortC(0xff);
  2002  000E00  0EFF               	movlw	255
  2003  000E02  ECFC  F007         	call	_writePortC
  2004                           
  2005                           ;receiver.c: 159: writePortB(adr & 0xff);
  2006  000E06  5010               	movf	writeAddress@adr,w,c
  2007  000E08  EC00  F008         	call	_writePortB
  2008                           
  2009                           ;receiver.c: 160: writePortD((adr >> 8) & 0xff);
  2010  000E0C  5011               	movf	writeAddress@adr+1,w,c
  2011  000E0E  ECF8  F007         	call	_writePortD
  2012                           
  2013                           ;receiver.c: 163: writePortE(2 | 4);
  2014  000E12  0E06               	movlw	6
  2015  000E14  ECF0  F007         	call	_writePortE
  2016                           
  2017                           ;receiver.c: 164: writePortC(2 | 0x40);
  2018  000E18  0E42               	movlw	66
  2019  000E1A  ECFC  F007         	call	_writePortC
  2020                           
  2021                           ;receiver.c: 167: writePortC(0xff);
  2022  000E1E  0EFF               	movlw	255
  2023  000E20  ECFC  F007         	call	_writePortC
  2024                           
  2025                           ;receiver.c: 168: writePortE(0xff);
  2026  000E24  0EFF               	movlw	255
  2027  000E26  ECF0  F007         	call	_writePortE
  2028                           
  2029                           ;receiver.c: 171: writeTrisA(0xff);
  2030  000E2A  0EFF               	movlw	255
  2031  000E2C  ECEC  F007         	call	_writeTrisA
  2032  000E30  0012               	return		;funcret
  2033  000E32                     __end_of_writeAddress:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           postinc0	equ	0xFEE
  2040                           wreg	equ	0xFE8
  2041                           postdec1	equ	0xFE5
  2042                           fsr1h	equ	0xFE2
  2043                           fsr1l	equ	0xFE1
  2044                           indf2	equ	0xFDF
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _writeTrisA *****************
  2050 ;; Defined at:
  2051 ;;		line 150 in file "main.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  data            1    wreg     unsigned char 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  data            1   14[COMRAM] unsigned char 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2065 ;;      Params:         0       0       0       0       0       0       0       0       0
  2066 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2068 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2069 ;;Total ram usage:        1 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    1
  2072 ;; This function calls:
  2073 ;;		Nothing
  2074 ;; This function is called by:
  2075 ;;		_writeAddress
  2076 ;;		_onData
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text10
  2081  000FD8                     __ptext10:
  2082                           	opt stack 0
  2083  000FD8                     _writeTrisA:
  2084                           	opt stack 28
  2085                           
  2086                           ;incstack = 0
  2087                           ;writeTrisA@data stored from wreg
  2088  000FD8  6E0F               	movwf	writeTrisA@data,c
  2089                           
  2090                           ;main.c: 152: TRISA = data;
  2091  000FDA  C00F  FF92         	movff	writeTrisA@data,3986	;volatile
  2092  000FDE  0012               	return		;funcret
  2093  000FE0                     __end_of_writeTrisA:
  2094                           	opt stack 0
  2095                           tblptru	equ	0xFF8
  2096                           tblptrh	equ	0xFF7
  2097                           tblptrl	equ	0xFF6
  2098                           tablat	equ	0xFF5
  2099                           postinc0	equ	0xFEE
  2100                           wreg	equ	0xFE8
  2101                           postdec1	equ	0xFE5
  2102                           fsr1h	equ	0xFE2
  2103                           fsr1l	equ	0xFE1
  2104                           indf2	equ	0xFDF
  2105                           fsr2h	equ	0xFDA
  2106                           fsr2l	equ	0xFD9
  2107                           status	equ	0xFD8
  2108                           
  2109 ;; *************** function _writePortE *****************
  2110 ;; Defined at:
  2111 ;;		line 145 in file "main.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  data            1    wreg     unsigned char 
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;  data            1   14[COMRAM] unsigned char 
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		wreg
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2125 ;;      Params:         0       0       0       0       0       0       0       0       0
  2126 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2127 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2128 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2129 ;;Total ram usage:        1 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    1
  2132 ;; This function calls:
  2133 ;;		Nothing
  2134 ;; This function is called by:
  2135 ;;		_writeAddress
  2136 ;;		_onData
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text11
  2141  000FE0                     __ptext11:
  2142                           	opt stack 0
  2143  000FE0                     _writePortE:
  2144                           	opt stack 28
  2145                           
  2146                           ;incstack = 0
  2147                           ;writePortE@data stored from wreg
  2148  000FE0  6E0F               	movwf	writePortE@data,c
  2149                           
  2150                           ;main.c: 147: PORTE = data;
  2151  000FE2  C00F  FF84         	movff	writePortE@data,3972	;volatile
  2152  000FE6  0012               	return		;funcret
  2153  000FE8                     __end_of_writePortE:
  2154                           	opt stack 0
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           postinc0	equ	0xFEE
  2160                           wreg	equ	0xFE8
  2161                           postdec1	equ	0xFE5
  2162                           fsr1h	equ	0xFE2
  2163                           fsr1l	equ	0xFE1
  2164                           indf2	equ	0xFDF
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _writePortA *****************
  2170 ;; Defined at:
  2171 ;;		line 125 in file "main.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  data            1    wreg     unsigned char 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  data            1   14[COMRAM] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2185 ;;      Params:         0       0       0       0       0       0       0       0       0
  2186 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2188 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2189 ;;Total ram usage:        1 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    1
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_writeAddress
  2196 ;;		_onData
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text12
  2201  000FE8                     __ptext12:
  2202                           	opt stack 0
  2203  000FE8                     _writePortA:
  2204                           	opt stack 28
  2205                           
  2206                           ;incstack = 0
  2207                           ;writePortA@data stored from wreg
  2208  000FE8  6E0F               	movwf	writePortA@data,c
  2209                           
  2210                           ;main.c: 127: PORTA = data;
  2211  000FEA  C00F  FF80         	movff	writePortA@data,3968	;volatile
  2212  000FEE  0012               	return		;funcret
  2213  000FF0                     __end_of_writePortA:
  2214                           	opt stack 0
  2215                           tblptru	equ	0xFF8
  2216                           tblptrh	equ	0xFF7
  2217                           tblptrl	equ	0xFF6
  2218                           tablat	equ	0xFF5
  2219                           postinc0	equ	0xFEE
  2220                           wreg	equ	0xFE8
  2221                           postdec1	equ	0xFE5
  2222                           fsr1h	equ	0xFE2
  2223                           fsr1l	equ	0xFE1
  2224                           indf2	equ	0xFDF
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function _logicDataToPhysical *****************
  2230 ;; Defined at:
  2231 ;;		line 140 in file "receiver.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  value0          1    wreg     unsigned char 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  value0          1   15[COMRAM] unsigned char 
  2236 ;;  pvalue          1   14[COMRAM] unsigned char 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      unsigned char 
  2239 ;; Registers used:
  2240 ;;		wreg, status,2, status,0
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2246 ;;      Params:         0       0       0       0       0       0       0       0       0
  2247 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2249 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2250 ;;Total ram usage:        2 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    1
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_writeAddressPhysical
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text13
  2261  000EC8                     __ptext13:
  2262                           	opt stack 0
  2263  000EC8                     _logicDataToPhysical:
  2264                           	opt stack 27
  2265                           
  2266                           ;incstack = 0
  2267                           ;logicDataToPhysical@value0 stored from wreg
  2268  000EC8  6E10               	movwf	logicDataToPhysical@value0,c
  2269                           
  2270                           ;receiver.c: 142: uint8_t pvalue = 0;
  2271  000ECA  0E00               	movlw	0
  2272  000ECC  6E0F               	movwf	logicDataToPhysical@pvalue,c
  2273                           
  2274                           ;receiver.c: 143: if (value0 & (1 << 0)) pvalue |= 1 << 3;
  2275  000ECE  B010               	btfsc	logicDataToPhysical@value0,0,c
  2276  000ED0  860F               	bsf	logicDataToPhysical@pvalue,3,c
  2277                           
  2278                           ;receiver.c: 144: if (value0 & (1 << 1)) pvalue |= 1 << 4;
  2279  000ED2  B210               	btfsc	logicDataToPhysical@value0,1,c
  2280  000ED4  880F               	bsf	logicDataToPhysical@pvalue,4,c
  2281                           
  2282                           ;receiver.c: 145: if (value0 & (1 << 2)) pvalue |= 1 << 2;
  2283  000ED6  B410               	btfsc	logicDataToPhysical@value0,2,c
  2284  000ED8  840F               	bsf	logicDataToPhysical@pvalue,2,c
  2285                           
  2286                           ;receiver.c: 146: if (value0 & (1 << 3)) pvalue |= 1 << 5;
  2287  000EDA  B610               	btfsc	logicDataToPhysical@value0,3,c
  2288  000EDC  8A0F               	bsf	logicDataToPhysical@pvalue,5,c
  2289                           
  2290                           ;receiver.c: 147: if (value0 & (1 << 4)) pvalue |= 1 << 1;
  2291  000EDE  B810               	btfsc	logicDataToPhysical@value0,4,c
  2292  000EE0  820F               	bsf	logicDataToPhysical@pvalue,1,c
  2293                           
  2294                           ;receiver.c: 148: if (value0 & (1 << 5)) pvalue |= 1 << 6;
  2295  000EE2  BA10               	btfsc	logicDataToPhysical@value0,5,c
  2296  000EE4  8C0F               	bsf	logicDataToPhysical@pvalue,6,c
  2297                           
  2298                           ;receiver.c: 149: if (value0 & (1 << 6)) pvalue |= 1 << 0;
  2299  000EE6  BC10               	btfsc	logicDataToPhysical@value0,6,c
  2300  000EE8  800F               	bsf	logicDataToPhysical@pvalue,0,c
  2301                           
  2302                           ;receiver.c: 150: if (value0 & (1 << 7)) pvalue |= 1 << 7;
  2303  000EEA  BE10               	btfsc	logicDataToPhysical@value0,7,c
  2304  000EEC  8E0F               	bsf	logicDataToPhysical@pvalue,7,c
  2305                           
  2306                           ;receiver.c: 151: return pvalue;
  2307  000EEE  500F               	movf	logicDataToPhysical@pvalue,w,c
  2308  000EF0  0012               	return	
  2309  000EF2                     __end_of_logicDataToPhysical:
  2310                           	opt stack 0
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1h	equ	0xFE2
  2319                           fsr1l	equ	0xFE1
  2320                           indf2	equ	0xFDF
  2321                           fsr2h	equ	0xFDA
  2322                           fsr2l	equ	0xFD9
  2323                           status	equ	0xFD8
  2324                           
  2325 ;; *************** function _logicAddressToPhysical *****************
  2326 ;; Defined at:
  2327 ;;		line 118 in file "receiver.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  adr0            2   14[COMRAM] unsigned int 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;  padr            2   16[COMRAM] unsigned int 
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  2   14[COMRAM] unsigned int 
  2334 ;; Registers used:
  2335 ;;		wreg, status,2, status,0
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2341 ;;      Params:         2       0       0       0       0       0       0       0       0
  2342 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2344 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2345 ;;Total ram usage:        4 bytes
  2346 ;; Hardware stack levels used:    1
  2347 ;; Hardware stack levels required when called:    1
  2348 ;; This function calls:
  2349 ;;		Nothing
  2350 ;; This function is called by:
  2351 ;;		_writeAddressPhysical
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           	psect	text14
  2356  000D08                     __ptext14:
  2357                           	opt stack 0
  2358  000D08                     _logicAddressToPhysical:
  2359                           	opt stack 27
  2360                           
  2361                           ;receiver.c: 120: uint16_t padr = 0;
  2362                           
  2363                           ;incstack = 0
  2364  000D08  0E00               	movlw	0
  2365  000D0A  6E12               	movwf	logicAddressToPhysical@padr+1,c
  2366  000D0C  0E00               	movlw	0
  2367  000D0E  6E11               	movwf	logicAddressToPhysical@padr,c
  2368                           
  2369                           ;receiver.c: 121: if (adr0 & (1 << 0)) padr |= 1 << 0;
  2370  000D10  B00F               	btfsc	logicAddressToPhysical@adr0,0,c
  2371  000D12  8011               	bsf	logicAddressToPhysical@padr,0,c
  2372                           
  2373                           ;receiver.c: 122: if (adr0 & (1 << 1)) padr |= 1 << 12;
  2374  000D14  B20F               	btfsc	logicAddressToPhysical@adr0,1,c
  2375  000D16  8812               	bsf	logicAddressToPhysical@padr+1,4,c
  2376                           
  2377                           ;receiver.c: 123: if (adr0 & (1 << 2)) padr |= 1 << 13;
  2378  000D18  B40F               	btfsc	logicAddressToPhysical@adr0,2,c
  2379  000D1A  8A12               	bsf	logicAddressToPhysical@padr+1,5,c
  2380                           
  2381                           ;receiver.c: 124: if (adr0 & (1 << 3)) padr |= 1 << 14;
  2382  000D1C  B60F               	btfsc	logicAddressToPhysical@adr0,3,c
  2383  000D1E  8C12               	bsf	logicAddressToPhysical@padr+1,6,c
  2384                           
  2385                           ;receiver.c: 125: if (adr0 & (1 << 4)) padr |= 1 << 10;
  2386  000D20  B80F               	btfsc	logicAddressToPhysical@adr0,4,c
  2387  000D22  8412               	bsf	logicAddressToPhysical@padr+1,2,c
  2388                           
  2389                           ;receiver.c: 126: if (adr0 & (1 << 5)) padr |= 1 << 2;
  2390  000D24  BA0F               	btfsc	logicAddressToPhysical@adr0,5,c
  2391  000D26  8411               	bsf	logicAddressToPhysical@padr,2,c
  2392                           
  2393                           ;receiver.c: 127: if (adr0 & (1 << 6)) padr |= 1 << 3;
  2394  000D28  BC0F               	btfsc	logicAddressToPhysical@adr0,6,c
  2395  000D2A  8611               	bsf	logicAddressToPhysical@padr,3,c
  2396                           
  2397                           ;receiver.c: 128: if (adr0 & (1 << 7)) padr |= 1 << 11;
  2398  000D2C  BE0F               	btfsc	logicAddressToPhysical@adr0,7,c
  2399  000D2E  8612               	bsf	logicAddressToPhysical@padr+1,3,c
  2400                           
  2401                           ;receiver.c: 129: if (adr0 & (1 << 8)) padr |= 1 << 8;
  2402  000D30  B010               	btfsc	logicAddressToPhysical@adr0+1,0,c
  2403  000D32  8012               	bsf	logicAddressToPhysical@padr+1,0,c
  2404                           
  2405                           ;receiver.c: 130: if (adr0 & (1 << 9)) padr |= 1 << 6;
  2406  000D34  B210               	btfsc	logicAddressToPhysical@adr0+1,1,c
  2407  000D36  8C11               	bsf	logicAddressToPhysical@padr,6,c
  2408                           
  2409                           ;receiver.c: 131: if (adr0 & (1 << 10)) padr |= 1 << 1;
  2410  000D38  B410               	btfsc	logicAddressToPhysical@adr0+1,2,c
  2411  000D3A  8211               	bsf	logicAddressToPhysical@padr,1,c
  2412                           
  2413                           ;receiver.c: 132: if (adr0 & (1 << 11)) padr |= 1 << 7;
  2414  000D3C  B610               	btfsc	logicAddressToPhysical@adr0+1,3,c
  2415  000D3E  8E11               	bsf	logicAddressToPhysical@padr,7,c
  2416                           
  2417                           ;receiver.c: 133: if (adr0 & (1 << 12)) padr |= 1 << 4;
  2418  000D40  B810               	btfsc	logicAddressToPhysical@adr0+1,4,c
  2419  000D42  8811               	bsf	logicAddressToPhysical@padr,4,c
  2420                           
  2421                           ;receiver.c: 134: if (adr0 & (1 << 13)) padr |= 1 << 5;
  2422  000D44  BA10               	btfsc	logicAddressToPhysical@adr0+1,5,c
  2423  000D46  8A11               	bsf	logicAddressToPhysical@padr,5,c
  2424                           
  2425                           ;receiver.c: 135: if (adr0 & (1 << 14)) padr |= 1 << 9;
  2426  000D48  BC10               	btfsc	logicAddressToPhysical@adr0+1,6,c
  2427  000D4A  8212               	bsf	logicAddressToPhysical@padr+1,1,c
  2428                           
  2429                           ;receiver.c: 136: if (adr0 & (1 << 15)) padr |= 1 << 15;
  2430  000D4C  BE10               	btfsc	logicAddressToPhysical@adr0+1,7,c
  2431  000D4E  8E12               	bsf	logicAddressToPhysical@padr+1,7,c
  2432                           
  2433                           ;receiver.c: 137: return padr;
  2434  000D50  C011  F00F         	movff	logicAddressToPhysical@padr,?_logicAddressToPhysical
  2435  000D54  C012  F010         	movff	logicAddressToPhysical@padr+1,?_logicAddressToPhysical+1
  2436  000D58  0012               	return	
  2437  000D5A                     __end_of_logicAddressToPhysical:
  2438                           	opt stack 0
  2439                           tblptru	equ	0xFF8
  2440                           tblptrh	equ	0xFF7
  2441                           tblptrl	equ	0xFF6
  2442                           tablat	equ	0xFF5
  2443                           postinc0	equ	0xFEE
  2444                           wreg	equ	0xFE8
  2445                           postdec1	equ	0xFE5
  2446                           fsr1h	equ	0xFE2
  2447                           fsr1l	equ	0xFE1
  2448                           indf2	equ	0xFDF
  2449                           fsr2h	equ	0xFDA
  2450                           fsr2l	equ	0xFD9
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _sendProgrammerEnableCommand *****************
  2454 ;; Defined at:
  2455 ;;		line 292 in file "receiver.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  enable          1    wreg     unsigned char 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  enable          1   15[COMRAM] unsigned char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2469 ;;      Params:         0       0       0       0       0       0       0       0       0
  2470 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2472 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2473 ;;Total ram usage:        1 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    2
  2476 ;; This function calls:
  2477 ;;		_writeByte
  2478 ;; This function is called by:
  2479 ;;		_onData
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text15
  2484  000F62                     __ptext15:
  2485                           	opt stack 0
  2486  000F62                     _sendProgrammerEnableCommand:
  2487                           	opt stack 27
  2488                           
  2489                           ;incstack = 0
  2490                           ;sendProgrammerEnableCommand@enable stored from wreg
  2491  000F62  6E10               	movwf	sendProgrammerEnableCommand@enable,c
  2492                           
  2493                           ;receiver.c: 294: PORTDbits.RD7 = 0;
  2494  000F64  9E83               	bcf	3971,7,c	;volatile
  2495                           
  2496                           ;receiver.c: 295: TRISDbits.TRISD7 = 0;
  2497  000F66  9E95               	bcf	3989,7,c	;volatile
  2498                           
  2499                           ;receiver.c: 296: writeByte('V');
  2500  000F68  0E56               	movlw	86
  2501  000F6A  EC13  F006         	call	_writeByte
  2502                           
  2503                           ;receiver.c: 297: writeByte(6);
  2504  000F6E  0E06               	movlw	6
  2505  000F70  EC13  F006         	call	_writeByte
  2506                           
  2507                           ;receiver.c: 298: writeByte(enable);
  2508  000F74  5010               	movf	sendProgrammerEnableCommand@enable,w,c
  2509  000F76  EC13  F006         	call	_writeByte
  2510                           
  2511                           ;receiver.c: 299: TRISDbits.TRISD7 = 1;
  2512  000F7A  8E95               	bsf	3989,7,c	;volatile
  2513  000F7C  0012               	return		;funcret
  2514  000F7E                     __end_of_sendProgrammerEnableCommand:
  2515                           	opt stack 0
  2516                           tblptru	equ	0xFF8
  2517                           tblptrh	equ	0xFF7
  2518                           tblptrl	equ	0xFF6
  2519                           tablat	equ	0xFF5
  2520                           postinc0	equ	0xFEE
  2521                           wreg	equ	0xFE8
  2522                           postdec1	equ	0xFE5
  2523                           fsr1h	equ	0xFE2
  2524                           fsr1l	equ	0xFE1
  2525                           indf2	equ	0xFDF
  2526                           fsr2h	equ	0xFDA
  2527                           fsr2l	equ	0xFD9
  2528                           status	equ	0xFD8
  2529                           
  2530 ;; *************** function _sendBankCommand *****************
  2531 ;; Defined at:
  2532 ;;		line 282 in file "receiver.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  bank            1    wreg     unsigned char 
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  bank            1   15[COMRAM] unsigned char 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg, status,2, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2546 ;;      Params:         0       0       0       0       0       0       0       0       0
  2547 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2549 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2550 ;;Total ram usage:        1 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    2
  2553 ;; This function calls:
  2554 ;;		_writeByte
  2555 ;; This function is called by:
  2556 ;;		_onData
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text16
  2561  000F7E                     __ptext16:
  2562                           	opt stack 0
  2563  000F7E                     _sendBankCommand:
  2564                           	opt stack 27
  2565                           
  2566                           ;incstack = 0
  2567                           ;sendBankCommand@bank stored from wreg
  2568  000F7E  6E10               	movwf	sendBankCommand@bank,c
  2569                           
  2570                           ;receiver.c: 284: PORTDbits.RD7 = 0;
  2571  000F80  9E83               	bcf	3971,7,c	;volatile
  2572                           
  2573                           ;receiver.c: 285: TRISDbits.TRISD7 = 0;
  2574  000F82  9E95               	bcf	3989,7,c	;volatile
  2575                           
  2576                           ;receiver.c: 286: writeByte('V');
  2577  000F84  0E56               	movlw	86
  2578  000F86  EC13  F006         	call	_writeByte
  2579                           
  2580                           ;receiver.c: 287: writeByte(5);
  2581  000F8A  0E05               	movlw	5
  2582  000F8C  EC13  F006         	call	_writeByte
  2583                           
  2584                           ;receiver.c: 288: writeByte(bank);
  2585  000F90  5010               	movf	sendBankCommand@bank,w,c
  2586  000F92  EC13  F006         	call	_writeByte
  2587                           
  2588                           ;receiver.c: 289: TRISDbits.TRISD7 = 1;
  2589  000F96  8E95               	bsf	3989,7,c	;volatile
  2590  000F98  0012               	return		;funcret
  2591  000F9A                     __end_of_sendBankCommand:
  2592                           	opt stack 0
  2593                           tblptru	equ	0xFF8
  2594                           tblptrh	equ	0xFF7
  2595                           tblptrl	equ	0xFF6
  2596                           tablat	equ	0xFF5
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           postdec1	equ	0xFE5
  2600                           fsr1h	equ	0xFE2
  2601                           fsr1l	equ	0xFE1
  2602                           indf2	equ	0xFDF
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _writeByte *****************
  2608 ;; Defined at:
  2609 ;;		line 199 in file "receiver.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  b               1    wreg     unsigned char 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  b               1   14[COMRAM] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2623 ;;      Params:         0       0       0       0       0       0       0       0       0
  2624 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2626 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2627 ;;Total ram usage:        1 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    1
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_sendBankCommand
  2634 ;;		_sendProgrammerEnableCommand
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text17
  2639  000C26                     __ptext17:
  2640                           	opt stack 0
  2641  000C26                     _writeByte:
  2642                           	opt stack 27
  2643                           
  2644                           ;incstack = 0
  2645                           ;writeByte@b stored from wreg
  2646  000C26  6E0F               	movwf	writeByte@b,c
  2647                           
  2648                           ;receiver.c: 201: shiftCounter = 8;
  2649  000C28  0E08               	movlw	8
  2650  000C2A  6E24               	movwf	_shiftCounter,c
  2651                           
  2652                           ;receiver.c: 202: shift = b;
  2653  000C2C  C00F  F023         	movff	writeByte@b,_shift
  2654                           
  2655                           ; STATUS bits ;# 
  2656                           ; C EQU 0 ;# 
  2657  0000                     
  2658                           ; wait 21 us ;# 
  2659  000C30  0100               	banksel	_temp	;# 
  2660  000C32  0E15               	movlw	21	;# 
  2661  000C34  6F27               	movwf	_temp,b	;# 
  2662  000C36                     wait21:
  2663  000C36  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2664  000C38  EF1B  F006         	goto	wait21	;# 
  2665  000C3C  010F               	banksel	3971	;# 
  2666  000C3E                     start_write:
  2667                           
  2668                           ;# 
  2669  000C3E  8E83               	bsf	3971,7,c	;# 
  2670  000C40  0100               	banksel	_shift	;# 
  2671  000C42  AF23               	btfss	_shift,7,b	;# 
  2672  000C44  EF38  F006         	goto	bit0	;# 
  2673                           
  2674                           ; send 1 bit: 10 us 1, 20 us pause ;# 
  2675                           ; wait 10 us ;# 
  2676  000C48  0100               	banksel	_temp	;# 
  2677  000C4A  0E0A               	movlw	10	;# 
  2678  000C4C  6F27               	movwf	_temp,b	;# 
  2679  000C4E                     wait10:
  2680  000C4E  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2681  000C50  EF27  F006         	goto	wait10	;# 
  2682  000C54  F000               	nop		;# 
  2683  000C56  010F               	banksel	3971	;# 
  2684  000C58  9E83               	bcf	3971,7,c	;# 
  2685                           
  2686                           ; wait 21 us ;# 
  2687  000C5A  0100               	banksel	_temp	;# 
  2688  000C5C  0E15               	movlw	21	;# 
  2689  000C5E  6F27               	movwf	_temp,b	;# 
  2690  000C60                     wait20:
  2691  000C60  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2692  000C62  EF30  F006         	goto	wait20	;# 
  2693  000C66  F000               	nop		;# 
  2694  000C68  F000               	nop		;# 
  2695  000C6A  010F               	banksel	3971	;# 
  2696  000C6C  EF49  F006         	goto	write_end	;# 
  2697  000C70                     bit0:
  2698                           
  2699                           ;# 
  2700  000C70  0100               	banksel	_temp	;# 
  2701  000C72  0E03               	movlw	3	;# 
  2702  000C74  6F27               	movwf	_temp,b	;# 
  2703  000C76                     wait5:
  2704  000C76  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2705  000C78  EF3B  F006         	goto	wait5	;# 
  2706  000C7C  F000               	nop		;# 
  2707  000C7E  F000               	nop		;# 
  2708  000C80  010F               	banksel	3971	;# 
  2709  000C82  9E83               	bcf	3971,7,c	;# 
  2710  000C84  0100               	banksel	_temp	;# 
  2711  000C86  0E1E               	movlw	30	;# 
  2712  000C88  6F27               	movwf	_temp,b	;# 
  2713  000C8A                     wait25:
  2714  000C8A  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2715  000C8C  EF45  F006         	goto	wait25	;# 
  2716  000C90  010F               	banksel	3971	;# 
  2717  000C92                     write_end:
  2718                           
  2719                           ;# 
  2720  000C92  0100               	banksel	_shift	;# 
  2721  000C94  4723               	rlncf	_shift& (0+255),f,b	;# 
  2722                           
  2723                           ; shift all bits ;# 
  2724  000C96  0100               	banksel	_shiftCounter	;# 
  2725  000C98  2F24               	decfsz	_shiftCounter& (0+255),f,b	;# 
  2726  000C9A  EF1F  F006         	goto	start_write	;# 
  2727                           
  2728                           ; wait 100 us ;# 
  2729  000C9E  0100               	banksel	_temp	;# 
  2730  000CA0  0E64               	movlw	100	;# 
  2731  000CA2  6F27               	movwf	_temp,b	;# 
  2732  000CA4                     wait100:
  2733  000CA4  2F27               	decfsz	_temp& (0+255),f,b	;# 
  2734  000CA6  EF52  F006         	goto	wait100	;# 
  2735  000CAA  010F               	banksel	3971	;# 
  2736  000CAC  0012               	return		;funcret
  2737  000CAE                     __end_of_writeByte:
  2738                           	opt stack 0
  2739                           tblptru	equ	0xFF8
  2740                           tblptrh	equ	0xFF7
  2741                           tblptrl	equ	0xFF6
  2742                           tablat	equ	0xFF5
  2743                           postinc0	equ	0xFEE
  2744                           wreg	equ	0xFE8
  2745                           postdec1	equ	0xFE5
  2746                           fsr1h	equ	0xFE2
  2747                           fsr1l	equ	0xFE1
  2748                           indf2	equ	0xFDF
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function _readPort *****************
  2754 ;; Defined at:
  2755 ;;		line 103 in file "receiver.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, status,2, status,0, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2769 ;;      Params:         0       0       0       0       0       0       0       0       0
  2770 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2772 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2773 ;;Total ram usage:        0 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    2
  2776 ;; This function calls:
  2777 ;;		_readPortA
  2778 ;;		_readPortB
  2779 ;;		_readPortC
  2780 ;;		_readPortD
  2781 ;;		_readPortE
  2782 ;; This function is called by:
  2783 ;;		_onData
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text18
  2788  000DA8                     __ptext18:
  2789                           	opt stack 0
  2790  000DA8                     _readPort:
  2791                           	opt stack 27
  2792                           
  2793                           ;receiver.c: 105: if (port == PORT_A) {
  2794                           
  2795                           ;incstack = 0
  2796  000DA8  5025               	movf	_port,w,c
  2797  000DAA  A4D8               	btfss	status,2,c
  2798  000DAC  D004               	goto	l1192
  2799                           
  2800                           ;receiver.c: 106: value = readPortA();
  2801  000DAE  EC0C  F008         	call	_readPortA	;wreg free
  2802  000DB2  6E2A               	movwf	_value,c
  2803                           
  2804                           ;receiver.c: 107: } else if (port == PORT_B) {
  2805  000DB4  0012               	return	
  2806  000DB6                     l1192:
  2807  000DB6  0425               	decf	_port,w,c
  2808  000DB8  A4D8               	btfss	status,2,c
  2809  000DBA  D004               	goto	l1196
  2810                           
  2811                           ;receiver.c: 108: value = readPortB();
  2812  000DBC  EC0A  F008         	call	_readPortB	;wreg free
  2813  000DC0  6E2A               	movwf	_value,c
  2814                           
  2815                           ;receiver.c: 109: } else if (port == PORT_C) {
  2816  000DC2  0012               	return	
  2817  000DC4                     l1196:
  2818  000DC4  0E02               	movlw	2
  2819  000DC6  1825               	xorwf	_port,w,c
  2820  000DC8  A4D8               	btfss	status,2,c
  2821  000DCA  D004               	goto	l1200
  2822                           
  2823                           ;receiver.c: 110: value = readPortC();
  2824  000DCC  EC08  F008         	call	_readPortC	;wreg free
  2825  000DD0  6E2A               	movwf	_value,c
  2826                           
  2827                           ;receiver.c: 111: } else if (port == PORT_D) {
  2828  000DD2  0012               	return	
  2829  000DD4                     l1200:
  2830  000DD4  0E03               	movlw	3
  2831  000DD6  1825               	xorwf	_port,w,c
  2832  000DD8  A4D8               	btfss	status,2,c
  2833  000DDA  D004               	goto	l1204
  2834                           
  2835                           ;receiver.c: 112: value = readPortD();
  2836  000DDC  EC06  F008         	call	_readPortD	;wreg free
  2837  000DE0  6E2A               	movwf	_value,c
  2838                           
  2839                           ;receiver.c: 113: } else if (port == PORT_E) {
  2840  000DE2  0012               	return	
  2841  000DE4                     l1204:
  2842  000DE4  0E04               	movlw	4
  2843  000DE6  1825               	xorwf	_port,w,c
  2844  000DE8  A4D8               	btfss	status,2,c
  2845  000DEA  0012               	return	
  2846                           
  2847                           ;receiver.c: 114: value = readPortE();
  2848  000DEC  EC04  F008         	call	_readPortE	;wreg free
  2849  000DF0  6E2A               	movwf	_value,c
  2850  000DF2  0012               	return	
  2851  000DF4                     __end_of_readPort:
  2852                           	opt stack 0
  2853                           tblptru	equ	0xFF8
  2854                           tblptrh	equ	0xFF7
  2855                           tblptrl	equ	0xFF6
  2856                           tablat	equ	0xFF5
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           postdec1	equ	0xFE5
  2860                           fsr1h	equ	0xFE2
  2861                           fsr1l	equ	0xFE1
  2862                           indf2	equ	0xFDF
  2863                           fsr2h	equ	0xFDA
  2864                           fsr2l	equ	0xFD9
  2865                           status	equ	0xFD8
  2866                           
  2867 ;; *************** function _readPortE *****************
  2868 ;; Defined at:
  2869 ;;		line 197 in file "main.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;		None
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      unsigned char 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2883 ;;      Params:         0       0       0       0       0       0       0       0       0
  2884 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2886 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2887 ;;Total ram usage:        0 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    1
  2890 ;; This function calls:
  2891 ;;		Nothing
  2892 ;; This function is called by:
  2893 ;;		_readPort
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           	psect	text19
  2898  001008                     __ptext19:
  2899                           	opt stack 0
  2900  001008                     _readPortE:
  2901                           	opt stack 27
  2902                           
  2903                           ;main.c: 199: return PORTE;
  2904                           
  2905                           ;incstack = 0
  2906  001008  5084               	movf	3972,w,c	;volatile
  2907  00100A  0012               	return	
  2908  00100C                     __end_of_readPortE:
  2909                           	opt stack 0
  2910                           tblptru	equ	0xFF8
  2911                           tblptrh	equ	0xFF7
  2912                           tblptrl	equ	0xFF6
  2913                           tablat	equ	0xFF5
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           postdec1	equ	0xFE5
  2917                           fsr1h	equ	0xFE2
  2918                           fsr1l	equ	0xFE1
  2919                           indf2	equ	0xFDF
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _readPortD *****************
  2925 ;; Defined at:
  2926 ;;		line 192 in file "main.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;		None
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;		None
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  1    wreg      unsigned char 
  2933 ;; Registers used:
  2934 ;;		wreg, status,2
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2940 ;;      Params:         0       0       0       0       0       0       0       0       0
  2941 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2942 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2943 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2944 ;;Total ram usage:        0 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    1
  2947 ;; This function calls:
  2948 ;;		Nothing
  2949 ;; This function is called by:
  2950 ;;		_readPort
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text20
  2955  00100C                     __ptext20:
  2956                           	opt stack 0
  2957  00100C                     _readPortD:
  2958                           	opt stack 27
  2959                           
  2960                           ;main.c: 194: return PORTD;
  2961                           
  2962                           ;incstack = 0
  2963  00100C  5083               	movf	3971,w,c	;volatile
  2964  00100E  0012               	return	
  2965  001010                     __end_of_readPortD:
  2966                           	opt stack 0
  2967                           tblptru	equ	0xFF8
  2968                           tblptrh	equ	0xFF7
  2969                           tblptrl	equ	0xFF6
  2970                           tablat	equ	0xFF5
  2971                           postinc0	equ	0xFEE
  2972                           wreg	equ	0xFE8
  2973                           postdec1	equ	0xFE5
  2974                           fsr1h	equ	0xFE2
  2975                           fsr1l	equ	0xFE1
  2976                           indf2	equ	0xFDF
  2977                           fsr2h	equ	0xFDA
  2978                           fsr2l	equ	0xFD9
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _readPortC *****************
  2982 ;; Defined at:
  2983 ;;		line 187 in file "main.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      unsigned char 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2997 ;;      Params:         0       0       0       0       0       0       0       0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3000 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3001 ;;Total ram usage:        0 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    1
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_readPort
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text21
  3012  001010                     __ptext21:
  3013                           	opt stack 0
  3014  001010                     _readPortC:
  3015                           	opt stack 27
  3016                           
  3017                           ;main.c: 189: return PORTC;
  3018                           
  3019                           ;incstack = 0
  3020  001010  5082               	movf	3970,w,c	;volatile
  3021  001012  0012               	return	
  3022  001014                     __end_of_readPortC:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           postinc0	equ	0xFEE
  3029                           wreg	equ	0xFE8
  3030                           postdec1	equ	0xFE5
  3031                           fsr1h	equ	0xFE2
  3032                           fsr1l	equ	0xFE1
  3033                           indf2	equ	0xFDF
  3034                           fsr2h	equ	0xFDA
  3035                           fsr2l	equ	0xFD9
  3036                           status	equ	0xFD8
  3037                           
  3038 ;; *************** function _readPortB *****************
  3039 ;; Defined at:
  3040 ;;		line 182 in file "main.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;		None
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      unsigned char 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3054 ;;      Params:         0       0       0       0       0       0       0       0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3057 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3058 ;;Total ram usage:        0 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    1
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_readPort
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text22
  3069  001014                     __ptext22:
  3070                           	opt stack 0
  3071  001014                     _readPortB:
  3072                           	opt stack 27
  3073                           
  3074                           ;main.c: 184: return PORTB;
  3075                           
  3076                           ;incstack = 0
  3077  001014  5081               	movf	3969,w,c	;volatile
  3078  001016  0012               	return	
  3079  001018                     __end_of_readPortB:
  3080                           	opt stack 0
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           postinc0	equ	0xFEE
  3086                           wreg	equ	0xFE8
  3087                           postdec1	equ	0xFE5
  3088                           fsr1h	equ	0xFE2
  3089                           fsr1l	equ	0xFE1
  3090                           indf2	equ	0xFDF
  3091                           fsr2h	equ	0xFDA
  3092                           fsr2l	equ	0xFD9
  3093                           status	equ	0xFD8
  3094                           
  3095 ;; *************** function _readAddress *****************
  3096 ;; Defined at:
  3097 ;;		line 181 in file "receiver.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  adr             2   15[COMRAM] unsigned int 
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  d               1   17[COMRAM] unsigned char 
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      unsigned char 
  3104 ;; Registers used:
  3105 ;;		wreg, status,2, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 0/0
  3108 ;;		On exit  : 0/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3111 ;;      Params:         2       0       0       0       0       0       0       0       0
  3112 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3114 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3115 ;;Total ram usage:        3 bytes
  3116 ;; Hardware stack levels used:    1
  3117 ;; Hardware stack levels required when called:    2
  3118 ;; This function calls:
  3119 ;;		_readPortA
  3120 ;;		_writePortB
  3121 ;;		_writePortC
  3122 ;;		_writePortD
  3123 ;; This function is called by:
  3124 ;;		_onData
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text23
  3129  000F1C                     __ptext23:
  3130                           	opt stack 0
  3131  000F1C                     _readAddress:
  3132                           	opt stack 27
  3133                           
  3134                           ;receiver.c: 183: uint8_t d;
  3135                           ;receiver.c: 185: writePortC(0xff);
  3136                           
  3137                           ;incstack = 0
  3138  000F1C  0EFF               	movlw	255
  3139  000F1E  ECFC  F007         	call	_writePortC
  3140                           
  3141                           ;receiver.c: 186: writePortB(adr & 0xff);
  3142  000F22  5010               	movf	readAddress@adr,w,c
  3143  000F24  EC00  F008         	call	_writePortB
  3144                           
  3145                           ;receiver.c: 187: writePortD((adr >> 8) & 0xff);
  3146  000F28  5011               	movf	readAddress@adr+1,w,c
  3147  000F2A  ECF8  F007         	call	_writePortD
  3148                           
  3149                           ;receiver.c: 190: writePortC(0x40);
  3150  000F2E  0E40               	movlw	64
  3151  000F30  ECFC  F007         	call	_writePortC
  3152                           
  3153                           ;receiver.c: 192: d = readPortA();
  3154  000F34  EC0C  F008         	call	_readPortA	;wreg free
  3155  000F38  6E12               	movwf	readAddress@d,c
  3156                           
  3157                           ;receiver.c: 194: writePortC(0xff);
  3158  000F3A  0EFF               	movlw	255
  3159  000F3C  ECFC  F007         	call	_writePortC
  3160                           
  3161                           ;receiver.c: 196: return d;
  3162  000F40  5012               	movf	readAddress@d,w,c
  3163  000F42  0012               	return	
  3164  000F44                     __end_of_readAddress:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           postinc0	equ	0xFEE
  3171                           wreg	equ	0xFE8
  3172                           postdec1	equ	0xFE5
  3173                           fsr1h	equ	0xFE2
  3174                           fsr1l	equ	0xFE1
  3175                           indf2	equ	0xFDF
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _writePortD *****************
  3181 ;; Defined at:
  3182 ;;		line 140 in file "main.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  data            1    wreg     unsigned char 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  data            1   14[COMRAM] unsigned char 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3196 ;;      Params:         0       0       0       0       0       0       0       0       0
  3197 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3199 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3200 ;;Total ram usage:        1 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    1
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_writeAddress
  3207 ;;		_readAddress
  3208 ;;		_onData
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text24
  3213  000FF0                     __ptext24:
  3214                           	opt stack 0
  3215  000FF0                     _writePortD:
  3216                           	opt stack 28
  3217                           
  3218                           ;incstack = 0
  3219                           ;writePortD@data stored from wreg
  3220  000FF0  6E0F               	movwf	writePortD@data,c
  3221                           
  3222                           ;main.c: 142: PORTD = data;
  3223  000FF2  C00F  FF83         	movff	writePortD@data,3971	;volatile
  3224  000FF6  0012               	return		;funcret
  3225  000FF8                     __end_of_writePortD:
  3226                           	opt stack 0
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           postinc0	equ	0xFEE
  3232                           wreg	equ	0xFE8
  3233                           postdec1	equ	0xFE5
  3234                           fsr1h	equ	0xFE2
  3235                           fsr1l	equ	0xFE1
  3236                           indf2	equ	0xFDF
  3237                           fsr2h	equ	0xFDA
  3238                           fsr2l	equ	0xFD9
  3239                           status	equ	0xFD8
  3240                           
  3241 ;; *************** function _writePortC *****************
  3242 ;; Defined at:
  3243 ;;		line 135 in file "main.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  data            1    wreg     unsigned char 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  data            1   14[COMRAM] unsigned char 
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  1    wreg      void 
  3250 ;; Registers used:
  3251 ;;		wreg
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3257 ;;      Params:         0       0       0       0       0       0       0       0       0
  3258 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3259 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3260 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3261 ;;Total ram usage:        1 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    1
  3264 ;; This function calls:
  3265 ;;		Nothing
  3266 ;; This function is called by:
  3267 ;;		_writeAddress
  3268 ;;		_readAddress
  3269 ;;		_onData
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text25
  3274  000FF8                     __ptext25:
  3275                           	opt stack 0
  3276  000FF8                     _writePortC:
  3277                           	opt stack 28
  3278                           
  3279                           ;incstack = 0
  3280                           ;writePortC@data stored from wreg
  3281  000FF8  6E0F               	movwf	writePortC@data,c
  3282                           
  3283                           ;main.c: 137: PORTC = data;
  3284  000FFA  C00F  FF82         	movff	writePortC@data,3970	;volatile
  3285  000FFE  0012               	return		;funcret
  3286  001000                     __end_of_writePortC:
  3287                           	opt stack 0
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           postinc0	equ	0xFEE
  3293                           wreg	equ	0xFE8
  3294                           postdec1	equ	0xFE5
  3295                           fsr1h	equ	0xFE2
  3296                           fsr1l	equ	0xFE1
  3297                           indf2	equ	0xFDF
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function _writePortB *****************
  3303 ;; Defined at:
  3304 ;;		line 130 in file "main.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;  data            1    wreg     unsigned char 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  data            1   14[COMRAM] unsigned char 
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		wreg
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3318 ;;      Params:         0       0       0       0       0       0       0       0       0
  3319 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3321 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3322 ;;Total ram usage:        1 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    1
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_writeAddress
  3329 ;;		_readAddress
  3330 ;;		_onData
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           	psect	text26
  3335  001000                     __ptext26:
  3336                           	opt stack 0
  3337  001000                     _writePortB:
  3338                           	opt stack 28
  3339                           
  3340                           ;incstack = 0
  3341                           ;writePortB@data stored from wreg
  3342  001000  6E0F               	movwf	writePortB@data,c
  3343                           
  3344                           ;main.c: 132: PORTB = data;
  3345  001002  C00F  FF81         	movff	writePortB@data,3969	;volatile
  3346  001006  0012               	return		;funcret
  3347  001008                     __end_of_writePortB:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           postinc0	equ	0xFEE
  3354                           wreg	equ	0xFE8
  3355                           postdec1	equ	0xFE5
  3356                           fsr1h	equ	0xFE2
  3357                           fsr1l	equ	0xFE1
  3358                           indf2	equ	0xFDF
  3359                           fsr2h	equ	0xFDA
  3360                           fsr2l	equ	0xFD9
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function _readPortA *****************
  3364 ;; Defined at:
  3365 ;;		line 177 in file "main.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;		None
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;		None
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      unsigned char 
  3372 ;; Registers used:
  3373 ;;		wreg, status,2
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3379 ;;      Params:         0       0       0       0       0       0       0       0       0
  3380 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3382 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3383 ;;Total ram usage:        0 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    1
  3386 ;; This function calls:
  3387 ;;		Nothing
  3388 ;; This function is called by:
  3389 ;;		_readPort
  3390 ;;		_readAddress
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text27
  3395  001018                     __ptext27:
  3396                           	opt stack 0
  3397  001018                     _readPortA:
  3398                           	opt stack 27
  3399                           
  3400                           ;main.c: 179: return PORTA;
  3401                           
  3402                           ;incstack = 0
  3403  001018  5080               	movf	3968,w,c	;volatile
  3404  00101A  0012               	return	
  3405  00101C                     __end_of_readPortA:
  3406                           	opt stack 0
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           postinc0	equ	0xFEE
  3412                           wreg	equ	0xFE8
  3413                           postdec1	equ	0xFE5
  3414                           fsr1h	equ	0xFE2
  3415                           fsr1l	equ	0xFE1
  3416                           indf2	equ	0xFDF
  3417                           fsr2h	equ	0xFDA
  3418                           fsr2l	equ	0xFD9
  3419                           status	equ	0xFD8
  3420                           
  3421 ;; *************** function _parseHex *****************
  3422 ;; Defined at:
  3423 ;;		line 80 in file "receiver.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  x               1    wreg     unsigned char 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;  x               1   14[COMRAM] unsigned char 
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      char 
  3430 ;; Registers used:
  3431 ;;		wreg, status,2, status,0
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3437 ;;      Params:         0       0       0       0       0       0       0       0       0
  3438 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3440 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3441 ;;Total ram usage:        1 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    1
  3444 ;; This function calls:
  3445 ;;		Nothing
  3446 ;; This function is called by:
  3447 ;;		_onData
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text28
  3452  000EF2                     __ptext28:
  3453                           	opt stack 0
  3454  000EF2                     _parseHex:
  3455                           	opt stack 28
  3456                           
  3457                           ;incstack = 0
  3458                           ;parseHex@x stored from wreg
  3459  000EF2  6E0F               	movwf	parseHex@x,c
  3460                           
  3461                           ;receiver.c: 82: if (x >= '0' && x <= '9') {
  3462  000EF4  0E2F               	movlw	47
  3463  000EF6  640F               	cpfsgt	parseHex@x,c
  3464  000EF8  D006               	goto	l1170
  3465  000EFA  0E3A               	movlw	58
  3466  000EFC  600F               	cpfslt	parseHex@x,c
  3467  000EFE  D003               	goto	l1170
  3468                           
  3469                           ;receiver.c: 83: return x - '0';
  3470  000F00  500F               	movf	parseHex@x,w,c
  3471  000F02  0FD0               	addlw	208
  3472  000F04  0012               	return	
  3473  000F06                     l1170:
  3474  000F06  0E60               	movlw	96
  3475  000F08  640F               	cpfsgt	parseHex@x,c
  3476  000F0A  D006               	goto	l1178
  3477  000F0C  0E67               	movlw	103
  3478  000F0E  600F               	cpfslt	parseHex@x,c
  3479  000F10  D003               	goto	l1178
  3480                           
  3481                           ;receiver.c: 85: return x - 'a' + 10;
  3482  000F12  500F               	movf	parseHex@x,w,c
  3483  000F14  0FA9               	addlw	169
  3484  000F16  0012               	return	
  3485  000F18                     l1178:
  3486                           
  3487                           ;receiver.c: 86: }
  3488                           ;receiver.c: 87: return -1;
  3489  000F18  0EFF               	movlw	255
  3490  000F1A  0012               	return	
  3491  000F1C                     __end_of_parseHex:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           postinc0	equ	0xFEE
  3498                           wreg	equ	0xFE8
  3499                           postdec1	equ	0xFE5
  3500                           fsr1h	equ	0xFE2
  3501                           fsr1l	equ	0xFE1
  3502                           indf2	equ	0xFDF
  3503                           fsr2h	equ	0xFDA
  3504                           fsr2l	equ	0xFD9
  3505                           status	equ	0xFD8
  3506                           
  3507 ;; *************** function _error *****************
  3508 ;; Defined at:
  3509 ;;		line 90 in file "receiver.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;		None
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;		None
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3523 ;;      Params:         0       0       0       0       0       0       0       0       0
  3524 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3526 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3527 ;;Total ram usage:        0 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    2
  3530 ;; This function calls:
  3531 ;;		_writeChar
  3532 ;; This function is called by:
  3533 ;;		_onData
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text29
  3538  000FA6                     __ptext29:
  3539                           	opt stack 0
  3540  000FA6                     _error:
  3541                           	opt stack 27
  3542                           
  3543                           ;receiver.c: 92: state = STATE_IDLE;
  3544                           
  3545                           ;incstack = 0
  3546  000FA6  0E00               	movlw	0
  3547  000FA8  6E2B               	movwf	_state,c
  3548                           
  3549                           ;receiver.c: 93: writeChar('?');
  3550  000FAA  0E3F               	movlw	63
  3551  000FAC  ECD9  F007         	call	_writeChar
  3552  000FB0  0012               	return		;funcret
  3553  000FB2                     __end_of_error:
  3554                           	opt stack 0
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           postinc0	equ	0xFEE
  3560                           wreg	equ	0xFE8
  3561                           postdec1	equ	0xFE5
  3562                           fsr1h	equ	0xFE2
  3563                           fsr1l	equ	0xFE1
  3564                           indf2	equ	0xFDF
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function _writeChar *****************
  3570 ;; Defined at:
  3571 ;;		line 212 in file "main.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  data            1    wreg     unsigned char 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  data            1   14[COMRAM] unsigned char 
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3585 ;;      Params:         0       0       0       0       0       0       0       0       0
  3586 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3587 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3588 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3589 ;;Total ram usage:        1 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    1
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_error
  3596 ;;		_writeHex
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           	psect	text30
  3601  000FB2                     __ptext30:
  3602                           	opt stack 0
  3603  000FB2                     _writeChar:
  3604                           	opt stack 27
  3605                           
  3606                           ;incstack = 0
  3607                           ;writeChar@data stored from wreg
  3608  000FB2  6E0F               	movwf	writeChar@data,c
  3609  000FB4                     l122:
  3610  000FB4  A2AC               	btfss	4012,1,c	;volatile
  3611  000FB6  D7FE               	goto	l122
  3612                           
  3613                           ;main.c: 215: TXREG1 = data;
  3614  000FB8  C00F  FFAD         	movff	writeChar@data,4013	;volatile
  3615  000FBC  0012               	return		;funcret
  3616  000FBE                     __end_of_writeChar:
  3617                           	opt stack 0
  3618                           tblptru	equ	0xFF8
  3619                           tblptrh	equ	0xFF7
  3620                           tblptrl	equ	0xFF6
  3621                           tablat	equ	0xFF5
  3622                           postinc0	equ	0xFEE
  3623                           wreg	equ	0xFE8
  3624                           postdec1	equ	0xFE5
  3625                           fsr1h	equ	0xFE2
  3626                           fsr1l	equ	0xFE1
  3627                           indf2	equ	0xFDF
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function _initUart *****************
  3633 ;; Defined at:
  3634 ;;		line 102 in file "main.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;		None
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;		None
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      void 
  3641 ;; Registers used:
  3642 ;;		wreg, status,2
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3648 ;;      Params:         0       0       0       0       0       0       0       0       0
  3649 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3650 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3651 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3652 ;;Total ram usage:        0 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    1
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_main
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text31
  3663  000F44                     __ptext31:
  3664                           	opt stack 0
  3665  000F44                     _initUart:
  3666                           	opt stack 29
  3667                           
  3668                           ;main.c: 104: TXSTA1bits.SYNC = 0;
  3669                           
  3670                           ;incstack = 0
  3671  000F44  98AC               	bcf	4012,4,c	;volatile
  3672                           
  3673                           ;main.c: 105: TXSTA1bits.TX9 = 0;
  3674  000F46  9CAC               	bcf	4012,6,c	;volatile
  3675                           
  3676                           ;main.c: 106: TXSTA1bits.TXEN = 1;
  3677  000F48  8AAC               	bsf	4012,5,c	;volatile
  3678                           
  3679                           ;main.c: 108: RCSTA1bits.RX9 = 0;
  3680  000F4A  9CAB               	bcf	4011,6,c	;volatile
  3681                           
  3682                           ;main.c: 109: RCSTA1bits.CREN = 1;
  3683  000F4C  88AB               	bsf	4011,4,c	;volatile
  3684                           
  3685                           ;main.c: 110: RCSTA1bits.SPEN = 1;
  3686  000F4E  8EAB               	bsf	4011,7,c	;volatile
  3687                           
  3688                           ;main.c: 112: BAUDCON1bits.BRG16 = 1;
  3689  000F50  86B8               	bsf	4024,3,c	;volatile
  3690                           
  3691                           ;main.c: 113: TXSTA1bits.BRGH = 1;
  3692  000F52  84AC               	bsf	4012,2,c	;volatile
  3693                           
  3694                           ;main.c: 114: SPBRG1 = 15;
  3695  000F54  0E0F               	movlw	15
  3696  000F56  6EAF               	movwf	4015,c	;volatile
  3697                           
  3698                           ;main.c: 117: RCONbits.IPEN = 1;
  3699  000F58  8ED0               	bsf	4048,7,c	;volatile
  3700                           
  3701                           ;main.c: 118: INTCONbits.GIE = 1;
  3702  000F5A  8EF2               	bsf	intcon,7,c	;volatile
  3703                           
  3704                           ;main.c: 119: INTCONbits.PEIE = 1;
  3705  000F5C  8CF2               	bsf	intcon,6,c	;volatile
  3706                           
  3707                           ;main.c: 122: PIE1bits.RCIE = 1;
  3708  000F5E  8A9D               	bsf	3997,5,c	;volatile
  3709  000F60  0012               	return		;funcret
  3710  000F62                     __end_of_initUart:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           intcon	equ	0xFF2
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           postdec1	equ	0xFE5
  3720                           fsr1h	equ	0xFE2
  3721                           fsr1l	equ	0xFE1
  3722                           indf2	equ	0xFDF
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function _receiveData *****************
  3728 ;; Defined at:
  3729 ;;		line 89 in file "main.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;		None
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;		None
  3734 ;; Return value:  Size  Location     Type
  3735 ;;                  1    wreg      void 
  3736 ;; Registers used:
  3737 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3743 ;;      Params:         0       0       0       0       0       0       0       0       0
  3744 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3745 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3746 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3747 ;;Total ram usage:       14 bytes
  3748 ;; Hardware stack levels used:    1
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		Interrupt level 2
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	intcode
  3757  000008                     __pintcode:
  3758                           	opt stack 0
  3759  000008                     _receiveData:
  3760                           	opt stack 26
  3761                           
  3762                           ;incstack = 0
  3763  000008  822E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3764  00000A  CFFA F001          	movff	pclath,??_receiveData
  3765  00000E  CFFB F002          	movff	pclatu,??_receiveData+1
  3766  000012  CFE9 F003          	movff	fsr0l,??_receiveData+2
  3767  000016  CFEA F004          	movff	fsr0h,??_receiveData+3
  3768  00001A  CFE1 F005          	movff	fsr1l,??_receiveData+4
  3769  00001E  CFE2 F006          	movff	fsr1h,??_receiveData+5
  3770  000022  CFD9 F007          	movff	fsr2l,??_receiveData+6
  3771  000026  CFDA F008          	movff	fsr2h,??_receiveData+7
  3772  00002A  CFF3 F009          	movff	prodl,??_receiveData+8
  3773  00002E  CFF4 F00A          	movff	prodh,??_receiveData+9
  3774  000032  CFF6 F00B          	movff	tblptrl,??_receiveData+10
  3775  000036  CFF7 F00C          	movff	tblptrh,??_receiveData+11
  3776  00003A  CFF8 F00D          	movff	tblptru,??_receiveData+12
  3777  00003E  CFF5 F00E          	movff	tablat,??_receiveData+13
  3778                           
  3779                           ;main.c: 90: if (RCSTA1bits.OERR == 1) {
  3780  000042  A2AB               	btfss	4011,1,c	;volatile
  3781  000044  D003               	goto	i2l61
  3782                           
  3783                           ;main.c: 91: RCSTA1bits.OERR = 0;
  3784  000046  92AB               	bcf	4011,1,c	;volatile
  3785                           
  3786                           ;main.c: 92: RCSTA1bits.CREN = 0;
  3787  000048  98AB               	bcf	4011,4,c	;volatile
  3788                           
  3789                           ;main.c: 93: RCSTA1bits.CREN = 1;
  3790  00004A  88AB               	bsf	4011,4,c	;volatile
  3791  00004C                     i2l61:
  3792                           
  3793                           ;main.c: 94: }
  3794                           ;main.c: 95: if (PIR1bits.RC1IF == 1) {
  3795  00004C  AA9E               	btfss	3998,5,c	;volatile
  3796  00004E  D013               	goto	i2l64
  3797                           
  3798                           ;main.c: 96: uartBuf[uartWriteIndex] = RCREG1;
  3799  000050  0E00               	movlw	low _uartBuf
  3800  000052  241F               	addwf	_uartWriteIndex,w,c	;volatile
  3801  000054  6ED9               	movwf	fsr2l,c
  3802  000056  0E02               	movlw	high _uartBuf
  3803  000058  2020               	addwfc	_uartWriteIndex+1,w,c	;volatile
  3804  00005A  6EDA               	movwf	fsr2h,c
  3805  00005C  CFAE FFDF          	movff	4014,indf2	;volatile
  3806                           
  3807                           ;main.c: 97: uartWriteIndex++;
  3808  000060  4A1F               	infsnz	_uartWriteIndex,f,c	;volatile
  3809  000062  2A20               	incf	_uartWriteIndex+1,f,c	;volatile
  3810                           
  3811                           ;main.c: 98: if (uartWriteIndex == 1024) uartWriteIndex = 0;
  3812  000064  0E04               	movlw	4
  3813  000066  1820               	xorwf	_uartWriteIndex+1,w,c	;volatile
  3814  000068  101F               	iorwf	_uartWriteIndex,w,c	;volatile
  3815  00006A  A4D8               	btfss	status,2,c
  3816  00006C  D004               	goto	i2l64
  3817  00006E  0E00               	movlw	0
  3818  000070  6E20               	movwf	_uartWriteIndex+1,c	;volatile
  3819  000072  0E00               	movlw	0
  3820  000074  6E1F               	movwf	_uartWriteIndex,c	;volatile
  3821  000076                     i2l64:
  3822  000076  C00E  FFF5         	movff	??_receiveData+13,tablat
  3823  00007A  C00D  FFF8         	movff	??_receiveData+12,tblptru
  3824  00007E  C00C  FFF7         	movff	??_receiveData+11,tblptrh
  3825  000082  C00B  FFF6         	movff	??_receiveData+10,tblptrl
  3826  000086  C00A  FFF4         	movff	??_receiveData+9,prodh
  3827  00008A  C009  FFF3         	movff	??_receiveData+8,prodl
  3828  00008E  C008  FFDA         	movff	??_receiveData+7,fsr2h
  3829  000092  C007  FFD9         	movff	??_receiveData+6,fsr2l
  3830  000096  C006  FFE2         	movff	??_receiveData+5,fsr1h
  3831  00009A  C005  FFE1         	movff	??_receiveData+4,fsr1l
  3832  00009E  C004  FFEA         	movff	??_receiveData+3,fsr0h
  3833  0000A2  C003  FFE9         	movff	??_receiveData+2,fsr0l
  3834  0000A6  C002  FFFB         	movff	??_receiveData+1,pclatu
  3835  0000AA  C001  FFFA         	movff	??_receiveData,pclath
  3836  0000AE  922E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3837  0000B0  0011               	retfie		f
  3838  0000B2                     __end_of_receiveData:
  3839                           	opt stack 0
  3840                           pclatu	equ	0xFFB
  3841                           pclath	equ	0xFFA
  3842                           tblptru	equ	0xFF8
  3843                           tblptrh	equ	0xFF7
  3844                           tblptrl	equ	0xFF6
  3845                           tablat	equ	0xFF5
  3846                           prodh	equ	0xFF4
  3847                           prodl	equ	0xFF3
  3848                           intcon	equ	0xFF2
  3849                           postinc0	equ	0xFEE
  3850                           fsr0h	equ	0xFEA
  3851                           fsr0l	equ	0xFE9
  3852                           wreg	equ	0xFE8
  3853                           postdec1	equ	0xFE5
  3854                           fsr1h	equ	0xFE2
  3855                           fsr1l	equ	0xFE1
  3856                           indf2	equ	0xFDF
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           pclatu	equ	0xFFB
  3861                           pclath	equ	0xFFA
  3862                           tblptru	equ	0xFF8
  3863                           tblptrh	equ	0xFF7
  3864                           tblptrl	equ	0xFF6
  3865                           tablat	equ	0xFF5
  3866                           prodh	equ	0xFF4
  3867                           prodl	equ	0xFF3
  3868                           intcon	equ	0xFF2
  3869                           postinc0	equ	0xFEE
  3870                           fsr0h	equ	0xFEA
  3871                           fsr0l	equ	0xFE9
  3872                           wreg	equ	0xFE8
  3873                           postdec1	equ	0xFE5
  3874                           fsr1h	equ	0xFE2
  3875                           fsr1l	equ	0xFE1
  3876                           indf2	equ	0xFDF
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881                           	psect	rparam
  3882  0000                     pclatu	equ	0xFFB
  3883                           pclath	equ	0xFFA
  3884                           tblptru	equ	0xFF8
  3885                           tblptrh	equ	0xFF7
  3886                           tblptrl	equ	0xFF6
  3887                           tablat	equ	0xFF5
  3888                           prodh	equ	0xFF4
  3889                           prodl	equ	0xFF3
  3890                           intcon	equ	0xFF2
  3891                           postinc0	equ	0xFEE
  3892                           fsr0h	equ	0xFEA
  3893                           fsr0l	equ	0xFE9
  3894                           wreg	equ	0xFE8
  3895                           postdec1	equ	0xFE5
  3896                           fsr1h	equ	0xFE2
  3897                           fsr1l	equ	0xFE1
  3898                           indf2	equ	0xFDF
  3899                           fsr2h	equ	0xFDA
  3900                           fsr2l	equ	0xFD9
  3901                           status	equ	0xFD8
  3902                           
  3903                           	psect	temp
  3904  00002E                     btemp:
  3905                           	opt stack 0
  3906  00002E                     	ds	1
  3907  0000                     int$flags	set	btemp
  3908                           pclatu	equ	0xFFB
  3909                           pclath	equ	0xFFA
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           prodh	equ	0xFF4
  3915                           prodl	equ	0xFF3
  3916                           intcon	equ	0xFF2
  3917                           postinc0	equ	0xFEE
  3918                           fsr0h	equ	0xFEA
  3919                           fsr0l	equ	0xFE9
  3920                           wreg	equ	0xFE8
  3921                           postdec1	equ	0xFE5
  3922                           fsr1h	equ	0xFE2
  3923                           fsr1l	equ	0xFE1
  3924                           indf2	equ	0xFDF
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        2
    BSS         1297
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     26      45
    BANK0           160      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    hex	PTR unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_onData
    _onData->_writeAddressPhysical
    _writeHex->_writeChar
    _writeAddressPhysical->_logicAddressToPhysical
    _writeAddressPhysical->_writeAddress
    _writeAddress->_writePortA
    _writeAddress->_writePortB
    _writeAddress->_writePortC
    _writeAddress->_writePortD
    _writeAddress->_writePortE
    _writeAddress->_writeTrisA
    _sendProgrammerEnableCommand->_writeByte
    _sendBankCommand->_writeByte
    _readAddress->_writePortB
    _readAddress->_writePortC
    _readAddress->_writePortD
    _error->_writeChar

Critical Paths under _receiveData in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _receiveData in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _receiveData in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _receiveData in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _receiveData in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _receiveData in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _receiveData in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _receiveData in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _receiveData in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3235
                           _initUart
                             _onData
                           _readChar
 ---------------------------------------------------------------------------------
 (1) _readChar                                             1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _onData                                               5     5      0    3220
                                             21 COMRAM     5     5      0
                              _error
                           _parseHex
                        _readAddress
                           _readPort
                    _sendBankCommand
        _sendProgrammerEnableCommand
                       _writeAddress
               _writeAddressPhysical
                           _writeHex
                         _writePortA
                         _writePortB
                         _writePortC
                         _writePortD
                         _writePortE
                         _writeTrisA
                         _writeTrisB
                         _writeTrisC
                         _writeTrisD
                         _writeTrisE
 ---------------------------------------------------------------------------------
 (2) _writeTrisE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeHex                                             4     4      0      45
                                             15 COMRAM     4     4      0
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeAddressPhysical                                 3     0      3    1608
                                             18 COMRAM     3     0      3
             _logicAddressToPhysical
                _logicDataToPhysical
                       _writeAddress
 ---------------------------------------------------------------------------------
 (3) _writeAddress                                         3     0      3     460
                                             15 COMRAM     3     0      3
                         _writePortA
                         _writePortB
                         _writePortC
                         _writePortD
                         _writePortE
                         _writeTrisA
 ---------------------------------------------------------------------------------
 (2) _writeTrisA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _logicDataToPhysical                                  2     2      0     135
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _logicAddressToPhysical                               4     2      2     467
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _sendProgrammerEnableCommand                          1     1      0      30
                                             15 COMRAM     1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (2) _sendBankCommand                                      1     1      0      30
                                             15 COMRAM     1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (3) _writeByte                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPort                                             0     0      0       0
                          _readPortA
                          _readPortB
                          _readPortC
                          _readPortD
                          _readPortE
 ---------------------------------------------------------------------------------
 (3) _readPortE                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortD                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortB                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readAddress                                          3     1      2     264
                                             15 COMRAM     3     1      2
                          _readPortA
                         _writePortB
                         _writePortC
                         _writePortD
 ---------------------------------------------------------------------------------
 (2) _writePortD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _readPortA                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parseHex                                             1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _error                                                0     0      0      15
                          _writeChar
 ---------------------------------------------------------------------------------
 (3) _writeChar                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _receiveData                                         14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initUart
   _onData
     _error
       _writeChar
     _parseHex
     _readAddress
       _readPortA
       _writePortB
       _writePortC
       _writePortD
     _readPort
       _readPortA
       _readPortB
       _readPortC
       _readPortD
       _readPortE
     _sendBankCommand
       _writeByte
     _sendProgrammerEnableCommand
       _writeByte
     _writeAddress
       _writePortA
       _writePortB
       _writePortC
       _writePortD
       _writePortE
       _writeTrisA
     _writeAddressPhysical
       _logicAddressToPhysical
       _logicDataToPhysical
       _writeAddress
         _writePortA
         _writePortB
         _writePortC
         _writePortD
         _writePortE
         _writeTrisA
     _writeHex
       _writeChar
     _writePortA
     _writePortB
     _writePortC
     _writePortD
     _writePortE
     _writeTrisA
     _writeTrisB
     _writeTrisC
     _writeTrisD
     _writeTrisE
   _readChar

 _receiveData (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     400      21       50.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0     100       8      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1A      2D       1       47.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12D       6        0.0%
DATA                 0      0     52D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Jan 26 07:30:58 2018

                      writePortA@data 000F                        writePortB@data 000F  
                      writePortC@data 000F                        writePortD@data 000F  
                      writePortE@data 000F                          __CFG_CP0$OFF 000000  
                        __CFG_CP1$OFF 000000                          __CFG_CP2$OFF 000000  
                        __CFG_CP3$OFF 000000                           __CFG_LVP$ON 000000  
                                 l122 0FB4                                   l118 0E66  
                        __CFG_CPB$OFF 000000                          __CFG_CPD$OFF 000000  
                                 _adr 001D                                   bit0 0C70  
                                 _hex 002C                                   bits 0C40  
                      writeTrisA@data 000F                                   wreg 000FE8  
                      writeTrisB@data 000F                            _TXSTA1bits 000FAC  
                      writeTrisC@data 000F                        writeTrisD@data 000F  
                      writeTrisE@data 000F                                  l1200 0DD4  
                                l1204 0DE4                                  l1170 0F06  
                                l1252 0E32                                  PORTD 000F83  
                                l1254 0E40                                  l1192 0DB6  
                                l1178 0F18                                  l1196 0DC4  
                                l1700 08BE                                  l1712 08E4  
                                l1704 08D0                                  l1730 0920  
                                l1722 0904                                  l1706 08D6  
                                l1900 0BBE                                  l1820 0A38  
                                l1812 0A1A                                  l1660 0818  
                                l1830 0A5C                                  l1806 0A06  
                                l1750 095A                                  l1734 092E  
                                l1726 0912                                  l1718 08F6  
                                l1840 0A80                                  l1824 0A48  
                                l1816 0A28                                  l1904 0BCC  
                                l1912 0BE6                                  l1744 094A  
                                l1736 0934                                  l1680 085C  
                                l1672 0840                                  l1664 082A  
                                l1914 0BEC                                  l1770 099E  
                                l1844 0A90                                  l1852 0AAE  
                                l1836 0A72                                  l1828 0A56  
                                l1780 09BA                                  l1692 089A  
                                l1684 086E                                  l1676 084E  
                                l1862 0B00                                  l1854 0AB4  
                                l1774 09A8                                  l1758 0970  
                                l1918 0BF2                                  l1934 0E90  
                                l1848 0AA0                                  l1792 09DC  
                                l1696 08AC                                  l1688 0880  
                                l1866 0B10                                  l1890 0B92  
                                l1858 0AE0                                  l1786 09CA  
                                l1796 09E6                                  l1896 0BAE  
                                STR_1 0801                                  u1487 0B64  
                                i2l61 004C                                  i2l64 0076  
             __end_of_sendBankCommand 0F9A                                  _main 0E6A  
                                _temp 0027                                  _port 0025  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf2 000FDF                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 002E  
                       __CFG_BORV$190 000000                                  wait5 0C76  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00B2                         __CFG_IESO$OFF 000000  
                        ?_readAddress 0010                          ___param_bank 000000  
                        _BAUDCON1bits 000FB8                   _logicDataToPhysical 0EC8  
                               ?_main 0001                                 _PORTA 000F80  
                               _PORTB 000F81                                 _PORTC 000F82  
                               _PORTD 000F83                                 _PORTE 000F84  
                               _TRISA 000F92                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TRISD 000F95  
                               _TRISE 000F96                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                       __CFG_WRT3$OFF 000000                        __CFG_EBTR0$OFF 000000  
                      __CFG_FCMEN$OFF 000000                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
                       __CFG_WRTB$OFF 000000                         __CFG_WRTC$OFF 000000  
                       __CFG_WRTD$OFF 000000                        __CFG_EBTRB$OFF 000000  
                               _error 0FA6                                 _shift 0023  
                               _value 002A                                 _state 002B  
               __size_of_writeAddress 003E                                 pclath 000FFA  
                ?_logicDataToPhysical 0001                                 tablat 000FF5  
                               wait10 0C4E                                 wait20 0C60  
                               wait21 0C36                                 wait25 0C8A  
                               status 000FD8                        __CFG_T3CMX$RC0 000000  
                        ?_receiveData 0001                        __CFG_ICPRT$OFF 000000  
                      __CFG_MCLRE$OFF 000000                       __initialization 0CAE  
                        __end_of_main 0E9A                        __CFG_PCLKEN$ON 000000  
                              ??_main 001B                         __activetblptr 000002  
        __end_of_writeAddressPhysical 0EC8                          _writeAddress 0DF4  
                      __CFG_SDOMX$RB3 000000                   sendBankCommand@bank 0010  
                     __CFG_CCP2MX$RC1 000000     sendProgrammerEnableCommand@enable 0010  
                              _ADCON0 000FC2                                ?_error 0001  
                              _ANSELA 000F5B                                _ANSELC 000F5D  
               ??_logicDataToPhysical 000F                        __CFG_WDTEN$OFF 000000  
                              _RCREG1 000FAE                                _SPBRG1 000FAF  
                    ?_sendBankCommand 0001                                _TXREG1 000FAD  
                      __CFG_XINST$OFF 000000                        __CFG_STVREN$ON 000000  
                    __end_of_readChar 0E6A                                _onData 0814  
                    __end_of_initUart 0F62                      __end_of_readPort 0DF4  
                              clear_0 0CCE                                clear_1 0CE2  
                              clear_2 0CF4                      __end_of_parseHex 0F1C  
                        __pdataCOMRAM 002C                                wait100 0CA4  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
 __end_of_sendProgrammerEnableCommand 0F7E           _sendProgrammerEnableCommand 0F62  
                    __end_of_writeHex 0DA8                  __CFG_LS48MHZ$SYS24X4 000000  
                          __accesstop 0060               __end_of__initialization 0CFA  
                     __CFG_PBADEN$OFF 000000                         ___rparam_used 000001  
                      __pcstackCOMRAM 0001                      __CFG_nPWRTEN$OFF 000000  
                __size_of_readAddress 0028                         __end_of_error 0FB2  
           logicDataToPhysical@value0 0010             logicDataToPhysical@pvalue 000F  
                             ??_error 0010                            __pbssBANK1 0100  
                  __size_of_readPortA 0004                    __size_of_readPortB 0004  
                  __size_of_readPortC 0004                    __size_of_readPortD 0004  
                  __size_of_readPortE 0004                  _writeAddressPhysical 0E9A  
                __size_of_receiveData 00AA                     __CFG_PLLSEL$PLL4X 000000  
                        readAddress@d 0012                          readChar@data 000F  
                      readAddress@adr 0010                               ?_onData 0001  
            ??_logicAddressToPhysical 0011                             ?_readChar 0001  
                           ?_initUart 0001                             ?_readPort 0001  
                  __size_of_writeChar 000C                             ?_parseHex 0001  
                  __size_of_writeByte 0088                 ?_writeAddressPhysical 0013  
                             __Hparam 0000                               __Lparam 0000  
                        __psmallconst 0800                       __size_of_onData 0412  
                             __pcinit 0CAE                               __ramtop 0800  
                           ?_writeHex 0001                               __ptext0 0E6A  
                             __ptext1 0E32                               __ptext2 0814  
                             __ptext3 0FC8                               __ptext4 0FBE  
                             __ptext5 0F9A                               __ptext6 0FD0  
                             __ptext7 0D5A                               __ptext8 0E9A  
                             __ptext9 0DF4                               _command 0026  
                   __end_of_readPortA 101C                     __end_of_readPortB 1018  
                   __end_of_readPortC 1014                     __end_of_readPortD 1010  
                   __end_of_readPortE 100C                               _uartBuf 0200  
                             onData@d 001A                  end_of_initialization 0CFA  
                          ??_readChar 000F                            ??_initUart 000F  
                       __Lmediumconst 0000                            ??_readPort 000F  
                          ??_parseHex 000F                          writeHex@data 0013  
                             postdec1 000FE5                               postinc0 000FEE  
                          ??_writeHex 0010                             _PORTDbits 000F83  
                   __end_of_writeChar 0FBE                     __end_of_writeByte 0CAE  
         __end_of_logicDataToPhysical 0EF2                             _TRISDbits 000F95  
     __size_of_logicAddressToPhysical 0052                ??_writeAddressPhysical 0016  
            __size_of_sendBankCommand 001C                            _writePortA 0FE8  
                          _writePortB 1000                            _writePortC 0FF8  
                          _writePortD 0FF0                            _writePortE 0FE0  
                          _writeTrisA 0FD8                            _writeTrisB 0FD0  
                          _writeTrisC 0F9A                            _writeTrisD 0FBE  
                          _writeTrisE 0FC8                         __pidataCOMRAM 101C  
                      __end_of_onData 0C26                   start_initialization 0CAE  
                     __CFG_nLPBOR$OFF 000000                         ??_readAddress 0012  
              _logicAddressToPhysical 0D08                              ??_onData 0016  
                         __pbssBIGRAM 0200                           __pbssCOMRAM 001B  
                      _uartWriteIndex 001F                     writeAddress@value 0012  
                       ??_receiveData 0001                     __size_of_readChar 0038  
                     writeAddress@adr 0010                     __size_of_initUart 001E  
                   __size_of_readPort 004C                     __size_of_parseHex 002A  
                           __pintcode 0008            logicAddressToPhysical@adr0 000F  
                         ?_writePortA 0001                           ?_writePortB 0001  
                         ?_writePortC 0001                           ?_writePortD 0001  
                         ?_writePortE 0001                           ?_writeTrisA 0001  
                         ?_writeTrisB 0001                           ?_writeTrisC 0001  
                         ?_writeTrisD 0001                           ?_writeTrisE 0001  
          logicAddressToPhysical@padr 0011                   __end_of_readAddress 0F44  
                   ??_sendBankCommand 0010                           __smallconst 0800  
                       ?_writeAddress 0010                     __size_of_writeHex 004E  
                           _readPortA 1018                             _readPortB 1014  
                           _readPortC 1010                             _readPortD 100C  
                           _readPortE 1008                        __size_of_error 000C  
                         _flashBuffer 0100                              _PIE1bits 000F9D  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                    __CFG_WDTPS$32768 000000                   __end_of_receiveData 00B2  
                       _uartReadIndex 0021                        ??_writeAddress 0013  
                   __CFG_CFGPLLEN$OFF 000000                             _writeChar 0FB2  
        ?_sendProgrammerEnableCommand 0001                             _writeByte 0C26  
                          ?_readPortA 0001                            ?_readPortB 0001  
                          ?_readPortC 0001                            ?_readPortD 0001  
                          ?_readPortE 0001                   __size_of_writePortA 0008  
                 __size_of_writePortB 0008                   __size_of_writePortC 0008  
                 __size_of_writePortD 0008                   __size_of_writePortE 0008  
                 __size_of_writeTrisA 0008                   __size_of_writeTrisB 0008  
                 __size_of_writeTrisC 000C                   __size_of_writeTrisD 000A  
                 __size_of_writeTrisE 0008             writeAddressPhysical@value 0015  
                            __Hrparam 0000               writeAddressPhysical@adr 0013  
                         _readAddress 0F1C                              __Lrparam 0000  
                  __CFG_BOREN$SBORDIS 000000                            start_write 0C3E  
                           parseHex@x 000F                              _checksum 0029  
                    _flashBufferIndex 001B                            ?_writeChar 0001  
                            __ptext10 0FD8                              __ptext11 0FE0  
                            __ptext20 100C                              __ptext12 0FE8  
                            __ptext21 1010                              __ptext13 0EC8  
                            __ptext30 0FB2                              __ptext22 1014  
                            __ptext14 0D08                              __ptext31 0F44  
                            __ptext23 0F1C                              __ptext15 0F62  
                            __ptext24 0FF0                              __ptext16 0F7E  
                            __ptext25 0FF8                              __ptext17 0C26  
                            __ptext26 1000                              __ptext18 0DA8  
                            __ptext27 1018                              __ptext19 1008  
                            __ptext28 0EF2                              __ptext29 0FA6  
                          ?_writeByte 0001                          _shiftCounter 0024  
       ??_sendProgrammerEnableCommand 0010          __size_of_logicDataToPhysical 002A  
                            _readChar 0E32                              _initUart 0F44  
                            _readPort 0DA8                         __size_of_main 0030  
                         _receiveData 0008                              _parseHex 0EF2  
       __size_of_writeAddressPhysical 002E               ?_logicAddressToPhysical 000F  
                          writeByte@b 000F                              int$flags 002E  
                            _writeHex 0D5A                    _checksumCalculated 0028  
                          _INTCONbits 000FF2                           ??_readPortA 000F  
                         ??_readPortB 000F                           ??_readPortC 000F  
                         ??_readPortD 000F                           ??_readPortE 000F  
                            intlevel2 0000                         writeChar@data 000F  
      __end_of_logicAddressToPhysical 0D5A                            _RCSTA1bits 000FAB  
                __end_of_writeAddress 0E32                            _OSCCONbits 000FD3  
                     _sendBankCommand 0F7E  __size_of_sendProgrammerEnableCommand 001C  
                __CFG_CPUDIV$NOCLKDIV 000000                          ??_writePortA 000F  
                        ??_writePortB 000F                          ??_writePortC 000F  
                        ??_writePortD 000F                          ??_writePortE 000F  
                        ??_writeTrisA 000F                          ??_writeTrisB 000F  
                        ??_writeTrisC 000F                          ??_writeTrisD 000F  
                        ??_writeTrisE 000F                           ??_writeChar 000F  
                            write_end 0C92                           ??_writeByte 000F  
                  __CFG_FOSC$INTOSCIO 000000                    __end_of_writePortA 0FF0  
                  __end_of_writePortB 1008                    __end_of_writePortC 1000  
                  __end_of_writePortD 0FF8                    __end_of_writePortE 0FE8  
                  __end_of_writeTrisA 0FE0                    __end_of_writeTrisB 0FD8  
                  __end_of_writeTrisC 0FA6                    __end_of_writeTrisD 0FC8  
                  __end_of_writeTrisE 0FD0  
