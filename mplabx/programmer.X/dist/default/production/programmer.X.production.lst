

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Jan  7 01:25:16 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 1.42
    48                           ; Generated 13/04/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F45K50 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMRAM
    83  000F1C                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _hex
    87  000F1C  01                 	db	low STR_1
    88  000F1D  08                 	db	high STR_1
    89  0000                     _ANSELC	set	3933
    90  0000                     _ANSELA	set	3931
    91  0000                     _ADCON0	set	4034
    92  0000                     _OSCCONbits	set	4051
    93  0000                     _TXREG1	set	4013
    94  0000                     _TRISE	set	3990
    95  0000                     _TRISD	set	3989
    96  0000                     _TRISC	set	3988
    97  0000                     _TRISB	set	3987
    98  0000                     _TRISA	set	3986
    99  0000                     _PORTE	set	3972
   100  0000                     _PORTD	set	3971
   101  0000                     _PORTC	set	3970
   102  0000                     _PORTB	set	3969
   103  0000                     _PORTA	set	3968
   104  0000                     _PIE1bits	set	3997
   105  0000                     _INTCONbits	set	4082
   106  0000                     _RCONbits	set	4048
   107  0000                     _SPBRG1	set	4015
   108  0000                     _BAUDCON1bits	set	4024
   109  0000                     _TXSTA1bits	set	4012
   110  0000                     _RCREG1	set	4014
   111  0000                     _PIR1bits	set	3998
   112  0000                     _RCSTA1bits	set	4011
   113                           
   114                           	psect	smallconst
   115  000800                     __psmallconst:
   116                           	opt stack 0
   117  000800  00                 	db	0
   118  000801                     STR_1:
   119  000801  30                 	db	48	;'0'
   120  000802  31                 	db	49	;'1'
   121  000803  32                 	db	50	;'2'
   122  000804  33                 	db	51	;'3'
   123  000805  34                 	db	52	;'4'
   124  000806  35                 	db	53	;'5'
   125  000807  36                 	db	54	;'6'
   126  000808  37                 	db	55	;'7'
   127  000809  38                 	db	56	;'8'
   128  00080A  39                 	db	57	;'9'
   129  00080B  61                 	db	97	;'a'
   130  00080C  62                 	db	98	;'b'
   131  00080D  63                 	db	99	;'c'
   132  00080E  64                 	db	100	;'d'
   133  00080F  65                 	db	101	;'e'
   134  000810  66                 	db	102	;'f'
   135  000811  00                 	db	0
   136                           
   137                           ; #config settings
   138  000812  00                 	db	0	; dummy byte at the end
   139  0000                     
   140                           	psect	cinit
   141  000BE8                     __pcinit:
   142                           	opt stack 0
   143  000BE8                     start_initialization:
   144                           	opt stack 0
   145  000BE8                     __initialization:
   146                           	opt stack 0
   147                           
   148                           ; Initialize objects allocated to COMRAM (2 bytes)
   149                           ; load TBLPTR registers with __pidataCOMRAM
   150  000BE8  0E1C               	movlw	low __pidataCOMRAM
   151  000BEA  6EF6               	movwf	tblptrl,c
   152  000BEC  0E0F               	movlw	high __pidataCOMRAM
   153  000BEE  6EF7               	movwf	tblptrh,c
   154  000BF0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   155  000BF2  6EF8               	movwf	tblptru,c
   156  000BF4  0009               	tblrd		*+	;fetch initializer
   157  000BF6  CFF5 F02A          	movff	tablat,__pdataCOMRAM
   158  000BFA  0009               	tblrd		*+	;fetch initializer
   159  000BFC  CFF5 F02B          	movff	tablat,__pdataCOMRAM+1
   160                           
   161                           ; Clear objects allocated to BIGRAM (1024 bytes)
   162  000C00  EE02  F000         	lfsr	0,__pbssBIGRAM
   163  000C04  EE14 F000          	lfsr	1,1024
   164  000C08                     clear_0:
   165  000C08  6AEE               	clrf	postinc0,c
   166  000C0A  50E5               	movf	postdec1,w,c
   167  000C0C  50E1               	movf	fsr1l,w,c
   168  000C0E  E1FC               	bnz	clear_0
   169  000C10  50E2               	movf	fsr1h,w,c
   170  000C12  E1FA               	bnz	clear_0
   171                           
   172                           ; Clear objects allocated to BANK1 (256 bytes)
   173  000C14  EE01  F000         	lfsr	0,__pbssBANK1
   174  000C18  EE11 F000          	lfsr	1,256
   175  000C1C                     clear_1:
   176  000C1C  6AEE               	clrf	postinc0,c
   177  000C1E  50E5               	movf	postdec1,w,c
   178  000C20  50E1               	movf	fsr1l,w,c
   179  000C22  E1FC               	bnz	clear_1
   180  000C24  50E2               	movf	fsr1h,w,c
   181  000C26  E1FA               	bnz	clear_1
   182                           
   183                           ; Clear objects allocated to COMRAM (15 bytes)
   184  000C28  EE00  F01B         	lfsr	0,__pbssCOMRAM
   185  000C2C  0E0F               	movlw	15
   186  000C2E                     clear_2:
   187  000C2E  6AEE               	clrf	postinc0,c
   188  000C30  06E8               	decf	wreg,f,c
   189  000C32  E1FD               	bnz	clear_2
   190  000C34                     end_of_initialization:
   191                           	opt stack 0
   192  000C34                     __end_of__initialization:
   193                           	opt stack 0
   194  000C34  902C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   195  000C36  922C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   196  000C38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   197  000C3A  6EF8               	movwf	tblptru,c
   198  000C3C  0100               	movlb	0
   199  000C3E  EFD2  F006         	goto	_main	;jump to C main() function
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           postinc0	equ	0xFEE
   205                           wreg	equ	0xFE8
   206                           postdec1	equ	0xFE5
   207                           fsr1h	equ	0xFE2
   208                           fsr1l	equ	0xFE1
   209                           
   210                           	psect	bssCOMRAM
   211  00001B                     __pbssCOMRAM:
   212                           	opt stack 0
   213  00001B                     _flashBufferIndex:
   214                           	opt stack 0
   215  00001B                     	ds	2
   216  00001D                     _adr:
   217                           	opt stack 0
   218  00001D                     	ds	2
   219  00001F                     _uartWriteIndex:
   220                           	opt stack 0
   221  00001F                     	ds	2
   222  000021                     _uartReadIndex:
   223                           	opt stack 0
   224  000021                     	ds	2
   225  000023                     _port:
   226                           	opt stack 0
   227  000023                     	ds	1
   228  000024                     _command:
   229                           	opt stack 0
   230  000024                     	ds	1
   231  000025                     _temp:
   232                           	opt stack 0
   233  000025                     	ds	1
   234  000026                     _checksumCalculated:
   235                           	opt stack 0
   236  000026                     	ds	1
   237  000027                     _checksum:
   238                           	opt stack 0
   239  000027                     	ds	1
   240  000028                     _value:
   241                           	opt stack 0
   242  000028                     	ds	1
   243  000029                     _state:
   244                           	opt stack 0
   245  000029                     	ds	1
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           postdec1	equ	0xFE5
   253                           fsr1h	equ	0xFE2
   254                           fsr1l	equ	0xFE1
   255                           
   256                           	psect	dataCOMRAM
   257  00002A                     __pdataCOMRAM:
   258                           	opt stack 0
   259  00002A                     _hex:
   260                           	opt stack 0
   261  00002A                     	ds	2
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           postdec1	equ	0xFE5
   269                           fsr1h	equ	0xFE2
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	bssBANK1
   273  000100                     __pbssBANK1:
   274                           	opt stack 0
   275  000100                     _flashBuffer:
   276                           	opt stack 0
   277  000100                     	ds	256
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           postdec1	equ	0xFE5
   285                           fsr1h	equ	0xFE2
   286                           fsr1l	equ	0xFE1
   287                           
   288                           	psect	bssBIGRAM
   289  000200                     __pbssBIGRAM:
   290                           	opt stack 0
   291  000200                     _uartBuf:
   292                           	opt stack 0
   293  000200                     	ds	1024
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           postdec1	equ	0xFE5
   301                           fsr1h	equ	0xFE2
   302                           fsr1l	equ	0xFE1
   303                           
   304                           	psect	cstackCOMRAM
   305  000001                     __pcstackCOMRAM:
   306                           	opt stack 0
   307  000001                     ??_receiveData:
   308  000001                     
   309                           ; 2 bytes @ 0x0
   310  000001                     	ds	14
   311  00000F                     ?_logicAddressToPhysical:
   312                           	opt stack 0
   313  00000F                     writePortA@data:
   314                           	opt stack 0
   315  00000F                     writePortB@data:
   316                           	opt stack 0
   317  00000F                     writePortC@data:
   318                           	opt stack 0
   319  00000F                     writePortD@data:
   320                           	opt stack 0
   321  00000F                     writePortE@data:
   322                           	opt stack 0
   323  00000F                     writeTrisA@data:
   324                           	opt stack 0
   325  00000F                     writeTrisB@data:
   326                           	opt stack 0
   327  00000F                     writeTrisC@data:
   328                           	opt stack 0
   329  00000F                     writeTrisD@data:
   330                           	opt stack 0
   331  00000F                     writeTrisE@data:
   332                           	opt stack 0
   333  00000F                     readChar@data:
   334                           	opt stack 0
   335  00000F                     writeChar@data:
   336                           	opt stack 0
   337  00000F                     parseHex@x:
   338                           	opt stack 0
   339  00000F                     logicDataToPhysical@value:
   340                           	opt stack 0
   341  00000F                     logicAddressToPhysical@adr0:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0xE
   345  00000F                     	ds	1
   346  000010                     ??_writeHex:
   347  000010                     logicDataToPhysical@value0:
   348                           	opt stack 0
   349  000010                     writeAddress@adr:
   350                           	opt stack 0
   351  000010                     readAddress@adr:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0xF
   355  000010                     	ds	1
   356  000011                     logicAddressToPhysical@adr:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x10
   360  000011                     	ds	1
   361  000012                     writeAddress@value:
   362                           	opt stack 0
   363  000012                     readAddress@d:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0x11
   367  000012                     	ds	1
   368  000013                     writeHex@data:
   369                           	opt stack 0
   370  000013                     writeAddressPhysical@adr:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x12
   374  000013                     	ds	2
   375  000015                     writeAddressPhysical@value:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x14
   379  000015                     	ds	1
   380  000016                     ??_onData:
   381  000016                     
   382                           ; 1 bytes @ 0x15
   383  000016                     	ds	4
   384  00001A                     onData@d:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x19
   388  00001A                     	ds	1
   389  00001B                     tblptru	equ	0xFF8
   390                           tblptrh	equ	0xFF7
   391                           tblptrl	equ	0xFF6
   392                           tablat	equ	0xFF5
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           postdec1	equ	0xFE5
   396                           fsr1h	equ	0xFE2
   397                           fsr1l	equ	0xFE1
   398                           
   399                           ; 1 bytes @ 0x1A
   400 ;;
   401 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   402 ;;
   403 ;; *************** function _main *****************
   404 ;; Defined at:
   405 ;;		line 212 in file "main.c"
   406 ;; Parameters:    Size  Location     Type
   407 ;;		None
   408 ;; Auto vars:     Size  Location     Type
   409 ;;		None
   410 ;; Return value:  Size  Location     Type
   411 ;;                  2  129[None  ] int 
   412 ;; Registers used:
   413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   419 ;;      Params:         0       0       0       0       0       0       0       0       0
   420 ;;      Locals:         0       0       0       0       0       0       0       0       0
   421 ;;      Temps:          0       0       0       0       0       0       0       0       0
   422 ;;      Totals:         0       0       0       0       0       0       0       0       0
   423 ;;Total ram usage:        0 bytes
   424 ;; Hardware stack levels required when called:    5
   425 ;; This function calls:
   426 ;;		_initUart
   427 ;;		_onData
   428 ;;		_readChar
   429 ;; This function is called by:
   430 ;;		Startup code after reset
   431 ;; This function uses a non-reentrant model
   432 ;;
   433                           
   434                           	psect	text0
   435  000DA4                     __ptext0:
   436                           	opt stack 0
   437  000DA4                     _main:
   438                           	opt stack 26
   439                           
   440                           ;main.c: 215: OSCCONbits.IRCF = 7;
   441                           
   442                           ;incstack = 0
   443  000DA4  88D3               	bsf	4051,4,c	;volatile
   444  000DA6  8AD3               	bsf	4051,5,c	;volatile
   445  000DA8  8CD3               	bsf	4051,6,c	;volatile
   446                           
   447                           ;main.c: 218: ANSELA = 0;
   448  000DAA  0E00               	movlw	0
   449  000DAC  010F               	movlb	15	; () banked
   450  000DAE  6F5B               	movwf	91,b	;volatile
   451                           
   452                           ;main.c: 219: ANSELC = 0;
   453  000DB0  0E00               	movlw	0
   454  000DB2  010F               	movlb	15	; () banked
   455  000DB4  6F5D               	movwf	93,b	;volatile
   456                           
   457                           ;main.c: 222: ADCON0 = 0;
   458  000DB6  0E00               	movlw	0
   459  000DB8  6EC2               	movwf	4034,c	;volatile
   460                           
   461                           ; BSR set to: 15
   462                           ;main.c: 225: PORTC = 0xff;
   463  000DBA  6882               	setf	3970,c	;volatile
   464                           
   465                           ; BSR set to: 15
   466                           ;main.c: 228: TRISA = 0xff;
   467  000DBC  6892               	setf	3986,c	;volatile
   468                           
   469                           ; BSR set to: 15
   470                           ;main.c: 229: TRISB = 0xff;
   471  000DBE  6893               	setf	3987,c	;volatile
   472                           
   473                           ;main.c: 230: TRISC = 0b10111111;
   474  000DC0  0EBF               	movlw	191
   475  000DC2  6E94               	movwf	3988,c	;volatile
   476                           
   477                           ; BSR set to: 15
   478                           ;main.c: 231: TRISD = 0xff;
   479  000DC4  6895               	setf	3989,c	;volatile
   480                           
   481                           ; BSR set to: 15
   482                           ;main.c: 233: initUart();
   483  000DC6  EC3F  F007         	call	_initUart	;wreg free
   484  000DCA                     l1921:
   485                           
   486                           ;main.c: 237: onData(readChar());
   487  000DCA  ECB6  F006         	call	_readChar	;wreg free
   488  000DCE  EC0A  F004         	call	_onData
   489  000DD2  D7FB               	goto	l1921
   490  000DD4                     __end_of_main:
   491                           	opt stack 0
   492                           tblptru	equ	0xFF8
   493                           tblptrh	equ	0xFF7
   494                           tblptrl	equ	0xFF6
   495                           tablat	equ	0xFF5
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           postdec1	equ	0xFE5
   499                           fsr1h	equ	0xFE2
   500                           fsr1l	equ	0xFE1
   501                           
   502 ;; *************** function _readChar *****************
   503 ;; Defined at:
   504 ;;		line 196 in file "main.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;  data            1   14[COMRAM] unsigned char 
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      unsigned char 
   511 ;; Registers used:
   512 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   518 ;;      Params:         0       0       0       0       0       0       0       0       0
   519 ;;      Locals:         1       0       0       0       0       0       0       0       0
   520 ;;      Temps:          0       0       0       0       0       0       0       0       0
   521 ;;      Totals:         1       0       0       0       0       0       0       0       0
   522 ;;Total ram usage:        1 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; Hardware stack levels required when called:    1
   525 ;; This function calls:
   526 ;;		Nothing
   527 ;; This function is called by:
   528 ;;		_main
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           	psect	text1
   533  000D6C                     __ptext1:
   534                           	opt stack 0
   535  000D6C                     _readChar:
   536                           	opt stack 29
   537  000D6C                     l1225:
   538  000D6C  501F               	movf	_uartWriteIndex,w,c	;volatile
   539  000D6E  1821               	xorwf	_uartReadIndex,w,c	;volatile
   540  000D70  E104               	bnz	l1227
   541  000D72  5020               	movf	_uartWriteIndex+1,w,c	;volatile
   542  000D74  1822               	xorwf	_uartReadIndex+1,w,c	;volatile
   543  000D76  B4D8               	btfsc	status,2,c
   544  000D78  D7F9               	goto	l1225
   545  000D7A                     l1227:
   546                           
   547                           ;main.c: 200: data = uartBuf[uartReadIndex];
   548  000D7A  0E00               	movlw	low _uartBuf
   549  000D7C  2421               	addwf	_uartReadIndex,w,c	;volatile
   550  000D7E  6ED9               	movwf	fsr2l,c
   551  000D80  0E02               	movlw	high _uartBuf
   552  000D82  2022               	addwfc	_uartReadIndex+1,w,c	;volatile
   553  000D84  6EDA               	movwf	fsr2h,c
   554  000D86  50DF               	movf	indf2,w,c
   555  000D88  6E0F               	movwf	readChar@data,c
   556                           
   557                           ;main.c: 201: uartReadIndex++;
   558  000D8A  4A21               	infsnz	_uartReadIndex,f,c	;volatile
   559  000D8C  2A22               	incf	_uartReadIndex+1,f,c	;volatile
   560                           
   561                           ;main.c: 202: if (uartReadIndex == 1024) uartReadIndex = 0;
   562  000D8E  0E04               	movlw	4
   563  000D90  1822               	xorwf	_uartReadIndex+1,w,c	;volatile
   564  000D92  1021               	iorwf	_uartReadIndex,w,c	;volatile
   565  000D94  A4D8               	btfss	status,2,c
   566  000D96  D004               	goto	l118
   567  000D98  0E00               	movlw	0
   568  000D9A  6E22               	movwf	_uartReadIndex+1,c	;volatile
   569  000D9C  0E00               	movlw	0
   570  000D9E  6E21               	movwf	_uartReadIndex,c	;volatile
   571  000DA0                     l118:
   572                           
   573                           ;main.c: 203: return data;
   574  000DA0  500F               	movf	readChar@data,w,c
   575  000DA2  0012               	return	
   576  000DA4                     __end_of_readChar:
   577                           	opt stack 0
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1h	equ	0xFE2
   586                           fsr1l	equ	0xFE1
   587                           indf2	equ	0xFDF
   588                           fsr2h	equ	0xFDA
   589                           fsr2l	equ	0xFD9
   590                           status	equ	0xFD8
   591                           
   592 ;; *************** function _onData *****************
   593 ;; Defined at:
   594 ;;		line 216 in file "receiver.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;  d               1    wreg     unsigned char 
   597 ;; Auto vars:     Size  Location     Type
   598 ;;  d               1   25[COMRAM] unsigned char 
   599 ;; Return value:  Size  Location     Type
   600 ;;                  1    wreg      void 
   601 ;; Registers used:
   602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   608 ;;      Params:         0       0       0       0       0       0       0       0       0
   609 ;;      Locals:         1       0       0       0       0       0       0       0       0
   610 ;;      Temps:          4       0       0       0       0       0       0       0       0
   611 ;;      Totals:         5       0       0       0       0       0       0       0       0
   612 ;;Total ram usage:        5 bytes
   613 ;; Hardware stack levels used:    1
   614 ;; Hardware stack levels required when called:    4
   615 ;; This function calls:
   616 ;;		_error
   617 ;;		_parseHex
   618 ;;		_readAddress
   619 ;;		_readPort
   620 ;;		_writeAddress
   621 ;;		_writeAddressPhysical
   622 ;;		_writeHex
   623 ;;		_writePortA
   624 ;;		_writePortB
   625 ;;		_writePortC
   626 ;;		_writePortD
   627 ;;		_writePortE
   628 ;;		_writeTrisA
   629 ;;		_writeTrisB
   630 ;;		_writeTrisC
   631 ;;		_writeTrisD
   632 ;;		_writeTrisE
   633 ;; This function is called by:
   634 ;;		_main
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text2
   639  000814                     __ptext2:
   640                           	opt stack 0
   641  000814                     _onData:
   642                           	opt stack 26
   643                           
   644                           ;incstack = 0
   645                           ;onData@d stored from wreg
   646  000814  6E1A               	movwf	onData@d,c
   647                           
   648                           ;receiver.c: 218: switch (state) {
   649  000816  D1CE               	goto	l1905
   650  000818                     l1663:
   651                           
   652                           ;receiver.c: 220: if (d == '<') {
   653  000818  0E3C               	movlw	60
   654  00081A  181A               	xorwf	onData@d,w,c
   655  00081C  A4D8               	btfss	status,2,c
   656  00081E  0012               	return	
   657                           
   658                           ;receiver.c: 221: state = STATE_COMMAND;
   659  000820  0E01               	movlw	1
   660  000822  6E29               	movwf	_state,c
   661                           
   662                           ;receiver.c: 222: checksumCalculated = 0;
   663  000824  0E00               	movlw	0
   664  000826  6E26               	movwf	_checksumCalculated,c
   665                           
   666                           ;receiver.c: 223: }
   667                           ;receiver.c: 224: break;
   668  000828  0012               	return	
   669  00082A                     l1667:
   670                           
   671                           ;receiver.c: 226: checksumCalculated ^= d;
   672  00082A  501A               	movf	onData@d,w,c
   673  00082C  1A26               	xorwf	_checksumCalculated,f,c
   674                           
   675                           ;receiver.c: 227: state = STATE_PORT;
   676  00082E  0E02               	movlw	2
   677  000830  6E29               	movwf	_state,c
   678                           
   679                           ;receiver.c: 228: if (d == 'r') {
   680  000832  0E72               	movlw	114
   681  000834  181A               	xorwf	onData@d,w,c
   682  000836  A4D8               	btfss	status,2,c
   683  000838  D003               	goto	l1675
   684                           
   685                           ;receiver.c: 229: command = COMMAND_READ;
   686  00083A  0E00               	movlw	0
   687  00083C  6E24               	movwf	_command,c
   688                           
   689                           ;receiver.c: 230: } else if (d == 'w') {
   690  00083E  0012               	return	
   691  000840                     l1675:
   692  000840  0E77               	movlw	119
   693  000842  181A               	xorwf	onData@d,w,c
   694  000844  A4D8               	btfss	status,2,c
   695  000846  D003               	goto	l1679
   696                           
   697                           ;receiver.c: 231: command = COMMAND_WRITE;
   698  000848  0E01               	movlw	1
   699  00084A  6E24               	movwf	_command,c
   700                           
   701                           ;receiver.c: 232: } else if (d == 't') {
   702  00084C  0012               	return	
   703  00084E                     l1679:
   704  00084E  0E74               	movlw	116
   705  000850  181A               	xorwf	onData@d,w,c
   706  000852  A4D8               	btfss	status,2,c
   707  000854  D003               	goto	l1683
   708                           
   709                           ;receiver.c: 233: command = COMMAND_TRIS;
   710  000856  0E02               	movlw	2
   711  000858  6E24               	movwf	_command,c
   712                           
   713                           ;receiver.c: 234: } else if (d == 'l') {
   714  00085A  0012               	return	
   715  00085C                     l1683:
   716  00085C  0E6C               	movlw	108
   717  00085E  181A               	xorwf	onData@d,w,c
   718  000860  A4D8               	btfss	status,2,c
   719  000862  D005               	goto	l1687
   720                           
   721                           ;receiver.c: 235: state = STATE_VALUE_HIGH_NIBBLE;
   722  000864  0E03               	movlw	3
   723  000866  6E29               	movwf	_state,c
   724                           
   725                           ;receiver.c: 236: command = COMMAND_ADR_LOW;
   726  000868  0E03               	movlw	3
   727  00086A  6E24               	movwf	_command,c
   728                           
   729                           ;receiver.c: 237: } else if (d == 'h') {
   730  00086C  0012               	return	
   731  00086E                     l1687:
   732  00086E  0E68               	movlw	104
   733  000870  181A               	xorwf	onData@d,w,c
   734  000872  A4D8               	btfss	status,2,c
   735  000874  D005               	goto	l1691
   736                           
   737                           ;receiver.c: 238: state = STATE_VALUE_HIGH_NIBBLE;
   738  000876  0E03               	movlw	3
   739  000878  6E29               	movwf	_state,c
   740                           
   741                           ;receiver.c: 239: command = COMMAND_ADR_HIGH;
   742  00087A  0E04               	movlw	4
   743  00087C  6E24               	movwf	_command,c
   744                           
   745                           ;receiver.c: 240: } else if (d == 'f') {
   746  00087E  0012               	return	
   747  000880                     l1691:
   748  000880  0E66               	movlw	102
   749  000882  181A               	xorwf	onData@d,w,c
   750  000884  A4D8               	btfss	status,2,c
   751  000886  D009               	goto	l1695
   752                           
   753                           ;receiver.c: 241: state = STATE_VALUE_HIGH_NIBBLE;
   754  000888  0E03               	movlw	3
   755  00088A  6E29               	movwf	_state,c
   756                           
   757                           ;receiver.c: 242: command = COMMAND_FLASH;
   758  00088C  0E05               	movlw	5
   759  00088E  6E24               	movwf	_command,c
   760                           
   761                           ;receiver.c: 243: flashBufferIndex = 0;
   762  000890  0E00               	movlw	0
   763  000892  6E1C               	movwf	_flashBufferIndex+1,c
   764  000894  0E00               	movlw	0
   765  000896  6E1B               	movwf	_flashBufferIndex,c
   766                           
   767                           ;receiver.c: 244: } else if (d == 'v') {
   768  000898  0012               	return	
   769  00089A                     l1695:
   770  00089A  0E76               	movlw	118
   771  00089C  181A               	xorwf	onData@d,w,c
   772  00089E  A4D8               	btfss	status,2,c
   773  0008A0  D005               	goto	l1699
   774                           
   775                           ;receiver.c: 245: state = STATE_CHECKSUM_HIGH_NIBBLE;
   776  0008A2  0E05               	movlw	5
   777  0008A4  6E29               	movwf	_state,c
   778                           
   779                           ;receiver.c: 246: command = COMMAND_VERIFY;
   780  0008A6  0E06               	movlw	6
   781  0008A8  6E24               	movwf	_command,c
   782                           
   783                           ;receiver.c: 247: } else {
   784  0008AA  0012               	return	
   785  0008AC                     l1699:
   786                           
   787                           ;receiver.c: 248: error();
   788  0008AC  EC54  F007         	call	_error	;wreg free
   789                           
   790                           ;receiver.c: 249: }
   791                           ;receiver.c: 250: break;
   792  0008B0  0012               	return	
   793  0008B2                     l1701:
   794                           
   795                           ;receiver.c: 252: checksumCalculated ^= d;
   796  0008B2  501A               	movf	onData@d,w,c
   797  0008B4  1A26               	xorwf	_checksumCalculated,f,c
   798                           
   799                           ;receiver.c: 253: if (command == COMMAND_READ) {
   800  0008B6  5024               	movf	_command,w,c
   801  0008B8  A4D8               	btfss	status,2,c
   802  0008BA  D002               	goto	l1707
   803                           
   804                           ;receiver.c: 254: state = STATE_CHECKSUM_HIGH_NIBBLE;
   805  0008BC  0E05               	movlw	5
   806  0008BE  D001               	goto	L1
   807  0008C0                     l1707:
   808                           
   809                           ;receiver.c: 256: state = STATE_VALUE_HIGH_NIBBLE;
   810  0008C0  0E03               	movlw	3
   811  0008C2                     L1:
   812  0008C2  6E29               	movwf	_state,c
   813                           
   814                           ;receiver.c: 257: }
   815                           ;receiver.c: 258: if (d == 'a') {
   816  0008C4  0E61               	movlw	97
   817  0008C6  181A               	xorwf	onData@d,w,c
   818  0008C8  A4D8               	btfss	status,2,c
   819  0008CA  D003               	goto	l1713
   820                           
   821                           ;receiver.c: 259: port = PORT_A;
   822  0008CC  0E00               	movlw	0
   823  0008CE  6E23               	movwf	_port,c
   824                           
   825                           ;receiver.c: 260: } else if (d == 'b') {
   826  0008D0  0012               	return	
   827  0008D2                     l1713:
   828  0008D2  0E62               	movlw	98
   829  0008D4  181A               	xorwf	onData@d,w,c
   830  0008D6  A4D8               	btfss	status,2,c
   831  0008D8  D003               	goto	l1717
   832                           
   833                           ;receiver.c: 261: port = PORT_B;
   834  0008DA  0E01               	movlw	1
   835  0008DC  6E23               	movwf	_port,c
   836                           
   837                           ;receiver.c: 262: } else if (d == 'c') {
   838  0008DE  0012               	return	
   839  0008E0                     l1717:
   840  0008E0  0E63               	movlw	99
   841  0008E2  181A               	xorwf	onData@d,w,c
   842  0008E4  A4D8               	btfss	status,2,c
   843  0008E6  D003               	goto	l1721
   844                           
   845                           ;receiver.c: 263: port = PORT_C;
   846  0008E8  0E02               	movlw	2
   847  0008EA  6E23               	movwf	_port,c
   848                           
   849                           ;receiver.c: 264: } else if (d == 'd') {
   850  0008EC  0012               	return	
   851  0008EE                     l1721:
   852  0008EE  0E64               	movlw	100
   853  0008F0  181A               	xorwf	onData@d,w,c
   854  0008F2  A4D8               	btfss	status,2,c
   855  0008F4  D003               	goto	l1725
   856                           
   857                           ;receiver.c: 265: port = PORT_D;
   858  0008F6  0E03               	movlw	3
   859  0008F8  6E23               	movwf	_port,c
   860                           
   861                           ;receiver.c: 266: } else if (d == 'e') {
   862  0008FA  0012               	return	
   863  0008FC                     l1725:
   864  0008FC  0E65               	movlw	101
   865  0008FE  181A               	xorwf	onData@d,w,c
   866  000900  A4D8               	btfss	status,2,c
   867  000902  D003               	goto	l1729
   868                           
   869                           ;receiver.c: 267: port = PORT_E;
   870  000904  0E04               	movlw	4
   871  000906  6E23               	movwf	_port,c
   872                           
   873                           ;receiver.c: 268: } else {
   874  000908  0012               	return	
   875  00090A                     l1729:
   876                           
   877                           ;receiver.c: 269: error();
   878  00090A  EC54  F007         	call	_error	;wreg free
   879                           
   880                           ;receiver.c: 270: }
   881                           ;receiver.c: 271: break;
   882  00090E  0012               	return	
   883  000910                     l1731:
   884                           
   885                           ;receiver.c: 273: checksumCalculated ^= d;
   886  000910  501A               	movf	onData@d,w,c
   887  000912  1A26               	xorwf	_checksumCalculated,f,c
   888                           
   889                           ;receiver.c: 274: temp = parseHex(d);
   890  000914  501A               	movf	onData@d,w,c
   891  000916  EC16  F007         	call	_parseHex
   892  00091A  6E25               	movwf	_temp,c
   893                           
   894                           ;receiver.c: 275: if (temp < 0) {
   895  00091C  AE25               	btfss	_temp,7,c
   896  00091E  D003               	goto	l1739
   897                           
   898                           ;receiver.c: 276: error();
   899  000920  EC54  F007         	call	_error	;wreg free
   900                           
   901                           ;receiver.c: 277: } else {
   902  000924  0012               	return	
   903  000926                     l1739:
   904                           
   905                           ;receiver.c: 278: state = STATE_VALUE_LOW_NIBBLE;
   906  000926  0E04               	movlw	4
   907  000928  6E29               	movwf	_state,c
   908                           
   909                           ;receiver.c: 279: value = (uint8_t) temp;
   910  00092A  C025  F028         	movff	_temp,_value
   911                           
   912                           ;receiver.c: 280: value <<= 4;
   913  00092E  3A28               	swapf	_value,f,c
   914  000930  0EF0               	movlw	240
   915  000932  1628               	andwf	_value,f,c
   916                           
   917                           ;receiver.c: 281: }
   918                           ;receiver.c: 282: break;
   919  000934  0012               	return	
   920  000936                     l1745:
   921                           
   922                           ;receiver.c: 284: checksumCalculated ^= d;
   923  000936  501A               	movf	onData@d,w,c
   924  000938  1A26               	xorwf	_checksumCalculated,f,c
   925                           
   926                           ;receiver.c: 285: temp = parseHex(d);
   927  00093A  501A               	movf	onData@d,w,c
   928  00093C  EC16  F007         	call	_parseHex
   929  000940  6E25               	movwf	_temp,c
   930                           
   931                           ;receiver.c: 286: if (temp < 0) {
   932  000942  AE25               	btfss	_temp,7,c
   933  000944  D003               	goto	l1753
   934                           
   935                           ;receiver.c: 287: error();
   936  000946  EC54  F007         	call	_error	;wreg free
   937                           
   938                           ;receiver.c: 288: } else {
   939  00094A  0012               	return	
   940  00094C                     l1753:
   941                           
   942                           ;receiver.c: 289: value |= (uint8_t) temp;
   943  00094C  5025               	movf	_temp,w,c
   944  00094E  1228               	iorwf	_value,f,c
   945                           
   946                           ;receiver.c: 290: state = STATE_CHECKSUM_HIGH_NIBBLE;
   947  000950  0E05               	movlw	5
   948  000952  6E29               	movwf	_state,c
   949                           
   950                           ;receiver.c: 291: if (command == COMMAND_FLASH) {
   951  000954  0E05               	movlw	5
   952  000956  1824               	xorwf	_command,w,c
   953  000958  A4D8               	btfss	status,2,c
   954  00095A  0012               	return	
   955                           
   956                           ;receiver.c: 292: flashBuffer[flashBufferIndex] = value;
   957  00095C  0E00               	movlw	low _flashBuffer
   958  00095E  241B               	addwf	_flashBufferIndex,w,c
   959  000960  6ED9               	movwf	fsr2l,c
   960  000962  0E01               	movlw	high _flashBuffer
   961  000964  201C               	addwfc	_flashBufferIndex+1,w,c
   962  000966  6EDA               	movwf	fsr2h,c
   963  000968  C028  FFDF         	movff	_value,indf2
   964                           
   965                           ;receiver.c: 293: if (flashBufferIndex < 255) {
   966  00096C  501C               	movf	_flashBufferIndex+1,w,c
   967  00096E  E105               	bnz	l1765
   968  000970  281B               	incf	_flashBufferIndex,w,c
   969  000972  B0D8               	btfsc	status,0,c
   970  000974  D002               	goto	l1765
   971                           
   972                           ;receiver.c: 294: state = STATE_VALUE_HIGH_NIBBLE;
   973  000976  0E03               	movlw	3
   974  000978  D001               	goto	L2
   975  00097A                     l1765:
   976                           
   977                           ;receiver.c: 296: state = STATE_CHECKSUM_HIGH_NIBBLE;
   978  00097A  0E05               	movlw	5
   979  00097C                     L2:
   980  00097C  6E29               	movwf	_state,c
   981                           
   982                           ;receiver.c: 297: }
   983                           ;receiver.c: 298: flashBufferIndex++;
   984  00097E  4A1B               	infsnz	_flashBufferIndex,f,c
   985  000980  2A1C               	incf	_flashBufferIndex+1,f,c
   986                           
   987                           ;receiver.c: 299: }
   988                           ;receiver.c: 300: }
   989                           ;receiver.c: 301: break;
   990  000982  0012               	return	
   991  000984                     l1769:
   992                           
   993                           ;receiver.c: 303: temp = parseHex(d);
   994  000984  501A               	movf	onData@d,w,c
   995  000986  EC16  F007         	call	_parseHex
   996  00098A  6E25               	movwf	_temp,c
   997                           
   998                           ;receiver.c: 304: if (temp < 0) {
   999  00098C  AE25               	btfss	_temp,7,c
  1000  00098E  D003               	goto	l1775
  1001                           
  1002                           ;receiver.c: 305: error();
  1003  000990  EC54  F007         	call	_error	;wreg free
  1004                           
  1005                           ;receiver.c: 306: } else {
  1006  000994  0012               	return	
  1007  000996                     l1775:
  1008                           
  1009                           ;receiver.c: 307: state = STATE_CHECKSUM_LOW_NIBBLE;
  1010  000996  0E06               	movlw	6
  1011  000998  6E29               	movwf	_state,c
  1012                           
  1013                           ;receiver.c: 308: checksum = (uint8_t) temp;
  1014  00099A  C025  F027         	movff	_temp,_checksum
  1015                           
  1016                           ;receiver.c: 309: checksum <<= 4;
  1017  00099E  3A27               	swapf	_checksum,f,c
  1018  0009A0  0EF0               	movlw	240
  1019  0009A2  1627               	andwf	_checksum,f,c
  1020                           
  1021                           ;receiver.c: 310: }
  1022                           ;receiver.c: 311: break;
  1023  0009A4  0012               	return	
  1024  0009A6                     l1781:
  1025                           
  1026                           ;receiver.c: 313: temp = parseHex(d);
  1027  0009A6  501A               	movf	onData@d,w,c
  1028  0009A8  EC16  F007         	call	_parseHex
  1029  0009AC  6E25               	movwf	_temp,c
  1030                           
  1031                           ;receiver.c: 314: if (temp < 0) {
  1032  0009AE  AE25               	btfss	_temp,7,c
  1033  0009B0  D003               	goto	l1787
  1034                           
  1035                           ;receiver.c: 315: error();
  1036  0009B2  EC54  F007         	call	_error	;wreg free
  1037                           
  1038                           ;receiver.c: 316: } else {
  1039  0009B6  0012               	return	
  1040  0009B8                     l1787:
  1041                           
  1042                           ;receiver.c: 317: state = STATE_END;
  1043  0009B8  0E07               	movlw	7
  1044  0009BA  6E29               	movwf	_state,c
  1045                           
  1046                           ;receiver.c: 318: checksum |= (uint8_t) temp;
  1047  0009BC  5025               	movf	_temp,w,c
  1048  0009BE  1227               	iorwf	_checksum,f,c
  1049                           
  1050                           ;receiver.c: 319: }
  1051                           ;receiver.c: 320: break;
  1052  0009C0  0012               	return	
  1053  0009C2                     l1791:
  1054                           
  1055                           ;receiver.c: 322: if (d == '>') {
  1056  0009C2  0E3E               	movlw	62
  1057  0009C4  181A               	xorwf	onData@d,w,c
  1058  0009C6  A4D8               	btfss	status,2,c
  1059  0009C8  D0F2               	goto	l1901
  1060                           
  1061                           ;receiver.c: 323: state = STATE_IDLE;
  1062  0009CA  0E00               	movlw	0
  1063  0009CC  6E29               	movwf	_state,c
  1064                           
  1065                           ;receiver.c: 324: if (checksumCalculated == checksum) {
  1066  0009CE  5027               	movf	_checksum,w,c
  1067  0009D0  1826               	xorwf	_checksumCalculated,w,c
  1068  0009D2  A4D8               	btfss	status,2,c
  1069  0009D4  D0E9               	goto	l1899
  1070                           
  1071                           ;receiver.c: 325: if (command == COMMAND_READ) {
  1072  0009D6  5024               	movf	_command,w,c
  1073  0009D8  A4D8               	btfss	status,2,c
  1074  0009DA  D003               	goto	l1801
  1075                           
  1076                           ;receiver.c: 326: readPort();
  1077  0009DC  EC71  F006         	call	_readPort	;wreg free
  1078                           
  1079                           ;receiver.c: 327: } else if (command == COMMAND_WRITE) {
  1080  0009E0  D0D6               	goto	l1891
  1081  0009E2                     l1801:
  1082  0009E2  0424               	decf	_command,w,c
  1083  0009E4  A4D8               	btfss	status,2,c
  1084  0009E6  D028               	goto	l1825
  1085                           
  1086                           ;receiver.c: 328: if (port == PORT_A) {
  1087  0009E8  5023               	movf	_port,w,c
  1088  0009EA  A4D8               	btfss	status,2,c
  1089  0009EC  D004               	goto	l1807
  1090                           
  1091                           ;receiver.c: 329: writePortA(value);
  1092  0009EE  5028               	movf	_value,w,c
  1093  0009F0  EC74  F007         	call	_writePortA
  1094                           
  1095                           ;receiver.c: 330: } else if (port == PORT_B) {
  1096  0009F4  D01E               	goto	l1823
  1097  0009F6                     l1807:
  1098  0009F6  0423               	decf	_port,w,c
  1099  0009F8  A4D8               	btfss	status,2,c
  1100  0009FA  D004               	goto	l1811
  1101                           
  1102                           ;receiver.c: 331: writePortB(value);
  1103  0009FC  5028               	movf	_value,w,c
  1104  0009FE  EC80  F007         	call	_writePortB
  1105                           
  1106                           ;receiver.c: 332: } else if (port == PORT_C) {
  1107  000A02  D017               	goto	l1823
  1108  000A04                     l1811:
  1109  000A04  0E02               	movlw	2
  1110  000A06  1823               	xorwf	_port,w,c
  1111  000A08  A4D8               	btfss	status,2,c
  1112  000A0A  D004               	goto	l1815
  1113                           
  1114                           ;receiver.c: 333: writePortC(value);
  1115  000A0C  5028               	movf	_value,w,c
  1116  000A0E  EC7C  F007         	call	_writePortC
  1117                           
  1118                           ;receiver.c: 334: } else if (port == PORT_D) {
  1119  000A12  D00F               	goto	l1823
  1120  000A14                     l1815:
  1121  000A14  0E03               	movlw	3
  1122  000A16  1823               	xorwf	_port,w,c
  1123  000A18  A4D8               	btfss	status,2,c
  1124  000A1A  D004               	goto	l1819
  1125                           
  1126                           ;receiver.c: 335: writePortD(value);
  1127  000A1C  5028               	movf	_value,w,c
  1128  000A1E  EC78  F007         	call	_writePortD
  1129                           
  1130                           ;receiver.c: 336: } else if (port == PORT_E) {
  1131  000A22  D007               	goto	l1823
  1132  000A24                     l1819:
  1133  000A24  0E04               	movlw	4
  1134  000A26  1823               	xorwf	_port,w,c
  1135  000A28  A4D8               	btfss	status,2,c
  1136  000A2A  D003               	goto	l1823
  1137                           
  1138                           ;receiver.c: 337: writePortE(value);
  1139  000A2C  5028               	movf	_value,w,c
  1140  000A2E  EC70  F007         	call	_writePortE
  1141  000A32                     l1823:
  1142                           
  1143                           ;receiver.c: 338: }
  1144                           ;receiver.c: 339: readPort();
  1145  000A32  EC71  F006         	call	_readPort	;wreg free
  1146                           
  1147                           ;receiver.c: 340: } else if (command == COMMAND_TRIS) {
  1148  000A36  D0AB               	goto	l1891
  1149  000A38                     l1825:
  1150  000A38  0E02               	movlw	2
  1151  000A3A  1824               	xorwf	_command,w,c
  1152  000A3C  A4D8               	btfss	status,2,c
  1153  000A3E  D028               	goto	l1849
  1154                           
  1155                           ;receiver.c: 341: if (port == PORT_A) {
  1156  000A40  5023               	movf	_port,w,c
  1157  000A42  A4D8               	btfss	status,2,c
  1158  000A44  D004               	goto	l1831
  1159                           
  1160                           ;receiver.c: 342: writeTrisA(value);
  1161  000A46  5028               	movf	_value,w,c
  1162  000A48  EC6C  F007         	call	_writeTrisA
  1163                           
  1164                           ;receiver.c: 343: } else if (port == PORT_B) {
  1165  000A4C  D01E               	goto	l1847
  1166  000A4E                     l1831:
  1167  000A4E  0423               	decf	_port,w,c
  1168  000A50  A4D8               	btfss	status,2,c
  1169  000A52  D004               	goto	l1835
  1170                           
  1171                           ;receiver.c: 344: writeTrisB(value);
  1172  000A54  5028               	movf	_value,w,c
  1173  000A56  EC68  F007         	call	_writeTrisB
  1174                           
  1175                           ;receiver.c: 345: } else if (port == PORT_C) {
  1176  000A5A  D017               	goto	l1847
  1177  000A5C                     l1835:
  1178  000A5C  0E02               	movlw	2
  1179  000A5E  1823               	xorwf	_port,w,c
  1180  000A60  A4D8               	btfss	status,2,c
  1181  000A62  D004               	goto	l1839
  1182                           
  1183                           ;receiver.c: 346: writeTrisC(value);
  1184  000A64  5028               	movf	_value,w,c
  1185  000A66  EC4E  F007         	call	_writeTrisC
  1186                           
  1187                           ;receiver.c: 347: } else if (port == PORT_D) {
  1188  000A6A  D00F               	goto	l1847
  1189  000A6C                     l1839:
  1190  000A6C  0E03               	movlw	3
  1191  000A6E  1823               	xorwf	_port,w,c
  1192  000A70  A4D8               	btfss	status,2,c
  1193  000A72  D004               	goto	l1843
  1194                           
  1195                           ;receiver.c: 348: writeTrisD(value);
  1196  000A74  5028               	movf	_value,w,c
  1197  000A76  EC64  F007         	call	_writeTrisD
  1198                           
  1199                           ;receiver.c: 349: } else if (port == PORT_E) {
  1200  000A7A  D007               	goto	l1847
  1201  000A7C                     l1843:
  1202  000A7C  0E04               	movlw	4
  1203  000A7E  1823               	xorwf	_port,w,c
  1204  000A80  A4D8               	btfss	status,2,c
  1205  000A82  D003               	goto	l1847
  1206                           
  1207                           ;receiver.c: 350: writeTrisE(value);
  1208  000A84  5028               	movf	_value,w,c
  1209  000A86  EC60  F007         	call	_writeTrisE
  1210  000A8A                     l1847:
  1211                           
  1212                           ;receiver.c: 351: }
  1213                           ;receiver.c: 352: readPort();
  1214  000A8A  EC71  F006         	call	_readPort	;wreg free
  1215                           
  1216                           ;receiver.c: 353: } else if (command == COMMAND_ADR_LOW) {
  1217  000A8E  D07F               	goto	l1891
  1218  000A90                     l1849:
  1219  000A90  0E03               	movlw	3
  1220  000A92  1824               	xorwf	_command,w,c
  1221  000A94  A4D8               	btfss	status,2,c
  1222  000A96  D011               	goto	l1853
  1223                           
  1224                           ;receiver.c: 354: adr = (adr & 0xff00) | value;
  1225  000A98  0E00               	movlw	0
  1226  000A9A  6E16               	movwf	??_onData& (0+255),c
  1227  000A9C  0EFF               	movlw	255
  1228  000A9E  6E17               	movwf	(??_onData+1)& (0+255),c
  1229  000AA0  C01D  F018         	movff	_adr,??_onData+2
  1230  000AA4  C01E  F019         	movff	_adr+1,??_onData+3
  1231  000AA8  5016               	movf	??_onData,w,c
  1232  000AAA  1618               	andwf	??_onData+2,f,c
  1233  000AAC  5017               	movf	??_onData+1,w,c
  1234  000AAE  1619               	andwf	??_onData+3,f,c
  1235  000AB0  5028               	movf	_value,w,c
  1236  000AB2  1018               	iorwf	??_onData+2,w,c
  1237  000AB4  6E1D               	movwf	_adr,c
  1238  000AB6  5019               	movf	??_onData+3,w,c
  1239  000AB8  D012               	goto	L3
  1240  000ABA                     l1853:
  1241  000ABA  0E04               	movlw	4
  1242  000ABC  1824               	xorwf	_command,w,c
  1243  000ABE  A4D8               	btfss	status,2,c
  1244  000AC0  D010               	goto	l1857
  1245                           
  1246                           ;receiver.c: 356: adr = (adr & 0xff) | (value << 8);
  1247  000AC2  5028               	movf	_value,w,c
  1248  000AC4  6E17               	movwf	(??_onData+1)& (0+255),c
  1249  000AC6  6A16               	clrf	??_onData& (0+255),c
  1250  000AC8  0EFF               	movlw	255
  1251  000ACA  141D               	andwf	_adr,w,c
  1252  000ACC  6E18               	movwf	(??_onData+2)& (0+255),c
  1253  000ACE  0E00               	movlw	0
  1254  000AD0  141E               	andwf	_adr+1,w,c
  1255  000AD2  6E19               	movwf	(??_onData+3)& (0+255),c
  1256  000AD4  5016               	movf	??_onData,w,c
  1257  000AD6  1018               	iorwf	??_onData+2,w,c
  1258  000AD8  6E1D               	movwf	_adr,c
  1259  000ADA  5017               	movf	??_onData+1,w,c
  1260  000ADC  1019               	iorwf	??_onData+3,w,c
  1261  000ADE                     L3:
  1262  000ADE  6E1E               	movwf	_adr+1,c
  1263                           
  1264                           ;receiver.c: 357: } else if (command == COMMAND_FLASH) {
  1265  000AE0  D056               	goto	l1891
  1266  000AE2                     l1857:
  1267  000AE2  0E05               	movlw	5
  1268  000AE4  1824               	xorwf	_command,w,c
  1269  000AE6  A4D8               	btfss	status,2,c
  1270  000AE8  D045               	goto	l1885
  1271                           
  1272                           ;receiver.c: 358: for (flashBufferIndex = 0; flashBufferIndex < 256; flashBufferIndex++)
      +                           {
  1273  000AEA  0E00               	movlw	0
  1274  000AEC  6E1C               	movwf	_flashBufferIndex+1,c
  1275  000AEE  0E00               	movlw	0
  1276  000AF0  6E1B               	movwf	_flashBufferIndex,c
  1277  000AF2                     l1861:
  1278  000AF2  041C               	decf	_flashBufferIndex+1,w,c
  1279  000AF4  B0D8               	btfsc	status,0,c
  1280  000AF6  D04B               	goto	l1891
  1281                           
  1282                           ;receiver.c: 359: writeAddressPhysical(0x5555, 0xaa);
  1283  000AF8  0E55               	movlw	85
  1284  000AFA  6E14               	movwf	writeAddressPhysical@adr+1,c
  1285  000AFC  0E55               	movlw	85
  1286  000AFE  6E13               	movwf	writeAddressPhysical@adr,c
  1287  000B00  0EAA               	movlw	170
  1288  000B02  6E15               	movwf	writeAddressPhysical@value,c
  1289  000B04  ECEA  F006         	call	_writeAddressPhysical	;wreg free
  1290                           
  1291                           ;receiver.c: 360: writeAddressPhysical(0x2aaa, 0x55);
  1292  000B08  0E2A               	movlw	42
  1293  000B0A  6E14               	movwf	writeAddressPhysical@adr+1,c
  1294  000B0C  0EAA               	movlw	170
  1295  000B0E  6E13               	movwf	writeAddressPhysical@adr,c
  1296  000B10  0E55               	movlw	85
  1297  000B12  6E15               	movwf	writeAddressPhysical@value,c
  1298  000B14  ECEA  F006         	call	_writeAddressPhysical	;wreg free
  1299                           
  1300                           ;receiver.c: 361: writeAddressPhysical(0x5555, 0xa0);
  1301  000B18  0E55               	movlw	85
  1302  000B1A  6E14               	movwf	writeAddressPhysical@adr+1,c
  1303  000B1C  0E55               	movlw	85
  1304  000B1E  6E13               	movwf	writeAddressPhysical@adr,c
  1305  000B20  0EA0               	movlw	160
  1306  000B22  6E15               	movwf	writeAddressPhysical@value,c
  1307  000B24  ECEA  F006         	call	_writeAddressPhysical	;wreg free
  1308                           
  1309                           ;receiver.c: 362: writeAddress(adr, flashBuffer[flashBufferIndex]);
  1310  000B28  C01D  F010         	movff	_adr,writeAddress@adr
  1311  000B2C  C01E  F011         	movff	_adr+1,writeAddress@adr+1
  1312  000B30  0E00               	movlw	low _flashBuffer
  1313  000B32  241B               	addwf	_flashBufferIndex,w,c
  1314  000B34  6ED9               	movwf	fsr2l,c
  1315  000B36  0E01               	movlw	high _flashBuffer
  1316  000B38  201C               	addwfc	_flashBufferIndex+1,w,c
  1317  000B3A  6EDA               	movwf	fsr2h,c
  1318  000B3C  50DF               	movf	indf2,w,c
  1319  000B3E  6E12               	movwf	writeAddress@value,c
  1320  000B40  EC97  F006         	call	_writeAddress	;wreg free
  1321                           
  1322                           ;receiver.c: 363: _delay((unsigned long)((25)*(32000000/4000000.0)));
  1323  000B44  0E42               	movlw	66
  1324  000B46                     u1487:
  1325  000B46  2EE8               	decfsz	wreg,f,c
  1326  000B48  D7FE               	bra	u1487
  1327  000B4A  D000               	nop2	
  1328                           
  1329                           ;receiver.c: 364: value = readAddress(adr);
  1330  000B4C  C01D  F010         	movff	_adr,readAddress@adr
  1331  000B50  C01E  F011         	movff	_adr+1,readAddress@adr+1
  1332  000B54  EC2B  F007         	call	_readAddress	;wreg free
  1333  000B58  6E28               	movwf	_value,c
  1334                           
  1335                           ;receiver.c: 365: writeHex(value);
  1336  000B5A  5028               	movf	_value,w,c
  1337  000B5C  EC4A  F006         	call	_writeHex
  1338                           
  1339                           ;receiver.c: 366: value ^= 0xff;
  1340  000B60  0EFF               	movlw	255
  1341  000B62  1A28               	xorwf	_value,f,c
  1342                           
  1343                           ;receiver.c: 367: writeHex(value);
  1344  000B64  5028               	movf	_value,w,c
  1345  000B66  EC4A  F006         	call	_writeHex
  1346                           
  1347                           ;receiver.c: 368: adr++;
  1348  000B6A  4A1D               	infsnz	_adr,f,c
  1349  000B6C  2A1E               	incf	_adr+1,f,c
  1350  000B6E  4A1B               	infsnz	_flashBufferIndex,f,c
  1351  000B70  2A1C               	incf	_flashBufferIndex+1,f,c
  1352  000B72  D7BF               	goto	l1861
  1353  000B74                     l1885:
  1354  000B74  0E06               	movlw	6
  1355  000B76  1824               	xorwf	_command,w,c
  1356  000B78  A4D8               	btfss	status,2,c
  1357  000B7A  D009               	goto	l1891
  1358                           
  1359                           ;receiver.c: 371: value = readAddress(adr);
  1360  000B7C  C01D  F010         	movff	_adr,readAddress@adr
  1361  000B80  C01E  F011         	movff	_adr+1,readAddress@adr+1
  1362  000B84  EC2B  F007         	call	_readAddress	;wreg free
  1363  000B88  6E28               	movwf	_value,c
  1364                           
  1365                           ;receiver.c: 372: adr++;
  1366  000B8A  4A1D               	infsnz	_adr,f,c
  1367  000B8C  2A1E               	incf	_adr+1,f,c
  1368  000B8E                     l1891:
  1369                           
  1370                           ;receiver.c: 373: }
  1371                           ;receiver.c: 374: if (command != COMMAND_FLASH) {
  1372  000B8E  0E05               	movlw	5
  1373  000B90  1824               	xorwf	_command,w,c
  1374  000B92  B4D8               	btfsc	status,2,c
  1375  000B94  0012               	return	
  1376                           
  1377                           ;receiver.c: 375: writeHex(value);
  1378  000B96  5028               	movf	_value,w,c
  1379  000B98  EC4A  F006         	call	_writeHex
  1380                           
  1381                           ;receiver.c: 376: value ^= 0xff;
  1382  000B9C  0EFF               	movlw	255
  1383  000B9E  1A28               	xorwf	_value,f,c
  1384                           
  1385                           ;receiver.c: 377: writeHex(value);
  1386  000BA0  5028               	movf	_value,w,c
  1387  000BA2  EC4A  F006         	call	_writeHex
  1388                           
  1389                           ;receiver.c: 378: }
  1390                           ;receiver.c: 379: } else {
  1391  000BA6  0012               	return	
  1392  000BA8                     l1899:
  1393                           
  1394                           ;receiver.c: 380: error();
  1395  000BA8  EC54  F007         	call	_error	;wreg free
  1396                           
  1397                           ;receiver.c: 381: }
  1398                           ;receiver.c: 382: } else {
  1399  000BAC  0012               	return	
  1400  000BAE                     l1901:
  1401                           
  1402                           ;receiver.c: 383: error();
  1403  000BAE  EC54  F007         	call	_error	;wreg free
  1404                           
  1405                           ;receiver.c: 386: }
  1406                           
  1407                           ;receiver.c: 384: }
  1408                           ;receiver.c: 385: break;
  1409  000BB2  0012               	return	
  1410  000BB4                     l1905:
  1411  000BB4  5029               	movf	_state,w,c
  1412                           
  1413                           ; Switch size 1, requested type "space"
  1414                           ; Number of cases is 8, Range of values is 0 to 7
  1415                           ; switch strategies available:
  1416                           ; Name         Instructions Cycles
  1417                           ; simple_byte           25    13 (average)
  1418                           ;	Chosen strategy is simple_byte
  1419  000BB6  0A00               	xorlw	0	; case 0
  1420  000BB8  B4D8               	btfsc	status,2,c
  1421  000BBA  D62E               	goto	l1663
  1422  000BBC  0A01               	xorlw	1	; case 1
  1423  000BBE  B4D8               	btfsc	status,2,c
  1424  000BC0  D634               	goto	l1667
  1425  000BC2  0A03               	xorlw	3	; case 2
  1426  000BC4  B4D8               	btfsc	status,2,c
  1427  000BC6  D675               	goto	l1701
  1428  000BC8  0A01               	xorlw	1	; case 3
  1429  000BCA  B4D8               	btfsc	status,2,c
  1430  000BCC  D6A1               	goto	l1731
  1431  000BCE  0A07               	xorlw	7	; case 4
  1432  000BD0  B4D8               	btfsc	status,2,c
  1433  000BD2  D6B1               	goto	l1745
  1434  000BD4  0A01               	xorlw	1	; case 5
  1435  000BD6  B4D8               	btfsc	status,2,c
  1436  000BD8  D6D5               	goto	l1769
  1437  000BDA  0A03               	xorlw	3	; case 6
  1438  000BDC  B4D8               	btfsc	status,2,c
  1439  000BDE  D6E3               	goto	l1781
  1440  000BE0  0A01               	xorlw	1	; case 7
  1441  000BE2  A4D8               	btfss	status,2,c
  1442  000BE4  0012               	return	
  1443  000BE6  D6ED               	goto	l1791
  1444  000BE8                     __end_of_onData:
  1445                           	opt stack 0
  1446                           tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           postinc0	equ	0xFEE
  1451                           wreg	equ	0xFE8
  1452                           postdec1	equ	0xFE5
  1453                           fsr1h	equ	0xFE2
  1454                           fsr1l	equ	0xFE1
  1455                           indf2	equ	0xFDF
  1456                           fsr2h	equ	0xFDA
  1457                           fsr2l	equ	0xFD9
  1458                           status	equ	0xFD8
  1459                           
  1460 ;; *************** function _writeTrisE *****************
  1461 ;; Defined at:
  1462 ;;		line 166 in file "main.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  data            1    wreg     unsigned char 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  data            1   14[COMRAM] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1476 ;;      Params:         0       0       0       0       0       0       0       0       0
  1477 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1478 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1479 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1480 ;;Total ram usage:        1 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:    1
  1483 ;; This function calls:
  1484 ;;		Nothing
  1485 ;; This function is called by:
  1486 ;;		_onData
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text3
  1491  000EC0                     __ptext3:
  1492                           	opt stack 0
  1493  000EC0                     _writeTrisE:
  1494                           	opt stack 28
  1495                           
  1496                           ;incstack = 0
  1497                           ;writeTrisE@data stored from wreg
  1498  000EC0  6E0F               	movwf	writeTrisE@data,c
  1499                           
  1500                           ;main.c: 168: TRISE = data;
  1501  000EC2  C00F  FF96         	movff	writeTrisE@data,3990	;volatile
  1502  000EC6  0012               	return		;funcret
  1503  000EC8                     __end_of_writeTrisE:
  1504                           	opt stack 0
  1505                           tblptru	equ	0xFF8
  1506                           tblptrh	equ	0xFF7
  1507                           tblptrl	equ	0xFF6
  1508                           tablat	equ	0xFF5
  1509                           postinc0	equ	0xFEE
  1510                           wreg	equ	0xFE8
  1511                           postdec1	equ	0xFE5
  1512                           fsr1h	equ	0xFE2
  1513                           fsr1l	equ	0xFE1
  1514                           indf2	equ	0xFDF
  1515                           fsr2h	equ	0xFDA
  1516                           fsr2l	equ	0xFD9
  1517                           status	equ	0xFD8
  1518                           
  1519 ;; *************** function _writeTrisD *****************
  1520 ;; Defined at:
  1521 ;;		line 161 in file "main.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;  data            1    wreg     unsigned char 
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;  data            1   14[COMRAM] unsigned char 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1535 ;;      Params:         0       0       0       0       0       0       0       0       0
  1536 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1537 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1538 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1539 ;;Total ram usage:        1 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    1
  1542 ;; This function calls:
  1543 ;;		Nothing
  1544 ;; This function is called by:
  1545 ;;		_onData
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text4
  1550  000EC8                     __ptext4:
  1551                           	opt stack 0
  1552  000EC8                     _writeTrisD:
  1553                           	opt stack 28
  1554                           
  1555                           ;incstack = 0
  1556                           ;writeTrisD@data stored from wreg
  1557  000EC8  6E0F               	movwf	writeTrisD@data,c
  1558                           
  1559                           ;main.c: 163: TRISD = data;
  1560  000ECA  C00F  FF95         	movff	writeTrisD@data,3989	;volatile
  1561  000ECE  0012               	return		;funcret
  1562  000ED0                     __end_of_writeTrisD:
  1563                           	opt stack 0
  1564                           tblptru	equ	0xFF8
  1565                           tblptrh	equ	0xFF7
  1566                           tblptrl	equ	0xFF6
  1567                           tablat	equ	0xFF5
  1568                           postinc0	equ	0xFEE
  1569                           wreg	equ	0xFE8
  1570                           postdec1	equ	0xFE5
  1571                           fsr1h	equ	0xFE2
  1572                           fsr1l	equ	0xFE1
  1573                           indf2	equ	0xFDF
  1574                           fsr2h	equ	0xFDA
  1575                           fsr2l	equ	0xFD9
  1576                           status	equ	0xFD8
  1577                           
  1578 ;; *************** function _writeTrisC *****************
  1579 ;; Defined at:
  1580 ;;		line 155 in file "main.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  data            1    wreg     unsigned char 
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  data            1   14[COMRAM] unsigned char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		wreg, status,2, status,0
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1594 ;;      Params:         0       0       0       0       0       0       0       0       0
  1595 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1596 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1597 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1598 ;;Total ram usage:        1 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; Hardware stack levels required when called:    1
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_onData
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           	psect	text5
  1609  000E9C                     __ptext5:
  1610                           	opt stack 0
  1611  000E9C                     _writeTrisC:
  1612                           	opt stack 28
  1613                           
  1614                           ;incstack = 0
  1615                           ;writeTrisC@data stored from wreg
  1616  000E9C  6E0F               	movwf	writeTrisC@data,c
  1617                           
  1618                           ;main.c: 158: TRISC = data & 0b10111111 | 0x80;
  1619  000E9E  500F               	movf	writeTrisC@data,w,c
  1620  000EA0  0BBF               	andlw	191
  1621  000EA2  0980               	iorlw	128
  1622  000EA4  6E94               	movwf	3988,c	;volatile
  1623  000EA6  0012               	return		;funcret
  1624  000EA8                     __end_of_writeTrisC:
  1625                           	opt stack 0
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1h	equ	0xFE2
  1634                           fsr1l	equ	0xFE1
  1635                           indf2	equ	0xFDF
  1636                           fsr2h	equ	0xFDA
  1637                           fsr2l	equ	0xFD9
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _writeTrisB *****************
  1641 ;; Defined at:
  1642 ;;		line 150 in file "main.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  data            1    wreg     unsigned char 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  data            1   14[COMRAM] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1656 ;;      Params:         0       0       0       0       0       0       0       0       0
  1657 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1659 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1660 ;;Total ram usage:        1 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    1
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_onData
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text6
  1671  000ED0                     __ptext6:
  1672                           	opt stack 0
  1673  000ED0                     _writeTrisB:
  1674                           	opt stack 28
  1675                           
  1676                           ;incstack = 0
  1677                           ;writeTrisB@data stored from wreg
  1678  000ED0  6E0F               	movwf	writeTrisB@data,c
  1679                           
  1680                           ;main.c: 152: TRISB = data;
  1681  000ED2  C00F  FF93         	movff	writeTrisB@data,3987	;volatile
  1682  000ED6  0012               	return		;funcret
  1683  000ED8                     __end_of_writeTrisB:
  1684                           	opt stack 0
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           postdec1	equ	0xFE5
  1692                           fsr1h	equ	0xFE2
  1693                           fsr1l	equ	0xFE1
  1694                           indf2	equ	0xFDF
  1695                           fsr2h	equ	0xFDA
  1696                           fsr2l	equ	0xFD9
  1697                           status	equ	0xFD8
  1698                           
  1699 ;; *************** function _writeHex *****************
  1700 ;; Defined at:
  1701 ;;		line 93 in file "receiver.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;  data            1    wreg     unsigned char 
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;  data            1   18[COMRAM] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  1    wreg      void 
  1708 ;; Registers used:
  1709 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1715 ;;      Params:         0       0       0       0       0       0       0       0       0
  1716 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1717 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1718 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1719 ;;Total ram usage:        4 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    2
  1722 ;; This function calls:
  1723 ;;		_writeChar
  1724 ;; This function is called by:
  1725 ;;		_onData
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text7
  1730  000C94                     __ptext7:
  1731                           	opt stack 0
  1732  000C94                     _writeHex:
  1733                           	opt stack 27
  1734                           
  1735                           ;incstack = 0
  1736                           ;writeHex@data stored from wreg
  1737  000C94  6E13               	movwf	writeHex@data,c
  1738                           
  1739                           ;receiver.c: 95: writeChar(hex[data >> 4]);
  1740  000C96  C013  F010         	movff	writeHex@data,??_writeHex
  1741  000C9A  3A10               	swapf	??_writeHex,f,c
  1742  000C9C  0E0F               	movlw	15
  1743  000C9E  1610               	andwf	??_writeHex,f,c
  1744  000CA0  5010               	movf	??_writeHex,w,c
  1745  000CA2  242A               	addwf	_hex,w,c
  1746  000CA4  6E11               	movwf	(??_writeHex+1)& (0+255),c
  1747  000CA6  0E00               	movlw	0
  1748  000CA8  202B               	addwfc	_hex+1,w,c
  1749  000CAA  6E12               	movwf	(??_writeHex+2)& (0+255),c
  1750  000CAC  C011  FFF6         	movff	??_writeHex+1,tblptrl
  1751  000CB0  C012  FFF7         	movff	??_writeHex+2,tblptrh
  1752  000CB4                     	if	0	;tblptru may be non-zero
  1753  000CB4                     	endif
  1754  000CB4                     	if	0	;tblptru may be non-zero
  1755  000CB4                     	endif
  1756  000CB4  0008               	tblrd		*
  1757  000CB6  50F5               	movf	tablat,w,c
  1758  000CB8  EC5A  F007         	call	_writeChar
  1759                           
  1760                           ;receiver.c: 96: writeChar(hex[data & 0xf]);
  1761  000CBC  C013  F010         	movff	writeHex@data,??_writeHex
  1762  000CC0  0E0F               	movlw	15
  1763  000CC2  1610               	andwf	??_writeHex,f,c
  1764  000CC4  5010               	movf	??_writeHex,w,c
  1765  000CC6  242A               	addwf	_hex,w,c
  1766  000CC8  6E11               	movwf	(??_writeHex+1)& (0+255),c
  1767  000CCA  0E00               	movlw	0
  1768  000CCC  202B               	addwfc	_hex+1,w,c
  1769  000CCE  6E12               	movwf	(??_writeHex+2)& (0+255),c
  1770  000CD0  C011  FFF6         	movff	??_writeHex+1,tblptrl
  1771  000CD4  C012  FFF7         	movff	??_writeHex+2,tblptrh
  1772  000CD8                     	if	0	;tblptru may be non-zero
  1773  000CD8                     	endif
  1774  000CD8                     	if	0	;tblptru may be non-zero
  1775  000CD8                     	endif
  1776  000CD8  0008               	tblrd		*
  1777  000CDA  50F5               	movf	tablat,w,c
  1778  000CDC  EC5A  F007         	call	_writeChar
  1779  000CE0  0012               	return		;funcret
  1780  000CE2                     __end_of_writeHex:
  1781                           	opt stack 0
  1782                           tblptru	equ	0xFF8
  1783                           tblptrh	equ	0xFF7
  1784                           tblptrl	equ	0xFF6
  1785                           tablat	equ	0xFF5
  1786                           postinc0	equ	0xFEE
  1787                           wreg	equ	0xFE8
  1788                           postdec1	equ	0xFE5
  1789                           fsr1h	equ	0xFE2
  1790                           fsr1l	equ	0xFE1
  1791                           indf2	equ	0xFDF
  1792                           fsr2h	equ	0xFDA
  1793                           fsr2l	equ	0xFD9
  1794                           status	equ	0xFD8
  1795                           
  1796 ;; *************** function _writeAddressPhysical *****************
  1797 ;; Defined at:
  1798 ;;		line 184 in file "receiver.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  adr             2   18[COMRAM] unsigned int 
  1801 ;;  value           1   20[COMRAM] unsigned char 
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;		None
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2, status,0, cstack
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1813 ;;      Params:         3       0       0       0       0       0       0       0       0
  1814 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1816 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1817 ;;Total ram usage:        3 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    3
  1820 ;; This function calls:
  1821 ;;		_logicAddressToPhysical
  1822 ;;		_logicDataToPhysical
  1823 ;;		_writeAddress
  1824 ;; This function is called by:
  1825 ;;		_onData
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text8
  1830  000DD4                     __ptext8:
  1831                           	opt stack 0
  1832  000DD4                     _writeAddressPhysical:
  1833                           	opt stack 26
  1834                           
  1835                           ;receiver.c: 186: adr = logicAddressToPhysical(adr);
  1836                           
  1837                           ;incstack = 0
  1838  000DD4  C013  F00F         	movff	writeAddressPhysical@adr,logicAddressToPhysical@adr0
  1839  000DD8  C014  F010         	movff	writeAddressPhysical@adr+1,logicAddressToPhysical@adr0+1
  1840  000DDC  EC21  F006         	call	_logicAddressToPhysical	;wreg free
  1841  000DE0  C00F  F013         	movff	?_logicAddressToPhysical,writeAddressPhysical@adr
  1842  000DE4  C010  F014         	movff	?_logicAddressToPhysical+1,writeAddressPhysical@adr+1
  1843                           
  1844                           ;receiver.c: 187: value = logicDataToPhysical(value);
  1845  000DE8  5015               	movf	writeAddressPhysical@value,w,c
  1846  000DEA  EC01  F007         	call	_logicDataToPhysical
  1847  000DEE  6E15               	movwf	writeAddressPhysical@value,c
  1848                           
  1849                           ;receiver.c: 188: writeAddress(adr, value);
  1850  000DF0  C013  F010         	movff	writeAddressPhysical@adr,writeAddress@adr
  1851  000DF4  C014  F011         	movff	writeAddressPhysical@adr+1,writeAddress@adr+1
  1852  000DF8  C015  F012         	movff	writeAddressPhysical@value,writeAddress@value
  1853  000DFC  EC97  F006         	call	_writeAddress	;wreg free
  1854  000E00  0012               	return		;funcret
  1855  000E02                     __end_of_writeAddressPhysical:
  1856                           	opt stack 0
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1h	equ	0xFE2
  1865                           fsr1l	equ	0xFE1
  1866                           indf2	equ	0xFDF
  1867                           fsr2h	equ	0xFDA
  1868                           fsr2l	equ	0xFD9
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _writeAddress *****************
  1872 ;; Defined at:
  1873 ;;		line 164 in file "receiver.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;  adr             2   15[COMRAM] unsigned int 
  1876 ;;  value           1   17[COMRAM] unsigned char 
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      void 
  1881 ;; Registers used:
  1882 ;;		wreg, status,2, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1888 ;;      Params:         3       0       0       0       0       0       0       0       0
  1889 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1890 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1891 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1892 ;;Total ram usage:        3 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    2
  1895 ;; This function calls:
  1896 ;;		_writePortA
  1897 ;;		_writePortB
  1898 ;;		_writePortC
  1899 ;;		_writePortD
  1900 ;;		_writePortE
  1901 ;;		_writeTrisA
  1902 ;; This function is called by:
  1903 ;;		_writeAddressPhysical
  1904 ;;		_onData
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text9
  1909  000D2E                     __ptext9:
  1910                           	opt stack 0
  1911  000D2E                     _writeAddress:
  1912                           	opt stack 26
  1913                           
  1914                           ;receiver.c: 166: writeTrisA(0);
  1915                           
  1916                           ;incstack = 0
  1917  000D2E  0E00               	movlw	0
  1918  000D30  EC6C  F007         	call	_writeTrisA
  1919                           
  1920                           ;receiver.c: 167: writePortA(value);
  1921  000D34  5012               	movf	writeAddress@value,w,c
  1922  000D36  EC74  F007         	call	_writePortA
  1923                           
  1924                           ;receiver.c: 168: writePortC(0xff);
  1925  000D3A  0EFF               	movlw	255
  1926  000D3C  EC7C  F007         	call	_writePortC
  1927                           
  1928                           ;receiver.c: 169: writePortB(adr & 0xff);
  1929  000D40  5010               	movf	writeAddress@adr,w,c
  1930  000D42  EC80  F007         	call	_writePortB
  1931                           
  1932                           ;receiver.c: 170: writePortD((adr >> 8) & 0xff);
  1933  000D46  5011               	movf	writeAddress@adr+1,w,c
  1934  000D48  EC78  F007         	call	_writePortD
  1935                           
  1936                           ;receiver.c: 173: writePortE(2 | 4);
  1937  000D4C  0E06               	movlw	6
  1938  000D4E  EC70  F007         	call	_writePortE
  1939                           
  1940                           ;receiver.c: 174: writePortC(2 | 0x40);
  1941  000D52  0E42               	movlw	66
  1942  000D54  EC7C  F007         	call	_writePortC
  1943                           
  1944                           ;receiver.c: 177: writePortC(0xff);
  1945  000D58  0EFF               	movlw	255
  1946  000D5A  EC7C  F007         	call	_writePortC
  1947                           
  1948                           ;receiver.c: 178: writePortE(0xff);
  1949  000D5E  0EFF               	movlw	255
  1950  000D60  EC70  F007         	call	_writePortE
  1951                           
  1952                           ;receiver.c: 181: writeTrisA(0xff);
  1953  000D64  0EFF               	movlw	255
  1954  000D66  EC6C  F007         	call	_writeTrisA
  1955  000D6A  0012               	return		;funcret
  1956  000D6C                     __end_of_writeAddress:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           postdec1	equ	0xFE5
  1965                           fsr1h	equ	0xFE2
  1966                           fsr1l	equ	0xFE1
  1967                           indf2	equ	0xFDF
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           status	equ	0xFD8
  1971                           
  1972 ;; *************** function _writeTrisA *****************
  1973 ;; Defined at:
  1974 ;;		line 145 in file "main.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;  data            1    wreg     unsigned char 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  data            1   14[COMRAM] unsigned char 
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      void 
  1981 ;; Registers used:
  1982 ;;		wreg
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1988 ;;      Params:         0       0       0       0       0       0       0       0       0
  1989 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1991 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1992 ;;Total ram usage:        1 bytes
  1993 ;; Hardware stack levels used:    1
  1994 ;; Hardware stack levels required when called:    1
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_writeAddress
  1999 ;;		_onData
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text10
  2004  000ED8                     __ptext10:
  2005                           	opt stack 0
  2006  000ED8                     _writeTrisA:
  2007                           	opt stack 28
  2008                           
  2009                           ;incstack = 0
  2010                           ;writeTrisA@data stored from wreg
  2011  000ED8  6E0F               	movwf	writeTrisA@data,c
  2012                           
  2013                           ;main.c: 147: TRISA = data;
  2014  000EDA  C00F  FF92         	movff	writeTrisA@data,3986	;volatile
  2015  000EDE  0012               	return		;funcret
  2016  000EE0                     __end_of_writeTrisA:
  2017                           	opt stack 0
  2018                           tblptru	equ	0xFF8
  2019                           tblptrh	equ	0xFF7
  2020                           tblptrl	equ	0xFF6
  2021                           tablat	equ	0xFF5
  2022                           postinc0	equ	0xFEE
  2023                           wreg	equ	0xFE8
  2024                           postdec1	equ	0xFE5
  2025                           fsr1h	equ	0xFE2
  2026                           fsr1l	equ	0xFE1
  2027                           indf2	equ	0xFDF
  2028                           fsr2h	equ	0xFDA
  2029                           fsr2l	equ	0xFD9
  2030                           status	equ	0xFD8
  2031                           
  2032 ;; *************** function _writePortE *****************
  2033 ;; Defined at:
  2034 ;;		line 140 in file "main.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  data            1    wreg     unsigned char 
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;  data            1   14[COMRAM] unsigned char 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      void 
  2041 ;; Registers used:
  2042 ;;		wreg
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2048 ;;      Params:         0       0       0       0       0       0       0       0       0
  2049 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2050 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2051 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2052 ;;Total ram usage:        1 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    1
  2055 ;; This function calls:
  2056 ;;		Nothing
  2057 ;; This function is called by:
  2058 ;;		_writeAddress
  2059 ;;		_onData
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text11
  2064  000EE0                     __ptext11:
  2065                           	opt stack 0
  2066  000EE0                     _writePortE:
  2067                           	opt stack 28
  2068                           
  2069                           ;incstack = 0
  2070                           ;writePortE@data stored from wreg
  2071  000EE0  6E0F               	movwf	writePortE@data,c
  2072                           
  2073                           ;main.c: 142: PORTE = data;
  2074  000EE2  C00F  FF84         	movff	writePortE@data,3972	;volatile
  2075  000EE6  0012               	return		;funcret
  2076  000EE8                     __end_of_writePortE:
  2077                           	opt stack 0
  2078                           tblptru	equ	0xFF8
  2079                           tblptrh	equ	0xFF7
  2080                           tblptrl	equ	0xFF6
  2081                           tablat	equ	0xFF5
  2082                           postinc0	equ	0xFEE
  2083                           wreg	equ	0xFE8
  2084                           postdec1	equ	0xFE5
  2085                           fsr1h	equ	0xFE2
  2086                           fsr1l	equ	0xFE1
  2087                           indf2	equ	0xFDF
  2088                           fsr2h	equ	0xFDA
  2089                           fsr2l	equ	0xFD9
  2090                           status	equ	0xFD8
  2091                           
  2092 ;; *************** function _writePortA *****************
  2093 ;; Defined at:
  2094 ;;		line 120 in file "main.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;  data            1    wreg     unsigned char 
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  data            1   14[COMRAM] unsigned char 
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		wreg
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2108 ;;      Params:         0       0       0       0       0       0       0       0       0
  2109 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2111 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2112 ;;Total ram usage:        1 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    1
  2115 ;; This function calls:
  2116 ;;		Nothing
  2117 ;; This function is called by:
  2118 ;;		_writeAddress
  2119 ;;		_onData
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text12
  2124  000EE8                     __ptext12:
  2125                           	opt stack 0
  2126  000EE8                     _writePortA:
  2127                           	opt stack 28
  2128                           
  2129                           ;incstack = 0
  2130                           ;writePortA@data stored from wreg
  2131  000EE8  6E0F               	movwf	writePortA@data,c
  2132                           
  2133                           ;main.c: 122: PORTA = data;
  2134  000EEA  C00F  FF80         	movff	writePortA@data,3968	;volatile
  2135  000EEE  0012               	return		;funcret
  2136  000EF0                     __end_of_writePortA:
  2137                           	opt stack 0
  2138                           tblptru	equ	0xFF8
  2139                           tblptrh	equ	0xFF7
  2140                           tblptrl	equ	0xFF6
  2141                           tablat	equ	0xFF5
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           postdec1	equ	0xFE5
  2145                           fsr1h	equ	0xFE2
  2146                           fsr1l	equ	0xFE1
  2147                           indf2	equ	0xFDF
  2148                           fsr2h	equ	0xFDA
  2149                           fsr2l	equ	0xFD9
  2150                           status	equ	0xFD8
  2151                           
  2152 ;; *************** function _logicDataToPhysical *****************
  2153 ;; Defined at:
  2154 ;;		line 136 in file "receiver.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  value0          1    wreg     unsigned char 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  value0          1   15[COMRAM] unsigned char 
  2159 ;;  value           1   14[COMRAM] unsigned char 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      unsigned char 
  2162 ;; Registers used:
  2163 ;;		wreg, status,2, status,0
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2169 ;;      Params:         0       0       0       0       0       0       0       0       0
  2170 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2171 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2172 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2173 ;;Total ram usage:        2 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    1
  2176 ;; This function calls:
  2177 ;;		Nothing
  2178 ;; This function is called by:
  2179 ;;		_writeAddressPhysical
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text13
  2184  000E02                     __ptext13:
  2185                           	opt stack 0
  2186  000E02                     _logicDataToPhysical:
  2187                           	opt stack 27
  2188                           
  2189                           ;incstack = 0
  2190                           ;logicDataToPhysical@value0 stored from wreg
  2191  000E02  6E10               	movwf	logicDataToPhysical@value0,c
  2192                           
  2193                           ;receiver.c: 138: uint8_t value = 0;
  2194  000E04  0E00               	movlw	0
  2195  000E06  6E0F               	movwf	logicDataToPhysical@value,c
  2196                           
  2197                           ;receiver.c: 139: if (value0 & (1 << 0)) value |= 1 << 3;
  2198  000E08  B010               	btfsc	logicDataToPhysical@value0,0,c
  2199  000E0A  860F               	bsf	logicDataToPhysical@value,3,c
  2200                           
  2201                           ;receiver.c: 140: if (value0 & (1 << 1)) value |= 1 << 4;
  2202  000E0C  B210               	btfsc	logicDataToPhysical@value0,1,c
  2203  000E0E  880F               	bsf	logicDataToPhysical@value,4,c
  2204                           
  2205                           ;receiver.c: 141: if (value0 & (1 << 2)) value |= 1 << 2;
  2206  000E10  B410               	btfsc	logicDataToPhysical@value0,2,c
  2207  000E12  840F               	bsf	logicDataToPhysical@value,2,c
  2208                           
  2209                           ;receiver.c: 142: if (value0 & (1 << 3)) value |= 1 << 5;
  2210  000E14  B610               	btfsc	logicDataToPhysical@value0,3,c
  2211  000E16  8A0F               	bsf	logicDataToPhysical@value,5,c
  2212                           
  2213                           ;receiver.c: 143: if (value0 & (1 << 4)) value |= 1 << 1;
  2214  000E18  B810               	btfsc	logicDataToPhysical@value0,4,c
  2215  000E1A  820F               	bsf	logicDataToPhysical@value,1,c
  2216                           
  2217                           ;receiver.c: 144: if (value0 & (1 << 5)) value |= 1 << 6;
  2218  000E1C  BA10               	btfsc	logicDataToPhysical@value0,5,c
  2219  000E1E  8C0F               	bsf	logicDataToPhysical@value,6,c
  2220                           
  2221                           ;receiver.c: 145: if (value0 & (1 << 6)) value |= 1 << 0;
  2222  000E20  BC10               	btfsc	logicDataToPhysical@value0,6,c
  2223  000E22  800F               	bsf	logicDataToPhysical@value,0,c
  2224                           
  2225                           ;receiver.c: 146: if (value0 & (1 << 7)) value |= 1 << 7;
  2226  000E24  BE10               	btfsc	logicDataToPhysical@value0,7,c
  2227  000E26  8E0F               	bsf	logicDataToPhysical@value,7,c
  2228                           
  2229                           ;receiver.c: 147: return value;
  2230  000E28  500F               	movf	logicDataToPhysical@value,w,c
  2231  000E2A  0012               	return	
  2232  000E2C                     __end_of_logicDataToPhysical:
  2233                           	opt stack 0
  2234                           tblptru	equ	0xFF8
  2235                           tblptrh	equ	0xFF7
  2236                           tblptrl	equ	0xFF6
  2237                           tablat	equ	0xFF5
  2238                           postinc0	equ	0xFEE
  2239                           wreg	equ	0xFE8
  2240                           postdec1	equ	0xFE5
  2241                           fsr1h	equ	0xFE2
  2242                           fsr1l	equ	0xFE1
  2243                           indf2	equ	0xFDF
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _logicAddressToPhysical *****************
  2249 ;; Defined at:
  2250 ;;		line 114 in file "receiver.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;  adr0            2   14[COMRAM] unsigned int 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  adr             2   16[COMRAM] unsigned int 
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  2   14[COMRAM] unsigned int 
  2257 ;; Registers used:
  2258 ;;		wreg, status,2, status,0
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2264 ;;      Params:         2       0       0       0       0       0       0       0       0
  2265 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2266 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2267 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2268 ;;Total ram usage:        4 bytes
  2269 ;; Hardware stack levels used:    1
  2270 ;; Hardware stack levels required when called:    1
  2271 ;; This function calls:
  2272 ;;		Nothing
  2273 ;; This function is called by:
  2274 ;;		_writeAddressPhysical
  2275 ;;		_readAddressPhysical
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text14
  2280  000C42                     __ptext14:
  2281                           	opt stack 0
  2282  000C42                     _logicAddressToPhysical:
  2283                           	opt stack 27
  2284                           
  2285                           ;receiver.c: 116: uint16_t adr = 0;
  2286                           
  2287                           ;incstack = 0
  2288  000C42  0E00               	movlw	0
  2289  000C44  6E12               	movwf	logicAddressToPhysical@adr+1,c
  2290  000C46  0E00               	movlw	0
  2291  000C48  6E11               	movwf	logicAddressToPhysical@adr,c
  2292                           
  2293                           ;receiver.c: 117: if (adr0 & (1 << 0)) adr |= 1 << 0;
  2294  000C4A  B00F               	btfsc	logicAddressToPhysical@adr0,0,c
  2295  000C4C  8011               	bsf	logicAddressToPhysical@adr,0,c
  2296                           
  2297                           ;receiver.c: 118: if (adr0 & (1 << 1)) adr |= 1 << 12;
  2298  000C4E  B20F               	btfsc	logicAddressToPhysical@adr0,1,c
  2299  000C50  8812               	bsf	logicAddressToPhysical@adr+1,4,c
  2300                           
  2301                           ;receiver.c: 119: if (adr0 & (1 << 2)) adr |= 1 << 13;
  2302  000C52  B40F               	btfsc	logicAddressToPhysical@adr0,2,c
  2303  000C54  8A12               	bsf	logicAddressToPhysical@adr+1,5,c
  2304                           
  2305                           ;receiver.c: 120: if (adr0 & (1 << 3)) adr |= 1 << 14;
  2306  000C56  B60F               	btfsc	logicAddressToPhysical@adr0,3,c
  2307  000C58  8C12               	bsf	logicAddressToPhysical@adr+1,6,c
  2308                           
  2309                           ;receiver.c: 121: if (adr0 & (1 << 4)) adr |= 1 << 10;
  2310  000C5A  B80F               	btfsc	logicAddressToPhysical@adr0,4,c
  2311  000C5C  8412               	bsf	logicAddressToPhysical@adr+1,2,c
  2312                           
  2313                           ;receiver.c: 122: if (adr0 & (1 << 5)) adr |= 1 << 2;
  2314  000C5E  BA0F               	btfsc	logicAddressToPhysical@adr0,5,c
  2315  000C60  8411               	bsf	logicAddressToPhysical@adr,2,c
  2316                           
  2317                           ;receiver.c: 123: if (adr0 & (1 << 6)) adr |= 1 << 3;
  2318  000C62  BC0F               	btfsc	logicAddressToPhysical@adr0,6,c
  2319  000C64  8611               	bsf	logicAddressToPhysical@adr,3,c
  2320                           
  2321                           ;receiver.c: 124: if (adr0 & (1 << 7)) adr |= 1 << 11;
  2322  000C66  BE0F               	btfsc	logicAddressToPhysical@adr0,7,c
  2323  000C68  8612               	bsf	logicAddressToPhysical@adr+1,3,c
  2324                           
  2325                           ;receiver.c: 125: if (adr0 & (1 << 8)) adr |= 1 << 8;
  2326  000C6A  B010               	btfsc	logicAddressToPhysical@adr0+1,0,c
  2327  000C6C  8012               	bsf	logicAddressToPhysical@adr+1,0,c
  2328                           
  2329                           ;receiver.c: 126: if (adr0 & (1 << 9)) adr |= 1 << 6;
  2330  000C6E  B210               	btfsc	logicAddressToPhysical@adr0+1,1,c
  2331  000C70  8C11               	bsf	logicAddressToPhysical@adr,6,c
  2332                           
  2333                           ;receiver.c: 127: if (adr0 & (1 << 10)) adr |= 1 << 1;
  2334  000C72  B410               	btfsc	logicAddressToPhysical@adr0+1,2,c
  2335  000C74  8211               	bsf	logicAddressToPhysical@adr,1,c
  2336                           
  2337                           ;receiver.c: 128: if (adr0 & (1 << 11)) adr |= 1 << 7;
  2338  000C76  B610               	btfsc	logicAddressToPhysical@adr0+1,3,c
  2339  000C78  8E11               	bsf	logicAddressToPhysical@adr,7,c
  2340                           
  2341                           ;receiver.c: 129: if (adr0 & (1 << 12)) adr |= 1 << 4;
  2342  000C7A  B810               	btfsc	logicAddressToPhysical@adr0+1,4,c
  2343  000C7C  8811               	bsf	logicAddressToPhysical@adr,4,c
  2344                           
  2345                           ;receiver.c: 130: if (adr0 & (1 << 13)) adr |= 1 << 5;
  2346  000C7E  BA10               	btfsc	logicAddressToPhysical@adr0+1,5,c
  2347  000C80  8A11               	bsf	logicAddressToPhysical@adr,5,c
  2348                           
  2349                           ;receiver.c: 131: if (adr0 & (1 << 14)) adr |= 1 << 9;
  2350  000C82  BC10               	btfsc	logicAddressToPhysical@adr0+1,6,c
  2351  000C84  8212               	bsf	logicAddressToPhysical@adr+1,1,c
  2352                           
  2353                           ;receiver.c: 132: if (adr0 & (1 << 15)) adr |= 1 << 15;
  2354  000C86  BE10               	btfsc	logicAddressToPhysical@adr0+1,7,c
  2355  000C88  8E12               	bsf	logicAddressToPhysical@adr+1,7,c
  2356                           
  2357                           ;receiver.c: 133: return adr;
  2358  000C8A  C011  F00F         	movff	logicAddressToPhysical@adr,?_logicAddressToPhysical
  2359  000C8E  C012  F010         	movff	logicAddressToPhysical@adr+1,?_logicAddressToPhysical+1
  2360  000C92  0012               	return	
  2361  000C94                     __end_of_logicAddressToPhysical:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           postdec1	equ	0xFE5
  2370                           fsr1h	equ	0xFE2
  2371                           fsr1l	equ	0xFE1
  2372                           indf2	equ	0xFDF
  2373                           fsr2h	equ	0xFDA
  2374                           fsr2l	equ	0xFD9
  2375                           status	equ	0xFD8
  2376                           
  2377 ;; *************** function _readPort *****************
  2378 ;; Defined at:
  2379 ;;		line 99 in file "receiver.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;		None
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2393 ;;      Params:         0       0       0       0       0       0       0       0       0
  2394 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2395 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2396 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2397 ;;Total ram usage:        0 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    2
  2400 ;; This function calls:
  2401 ;;		_readPortA
  2402 ;;		_readPortB
  2403 ;;		_readPortC
  2404 ;;		_readPortD
  2405 ;;		_readPortE
  2406 ;; This function is called by:
  2407 ;;		_onData
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text15
  2412  000CE2                     __ptext15:
  2413                           	opt stack 0
  2414  000CE2                     _readPort:
  2415                           	opt stack 27
  2416                           
  2417                           ;receiver.c: 101: if (port == PORT_A) {
  2418                           
  2419                           ;incstack = 0
  2420  000CE2  5023               	movf	_port,w,c
  2421  000CE4  A4D8               	btfss	status,2,c
  2422  000CE6  D004               	goto	l1177
  2423                           
  2424                           ;receiver.c: 102: value = readPortA();
  2425  000CE8  EC8C  F007         	call	_readPortA	;wreg free
  2426  000CEC  6E28               	movwf	_value,c
  2427                           
  2428                           ;receiver.c: 103: } else if (port == PORT_B) {
  2429  000CEE  0012               	return	
  2430  000CF0                     l1177:
  2431  000CF0  0423               	decf	_port,w,c
  2432  000CF2  A4D8               	btfss	status,2,c
  2433  000CF4  D004               	goto	l1181
  2434                           
  2435                           ;receiver.c: 104: value = readPortB();
  2436  000CF6  EC8A  F007         	call	_readPortB	;wreg free
  2437  000CFA  6E28               	movwf	_value,c
  2438                           
  2439                           ;receiver.c: 105: } else if (port == PORT_C) {
  2440  000CFC  0012               	return	
  2441  000CFE                     l1181:
  2442  000CFE  0E02               	movlw	2
  2443  000D00  1823               	xorwf	_port,w,c
  2444  000D02  A4D8               	btfss	status,2,c
  2445  000D04  D004               	goto	l1185
  2446                           
  2447                           ;receiver.c: 106: value = readPortC();
  2448  000D06  EC88  F007         	call	_readPortC	;wreg free
  2449  000D0A  6E28               	movwf	_value,c
  2450                           
  2451                           ;receiver.c: 107: } else if (port == PORT_D) {
  2452  000D0C  0012               	return	
  2453  000D0E                     l1185:
  2454  000D0E  0E03               	movlw	3
  2455  000D10  1823               	xorwf	_port,w,c
  2456  000D12  A4D8               	btfss	status,2,c
  2457  000D14  D004               	goto	l1189
  2458                           
  2459                           ;receiver.c: 108: value = readPortD();
  2460  000D16  EC86  F007         	call	_readPortD	;wreg free
  2461  000D1A  6E28               	movwf	_value,c
  2462                           
  2463                           ;receiver.c: 109: } else if (port == PORT_E) {
  2464  000D1C  0012               	return	
  2465  000D1E                     l1189:
  2466  000D1E  0E04               	movlw	4
  2467  000D20  1823               	xorwf	_port,w,c
  2468  000D22  A4D8               	btfss	status,2,c
  2469  000D24  0012               	return	
  2470                           
  2471                           ;receiver.c: 110: value = readPortE();
  2472  000D26  EC84  F007         	call	_readPortE	;wreg free
  2473  000D2A  6E28               	movwf	_value,c
  2474  000D2C  0012               	return	
  2475  000D2E                     __end_of_readPort:
  2476                           	opt stack 0
  2477                           tblptru	equ	0xFF8
  2478                           tblptrh	equ	0xFF7
  2479                           tblptrl	equ	0xFF6
  2480                           tablat	equ	0xFF5
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           postdec1	equ	0xFE5
  2484                           fsr1h	equ	0xFE2
  2485                           fsr1l	equ	0xFE1
  2486                           indf2	equ	0xFDF
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _readPortE *****************
  2492 ;; Defined at:
  2493 ;;		line 191 in file "main.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;		None
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;		None
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      unsigned char 
  2500 ;; Registers used:
  2501 ;;		wreg, status,2
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2507 ;;      Params:         0       0       0       0       0       0       0       0       0
  2508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2510 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2511 ;;Total ram usage:        0 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    1
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_readPort
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           	psect	text16
  2522  000F08                     __ptext16:
  2523                           	opt stack 0
  2524  000F08                     _readPortE:
  2525                           	opt stack 27
  2526                           
  2527                           ;main.c: 193: return PORTE;
  2528                           
  2529                           ;incstack = 0
  2530  000F08  5084               	movf	3972,w,c	;volatile
  2531  000F0A  0012               	return	
  2532  000F0C                     __end_of_readPortE:
  2533                           	opt stack 0
  2534                           tblptru	equ	0xFF8
  2535                           tblptrh	equ	0xFF7
  2536                           tblptrl	equ	0xFF6
  2537                           tablat	equ	0xFF5
  2538                           postinc0	equ	0xFEE
  2539                           wreg	equ	0xFE8
  2540                           postdec1	equ	0xFE5
  2541                           fsr1h	equ	0xFE2
  2542                           fsr1l	equ	0xFE1
  2543                           indf2	equ	0xFDF
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548 ;; *************** function _readPortD *****************
  2549 ;; Defined at:
  2550 ;;		line 186 in file "main.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;		None
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;		None
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      unsigned char 
  2557 ;; Registers used:
  2558 ;;		wreg, status,2
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2564 ;;      Params:         0       0       0       0       0       0       0       0       0
  2565 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2567 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2568 ;;Total ram usage:        0 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    1
  2571 ;; This function calls:
  2572 ;;		Nothing
  2573 ;; This function is called by:
  2574 ;;		_readPort
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text17
  2579  000F0C                     __ptext17:
  2580                           	opt stack 0
  2581  000F0C                     _readPortD:
  2582                           	opt stack 27
  2583                           
  2584                           ;main.c: 188: return PORTD;
  2585                           
  2586                           ;incstack = 0
  2587  000F0C  5083               	movf	3971,w,c	;volatile
  2588  000F0E  0012               	return	
  2589  000F10                     __end_of_readPortD:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           postinc0	equ	0xFEE
  2596                           wreg	equ	0xFE8
  2597                           postdec1	equ	0xFE5
  2598                           fsr1h	equ	0xFE2
  2599                           fsr1l	equ	0xFE1
  2600                           indf2	equ	0xFDF
  2601                           fsr2h	equ	0xFDA
  2602                           fsr2l	equ	0xFD9
  2603                           status	equ	0xFD8
  2604                           
  2605 ;; *************** function _readPortC *****************
  2606 ;; Defined at:
  2607 ;;		line 181 in file "main.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;		None
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      unsigned char 
  2614 ;; Registers used:
  2615 ;;		wreg, status,2
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2621 ;;      Params:         0       0       0       0       0       0       0       0       0
  2622 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2624 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2625 ;;Total ram usage:        0 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    1
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_readPort
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text18
  2636  000F10                     __ptext18:
  2637                           	opt stack 0
  2638  000F10                     _readPortC:
  2639                           	opt stack 27
  2640                           
  2641                           ;main.c: 183: return PORTC;
  2642                           
  2643                           ;incstack = 0
  2644  000F10  5082               	movf	3970,w,c	;volatile
  2645  000F12  0012               	return	
  2646  000F14                     __end_of_readPortC:
  2647                           	opt stack 0
  2648                           tblptru	equ	0xFF8
  2649                           tblptrh	equ	0xFF7
  2650                           tblptrl	equ	0xFF6
  2651                           tablat	equ	0xFF5
  2652                           postinc0	equ	0xFEE
  2653                           wreg	equ	0xFE8
  2654                           postdec1	equ	0xFE5
  2655                           fsr1h	equ	0xFE2
  2656                           fsr1l	equ	0xFE1
  2657                           indf2	equ	0xFDF
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _readPortB *****************
  2663 ;; Defined at:
  2664 ;;		line 176 in file "main.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      unsigned char 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2678 ;;      Params:         0       0       0       0       0       0       0       0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2681 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2682 ;;Total ram usage:        0 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    1
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_readPort
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text19
  2693  000F14                     __ptext19:
  2694                           	opt stack 0
  2695  000F14                     _readPortB:
  2696                           	opt stack 27
  2697                           
  2698                           ;main.c: 178: return PORTB;
  2699                           
  2700                           ;incstack = 0
  2701  000F14  5081               	movf	3969,w,c	;volatile
  2702  000F16  0012               	return	
  2703  000F18                     __end_of_readPortB:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           tblptrh	equ	0xFF7
  2707                           tblptrl	equ	0xFF6
  2708                           tablat	equ	0xFF5
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           postdec1	equ	0xFE5
  2712                           fsr1h	equ	0xFE2
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           fsr2h	equ	0xFDA
  2716                           fsr2l	equ	0xFD9
  2717                           status	equ	0xFD8
  2718                           
  2719 ;; *************** function _readAddress *****************
  2720 ;; Defined at:
  2721 ;;		line 191 in file "receiver.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;  adr             2   15[COMRAM] unsigned int 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  d               1   17[COMRAM] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      unsigned char 
  2728 ;; Registers used:
  2729 ;;		wreg, status,2, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2735 ;;      Params:         2       0       0       0       0       0       0       0       0
  2736 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2738 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2739 ;;Total ram usage:        3 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    2
  2742 ;; This function calls:
  2743 ;;		_readPortA
  2744 ;;		_writePortB
  2745 ;;		_writePortC
  2746 ;;		_writePortD
  2747 ;; This function is called by:
  2748 ;;		_onData
  2749 ;;		_readAddressPhysical
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text20
  2754  000E56                     __ptext20:
  2755                           	opt stack 0
  2756  000E56                     _readAddress:
  2757                           	opt stack 27
  2758                           
  2759                           ;receiver.c: 193: uint8_t d;
  2760                           ;receiver.c: 195: writePortC(0xff);
  2761                           
  2762                           ;incstack = 0
  2763  000E56  0EFF               	movlw	255
  2764  000E58  EC7C  F007         	call	_writePortC
  2765                           
  2766                           ;receiver.c: 196: writePortB(adr & 0xff);
  2767  000E5C  5010               	movf	readAddress@adr,w,c
  2768  000E5E  EC80  F007         	call	_writePortB
  2769                           
  2770                           ;receiver.c: 197: writePortD((adr >> 8) & 0xff);
  2771  000E62  5011               	movf	readAddress@adr+1,w,c
  2772  000E64  EC78  F007         	call	_writePortD
  2773                           
  2774                           ;receiver.c: 200: writePortC(0x40);
  2775  000E68  0E40               	movlw	64
  2776  000E6A  EC7C  F007         	call	_writePortC
  2777                           
  2778                           ;receiver.c: 202: d = readPortA();
  2779  000E6E  EC8C  F007         	call	_readPortA	;wreg free
  2780  000E72  6E12               	movwf	readAddress@d,c
  2781                           
  2782                           ;receiver.c: 204: writePortC(0xff);
  2783  000E74  0EFF               	movlw	255
  2784  000E76  EC7C  F007         	call	_writePortC
  2785                           
  2786                           ;receiver.c: 206: return d;
  2787  000E7A  5012               	movf	readAddress@d,w,c
  2788  000E7C  0012               	return	
  2789  000E7E                     __end_of_readAddress:
  2790                           	opt stack 0
  2791                           tblptru	equ	0xFF8
  2792                           tblptrh	equ	0xFF7
  2793                           tblptrl	equ	0xFF6
  2794                           tablat	equ	0xFF5
  2795                           postinc0	equ	0xFEE
  2796                           wreg	equ	0xFE8
  2797                           postdec1	equ	0xFE5
  2798                           fsr1h	equ	0xFE2
  2799                           fsr1l	equ	0xFE1
  2800                           indf2	equ	0xFDF
  2801                           fsr2h	equ	0xFDA
  2802                           fsr2l	equ	0xFD9
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function _writePortD *****************
  2806 ;; Defined at:
  2807 ;;		line 135 in file "main.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  data            1    wreg     unsigned char 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  data            1   14[COMRAM] unsigned char 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2821 ;;      Params:         0       0       0       0       0       0       0       0       0
  2822 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2824 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2825 ;;Total ram usage:        1 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    1
  2828 ;; This function calls:
  2829 ;;		Nothing
  2830 ;; This function is called by:
  2831 ;;		_writeAddress
  2832 ;;		_readAddress
  2833 ;;		_onData
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text21
  2838  000EF0                     __ptext21:
  2839                           	opt stack 0
  2840  000EF0                     _writePortD:
  2841                           	opt stack 28
  2842                           
  2843                           ;incstack = 0
  2844                           ;writePortD@data stored from wreg
  2845  000EF0  6E0F               	movwf	writePortD@data,c
  2846                           
  2847                           ;main.c: 137: PORTD = data;
  2848  000EF2  C00F  FF83         	movff	writePortD@data,3971	;volatile
  2849  000EF6  0012               	return		;funcret
  2850  000EF8                     __end_of_writePortD:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           postinc0	equ	0xFEE
  2857                           wreg	equ	0xFE8
  2858                           postdec1	equ	0xFE5
  2859                           fsr1h	equ	0xFE2
  2860                           fsr1l	equ	0xFE1
  2861                           indf2	equ	0xFDF
  2862                           fsr2h	equ	0xFDA
  2863                           fsr2l	equ	0xFD9
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _writePortC *****************
  2867 ;; Defined at:
  2868 ;;		line 130 in file "main.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  data            1    wreg     unsigned char 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  data            1   14[COMRAM] unsigned char 
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0
  2883 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2885 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2886 ;;Total ram usage:        1 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    1
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_writeAddress
  2893 ;;		_readAddress
  2894 ;;		_onData
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text22
  2899  000EF8                     __ptext22:
  2900                           	opt stack 0
  2901  000EF8                     _writePortC:
  2902                           	opt stack 28
  2903                           
  2904                           ;incstack = 0
  2905                           ;writePortC@data stored from wreg
  2906  000EF8  6E0F               	movwf	writePortC@data,c
  2907                           
  2908                           ;main.c: 132: PORTC = data;
  2909  000EFA  C00F  FF82         	movff	writePortC@data,3970	;volatile
  2910  000EFE  0012               	return		;funcret
  2911  000F00                     __end_of_writePortC:
  2912                           	opt stack 0
  2913                           tblptru	equ	0xFF8
  2914                           tblptrh	equ	0xFF7
  2915                           tblptrl	equ	0xFF6
  2916                           tablat	equ	0xFF5
  2917                           postinc0	equ	0xFEE
  2918                           wreg	equ	0xFE8
  2919                           postdec1	equ	0xFE5
  2920                           fsr1h	equ	0xFE2
  2921                           fsr1l	equ	0xFE1
  2922                           indf2	equ	0xFDF
  2923                           fsr2h	equ	0xFDA
  2924                           fsr2l	equ	0xFD9
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _writePortB *****************
  2928 ;; Defined at:
  2929 ;;		line 125 in file "main.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  data            1    wreg     unsigned char 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  data            1   14[COMRAM] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0
  2944 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2946 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2947 ;;Total ram usage:        1 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    1
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_writeAddress
  2954 ;;		_readAddress
  2955 ;;		_onData
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text23
  2960  000F00                     __ptext23:
  2961                           	opt stack 0
  2962  000F00                     _writePortB:
  2963                           	opt stack 28
  2964                           
  2965                           ;incstack = 0
  2966                           ;writePortB@data stored from wreg
  2967  000F00  6E0F               	movwf	writePortB@data,c
  2968                           
  2969                           ;main.c: 127: PORTB = data;
  2970  000F02  C00F  FF81         	movff	writePortB@data,3969	;volatile
  2971  000F06  0012               	return		;funcret
  2972  000F08                     __end_of_writePortB:
  2973                           	opt stack 0
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           postinc0	equ	0xFEE
  2979                           wreg	equ	0xFE8
  2980                           postdec1	equ	0xFE5
  2981                           fsr1h	equ	0xFE2
  2982                           fsr1l	equ	0xFE1
  2983                           indf2	equ	0xFDF
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _readPortA *****************
  2989 ;; Defined at:
  2990 ;;		line 171 in file "main.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;		None
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;		None
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      unsigned char 
  2997 ;; Registers used:
  2998 ;;		wreg, status,2
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3004 ;;      Params:         0       0       0       0       0       0       0       0       0
  3005 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3006 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3007 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3008 ;;Total ram usage:        0 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    1
  3011 ;; This function calls:
  3012 ;;		Nothing
  3013 ;; This function is called by:
  3014 ;;		_readPort
  3015 ;;		_readAddress
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text24
  3020  000F18                     __ptext24:
  3021                           	opt stack 0
  3022  000F18                     _readPortA:
  3023                           	opt stack 27
  3024                           
  3025                           ;main.c: 173: return PORTA;
  3026                           
  3027                           ;incstack = 0
  3028  000F18  5080               	movf	3968,w,c	;volatile
  3029  000F1A  0012               	return	
  3030  000F1C                     __end_of_readPortA:
  3031                           	opt stack 0
  3032                           tblptru	equ	0xFF8
  3033                           tblptrh	equ	0xFF7
  3034                           tblptrl	equ	0xFF6
  3035                           tablat	equ	0xFF5
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           postdec1	equ	0xFE5
  3039                           fsr1h	equ	0xFE2
  3040                           fsr1l	equ	0xFE1
  3041                           indf2	equ	0xFDF
  3042                           fsr2h	equ	0xFDA
  3043                           fsr2l	equ	0xFD9
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function _parseHex *****************
  3047 ;; Defined at:
  3048 ;;		line 76 in file "receiver.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  x               1    wreg     unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  x               1   14[COMRAM] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      char 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3062 ;;      Params:         0       0       0       0       0       0       0       0       0
  3063 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3065 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3066 ;;Total ram usage:        1 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    1
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_onData
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text25
  3077  000E2C                     __ptext25:
  3078                           	opt stack 0
  3079  000E2C                     _parseHex:
  3080                           	opt stack 28
  3081                           
  3082                           ;incstack = 0
  3083                           ;parseHex@x stored from wreg
  3084  000E2C  6E0F               	movwf	parseHex@x,c
  3085                           
  3086                           ;receiver.c: 78: if (x >= '0' && x <= '9') {
  3087  000E2E  0E2F               	movlw	47
  3088  000E30  640F               	cpfsgt	parseHex@x,c
  3089  000E32  D006               	goto	l1155
  3090  000E34  0E3A               	movlw	58
  3091  000E36  600F               	cpfslt	parseHex@x,c
  3092  000E38  D003               	goto	l1155
  3093                           
  3094                           ;receiver.c: 79: return x - '0';
  3095  000E3A  500F               	movf	parseHex@x,w,c
  3096  000E3C  0FD0               	addlw	208
  3097  000E3E  0012               	return	
  3098  000E40                     l1155:
  3099  000E40  0E60               	movlw	96
  3100  000E42  640F               	cpfsgt	parseHex@x,c
  3101  000E44  D006               	goto	l1163
  3102  000E46  0E67               	movlw	103
  3103  000E48  600F               	cpfslt	parseHex@x,c
  3104  000E4A  D003               	goto	l1163
  3105                           
  3106                           ;receiver.c: 81: return x - 'a' + 10;
  3107  000E4C  500F               	movf	parseHex@x,w,c
  3108  000E4E  0FA9               	addlw	169
  3109  000E50  0012               	return	
  3110  000E52                     l1163:
  3111                           
  3112                           ;receiver.c: 82: }
  3113                           ;receiver.c: 83: return -1;
  3114  000E52  0EFF               	movlw	255
  3115  000E54  0012               	return	
  3116  000E56                     __end_of_parseHex:
  3117                           	opt stack 0
  3118                           tblptru	equ	0xFF8
  3119                           tblptrh	equ	0xFF7
  3120                           tblptrl	equ	0xFF6
  3121                           tablat	equ	0xFF5
  3122                           postinc0	equ	0xFEE
  3123                           wreg	equ	0xFE8
  3124                           postdec1	equ	0xFE5
  3125                           fsr1h	equ	0xFE2
  3126                           fsr1l	equ	0xFE1
  3127                           indf2	equ	0xFDF
  3128                           fsr2h	equ	0xFDA
  3129                           fsr2l	equ	0xFD9
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _error *****************
  3133 ;; Defined at:
  3134 ;;		line 86 in file "receiver.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3148 ;;      Params:         0       0       0       0       0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3151 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    2
  3155 ;; This function calls:
  3156 ;;		_writeChar
  3157 ;; This function is called by:
  3158 ;;		_onData
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text26
  3163  000EA8                     __ptext26:
  3164                           	opt stack 0
  3165  000EA8                     _error:
  3166                           	opt stack 27
  3167                           
  3168                           ;receiver.c: 88: state = STATE_IDLE;
  3169                           
  3170                           ;incstack = 0
  3171  000EA8  0E00               	movlw	0
  3172  000EAA  6E29               	movwf	_state,c
  3173                           
  3174                           ;receiver.c: 89: writeChar('?');
  3175  000EAC  0E3F               	movlw	63
  3176  000EAE  EC5A  F007         	call	_writeChar
  3177  000EB2  0012               	return		;funcret
  3178  000EB4                     __end_of_error:
  3179                           	opt stack 0
  3180                           tblptru	equ	0xFF8
  3181                           tblptrh	equ	0xFF7
  3182                           tblptrl	equ	0xFF6
  3183                           tablat	equ	0xFF5
  3184                           postinc0	equ	0xFEE
  3185                           wreg	equ	0xFE8
  3186                           postdec1	equ	0xFE5
  3187                           fsr1h	equ	0xFE2
  3188                           fsr1l	equ	0xFE1
  3189                           indf2	equ	0xFDF
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _writeChar *****************
  3195 ;; Defined at:
  3196 ;;		line 206 in file "main.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  data            1    wreg     unsigned char 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  data            1   14[COMRAM] unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3210 ;;      Params:         0       0       0       0       0       0       0       0       0
  3211 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3213 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3214 ;;Total ram usage:        1 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    1
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_error
  3221 ;;		_writeHex
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text27
  3226  000EB4                     __ptext27:
  3227                           	opt stack 0
  3228  000EB4                     _writeChar:
  3229                           	opt stack 27
  3230                           
  3231                           ;incstack = 0
  3232                           ;writeChar@data stored from wreg
  3233  000EB4  6E0F               	movwf	writeChar@data,c
  3234  000EB6                     l122:
  3235  000EB6  A2AC               	btfss	4012,1,c	;volatile
  3236  000EB8  D7FE               	goto	l122
  3237                           
  3238                           ;main.c: 209: TXREG1 = data;
  3239  000EBA  C00F  FFAD         	movff	writeChar@data,4013	;volatile
  3240  000EBE  0012               	return		;funcret
  3241  000EC0                     __end_of_writeChar:
  3242                           	opt stack 0
  3243                           tblptru	equ	0xFF8
  3244                           tblptrh	equ	0xFF7
  3245                           tblptrl	equ	0xFF6
  3246                           tablat	equ	0xFF5
  3247                           postinc0	equ	0xFEE
  3248                           wreg	equ	0xFE8
  3249                           postdec1	equ	0xFE5
  3250                           fsr1h	equ	0xFE2
  3251                           fsr1l	equ	0xFE1
  3252                           indf2	equ	0xFDF
  3253                           fsr2h	equ	0xFDA
  3254                           fsr2l	equ	0xFD9
  3255                           status	equ	0xFD8
  3256                           
  3257 ;; *************** function _initUart *****************
  3258 ;; Defined at:
  3259 ;;		line 97 in file "main.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;		None
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;		None
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, status,2
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3273 ;;      Params:         0       0       0       0       0       0       0       0       0
  3274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3276 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3277 ;;Total ram usage:        0 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    1
  3280 ;; This function calls:
  3281 ;;		Nothing
  3282 ;; This function is called by:
  3283 ;;		_main
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           	psect	text28
  3288  000E7E                     __ptext28:
  3289                           	opt stack 0
  3290  000E7E                     _initUart:
  3291                           	opt stack 29
  3292                           
  3293                           ;main.c: 99: TXSTA1bits.SYNC = 0;
  3294                           
  3295                           ;incstack = 0
  3296  000E7E  98AC               	bcf	4012,4,c	;volatile
  3297                           
  3298                           ;main.c: 100: TXSTA1bits.TX9 = 0;
  3299  000E80  9CAC               	bcf	4012,6,c	;volatile
  3300                           
  3301                           ;main.c: 101: TXSTA1bits.TXEN = 1;
  3302  000E82  8AAC               	bsf	4012,5,c	;volatile
  3303                           
  3304                           ;main.c: 103: RCSTA1bits.RX9 = 0;
  3305  000E84  9CAB               	bcf	4011,6,c	;volatile
  3306                           
  3307                           ;main.c: 104: RCSTA1bits.CREN = 1;
  3308  000E86  88AB               	bsf	4011,4,c	;volatile
  3309                           
  3310                           ;main.c: 105: RCSTA1bits.SPEN = 1;
  3311  000E88  8EAB               	bsf	4011,7,c	;volatile
  3312                           
  3313                           ;main.c: 107: BAUDCON1bits.BRG16 = 1;
  3314  000E8A  86B8               	bsf	4024,3,c	;volatile
  3315                           
  3316                           ;main.c: 108: TXSTA1bits.BRGH = 1;
  3317  000E8C  84AC               	bsf	4012,2,c	;volatile
  3318                           
  3319                           ;main.c: 109: SPBRG1 = 15;
  3320  000E8E  0E0F               	movlw	15
  3321  000E90  6EAF               	movwf	4015,c	;volatile
  3322                           
  3323                           ;main.c: 112: RCONbits.IPEN = 1;
  3324  000E92  8ED0               	bsf	4048,7,c	;volatile
  3325                           
  3326                           ;main.c: 113: INTCONbits.GIE = 1;
  3327  000E94  8EF2               	bsf	intcon,7,c	;volatile
  3328                           
  3329                           ;main.c: 114: INTCONbits.PEIE = 1;
  3330  000E96  8CF2               	bsf	intcon,6,c	;volatile
  3331                           
  3332                           ;main.c: 117: PIE1bits.RCIE = 1;
  3333  000E98  8A9D               	bsf	3997,5,c	;volatile
  3334  000E9A  0012               	return		;funcret
  3335  000E9C                     __end_of_initUart:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           intcon	equ	0xFF2
  3342                           postinc0	equ	0xFEE
  3343                           wreg	equ	0xFE8
  3344                           postdec1	equ	0xFE5
  3345                           fsr1h	equ	0xFE2
  3346                           fsr1l	equ	0xFE1
  3347                           indf2	equ	0xFDF
  3348                           fsr2h	equ	0xFDA
  3349                           fsr2l	equ	0xFD9
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _receiveData *****************
  3353 ;; Defined at:
  3354 ;;		line 84 in file "main.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3368 ;;      Params:         0       0       0       0       0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3370 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3371 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3372 ;;Total ram usage:       14 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; This function calls:
  3375 ;;		Nothing
  3376 ;; This function is called by:
  3377 ;;		Interrupt level 2
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	intcode
  3382  000008                     __pintcode:
  3383                           	opt stack 0
  3384  000008                     _receiveData:
  3385                           	opt stack 26
  3386                           
  3387                           ;incstack = 0
  3388  000008  822C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3389  00000A  CFFA F001          	movff	pclath,??_receiveData
  3390  00000E  CFFB F002          	movff	pclatu,??_receiveData+1
  3391  000012  CFE9 F003          	movff	fsr0l,??_receiveData+2
  3392  000016  CFEA F004          	movff	fsr0h,??_receiveData+3
  3393  00001A  CFE1 F005          	movff	fsr1l,??_receiveData+4
  3394  00001E  CFE2 F006          	movff	fsr1h,??_receiveData+5
  3395  000022  CFD9 F007          	movff	fsr2l,??_receiveData+6
  3396  000026  CFDA F008          	movff	fsr2h,??_receiveData+7
  3397  00002A  CFF3 F009          	movff	prodl,??_receiveData+8
  3398  00002E  CFF4 F00A          	movff	prodh,??_receiveData+9
  3399  000032  CFF6 F00B          	movff	tblptrl,??_receiveData+10
  3400  000036  CFF7 F00C          	movff	tblptrh,??_receiveData+11
  3401  00003A  CFF8 F00D          	movff	tblptru,??_receiveData+12
  3402  00003E  CFF5 F00E          	movff	tablat,??_receiveData+13
  3403                           
  3404                           ;main.c: 85: if (RCSTA1bits.OERR == 1) {
  3405  000042  A2AB               	btfss	4011,1,c	;volatile
  3406  000044  D003               	goto	i2l61
  3407                           
  3408                           ;main.c: 86: RCSTA1bits.OERR = 0;
  3409  000046  92AB               	bcf	4011,1,c	;volatile
  3410                           
  3411                           ;main.c: 87: RCSTA1bits.CREN = 0;
  3412  000048  98AB               	bcf	4011,4,c	;volatile
  3413                           
  3414                           ;main.c: 88: RCSTA1bits.CREN = 1;
  3415  00004A  88AB               	bsf	4011,4,c	;volatile
  3416  00004C                     i2l61:
  3417                           
  3418                           ;main.c: 89: }
  3419                           ;main.c: 90: if (PIR1bits.RC1IF == 1) {
  3420  00004C  AA9E               	btfss	3998,5,c	;volatile
  3421  00004E  D013               	goto	i2l64
  3422                           
  3423                           ;main.c: 91: uartBuf[uartWriteIndex] = RCREG1;
  3424  000050  0E00               	movlw	low _uartBuf
  3425  000052  241F               	addwf	_uartWriteIndex,w,c	;volatile
  3426  000054  6ED9               	movwf	fsr2l,c
  3427  000056  0E02               	movlw	high _uartBuf
  3428  000058  2020               	addwfc	_uartWriteIndex+1,w,c	;volatile
  3429  00005A  6EDA               	movwf	fsr2h,c
  3430  00005C  CFAE FFDF          	movff	4014,indf2	;volatile
  3431                           
  3432                           ;main.c: 92: uartWriteIndex++;
  3433  000060  4A1F               	infsnz	_uartWriteIndex,f,c	;volatile
  3434  000062  2A20               	incf	_uartWriteIndex+1,f,c	;volatile
  3435                           
  3436                           ;main.c: 93: if (uartWriteIndex == 1024) uartWriteIndex = 0;
  3437  000064  0E04               	movlw	4
  3438  000066  1820               	xorwf	_uartWriteIndex+1,w,c	;volatile
  3439  000068  101F               	iorwf	_uartWriteIndex,w,c	;volatile
  3440  00006A  A4D8               	btfss	status,2,c
  3441  00006C  D004               	goto	i2l64
  3442  00006E  0E00               	movlw	0
  3443  000070  6E20               	movwf	_uartWriteIndex+1,c	;volatile
  3444  000072  0E00               	movlw	0
  3445  000074  6E1F               	movwf	_uartWriteIndex,c	;volatile
  3446  000076                     i2l64:
  3447  000076  C00E  FFF5         	movff	??_receiveData+13,tablat
  3448  00007A  C00D  FFF8         	movff	??_receiveData+12,tblptru
  3449  00007E  C00C  FFF7         	movff	??_receiveData+11,tblptrh
  3450  000082  C00B  FFF6         	movff	??_receiveData+10,tblptrl
  3451  000086  C00A  FFF4         	movff	??_receiveData+9,prodh
  3452  00008A  C009  FFF3         	movff	??_receiveData+8,prodl
  3453  00008E  C008  FFDA         	movff	??_receiveData+7,fsr2h
  3454  000092  C007  FFD9         	movff	??_receiveData+6,fsr2l
  3455  000096  C006  FFE2         	movff	??_receiveData+5,fsr1h
  3456  00009A  C005  FFE1         	movff	??_receiveData+4,fsr1l
  3457  00009E  C004  FFEA         	movff	??_receiveData+3,fsr0h
  3458  0000A2  C003  FFE9         	movff	??_receiveData+2,fsr0l
  3459  0000A6  C002  FFFB         	movff	??_receiveData+1,pclatu
  3460  0000AA  C001  FFFA         	movff	??_receiveData,pclath
  3461  0000AE  922C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3462  0000B0  0011               	retfie		f
  3463  0000B2                     __end_of_receiveData:
  3464                           	opt stack 0
  3465                           pclatu	equ	0xFFB
  3466                           pclath	equ	0xFFA
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           prodh	equ	0xFF4
  3472                           prodl	equ	0xFF3
  3473                           intcon	equ	0xFF2
  3474                           postinc0	equ	0xFEE
  3475                           fsr0h	equ	0xFEA
  3476                           fsr0l	equ	0xFE9
  3477                           wreg	equ	0xFE8
  3478                           postdec1	equ	0xFE5
  3479                           fsr1h	equ	0xFE2
  3480                           fsr1l	equ	0xFE1
  3481                           indf2	equ	0xFDF
  3482                           fsr2h	equ	0xFDA
  3483                           fsr2l	equ	0xFD9
  3484                           status	equ	0xFD8
  3485                           pclatu	equ	0xFFB
  3486                           pclath	equ	0xFFA
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           prodh	equ	0xFF4
  3492                           prodl	equ	0xFF3
  3493                           intcon	equ	0xFF2
  3494                           postinc0	equ	0xFEE
  3495                           fsr0h	equ	0xFEA
  3496                           fsr0l	equ	0xFE9
  3497                           wreg	equ	0xFE8
  3498                           postdec1	equ	0xFE5
  3499                           fsr1h	equ	0xFE2
  3500                           fsr1l	equ	0xFE1
  3501                           indf2	equ	0xFDF
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506                           	psect	rparam
  3507  0000                     pclatu	equ	0xFFB
  3508                           pclath	equ	0xFFA
  3509                           tblptru	equ	0xFF8
  3510                           tblptrh	equ	0xFF7
  3511                           tblptrl	equ	0xFF6
  3512                           tablat	equ	0xFF5
  3513                           prodh	equ	0xFF4
  3514                           prodl	equ	0xFF3
  3515                           intcon	equ	0xFF2
  3516                           postinc0	equ	0xFEE
  3517                           fsr0h	equ	0xFEA
  3518                           fsr0l	equ	0xFE9
  3519                           wreg	equ	0xFE8
  3520                           postdec1	equ	0xFE5
  3521                           fsr1h	equ	0xFE2
  3522                           fsr1l	equ	0xFE1
  3523                           indf2	equ	0xFDF
  3524                           fsr2h	equ	0xFDA
  3525                           fsr2l	equ	0xFD9
  3526                           status	equ	0xFD8
  3527                           
  3528                           	psect	temp
  3529  00002C                     btemp:
  3530                           	opt stack 0
  3531  00002C                     	ds	1
  3532  0000                     int$flags	set	btemp
  3533                           pclatu	equ	0xFFB
  3534                           pclath	equ	0xFFA
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           intcon	equ	0xFF2
  3542                           postinc0	equ	0xFEE
  3543                           fsr0h	equ	0xFEA
  3544                           fsr0l	equ	0xFE9
  3545                           wreg	equ	0xFE8
  3546                           postdec1	equ	0xFE5
  3547                           fsr1h	equ	0xFE2
  3548                           fsr1l	equ	0xFE1
  3549                           indf2	equ	0xFDF
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        2
    BSS         1295
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     26      43
    BANK0           160      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    hex	PTR unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_onData
    _onData->_writeAddressPhysical
    _writeHex->_writeChar
    _writeAddressPhysical->_logicAddressToPhysical
    _writeAddressPhysical->_writeAddress
    _writeAddress->_writePortA
    _writeAddress->_writePortB
    _writeAddress->_writePortC
    _writeAddress->_writePortD
    _writeAddress->_writePortE
    _writeAddress->_writeTrisA
    _readAddress->_writePortB
    _readAddress->_writePortC
    _readAddress->_writePortD
    _error->_writeChar

Critical Paths under _receiveData in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _receiveData in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _receiveData in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _receiveData in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _receiveData in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _receiveData in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _receiveData in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _receiveData in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _receiveData in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3283
                           _initUart
                             _onData
                           _readChar
 ---------------------------------------------------------------------------------
 (1) _readChar                                             1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _onData                                               5     5      0    3268
                                             21 COMRAM     5     5      0
                              _error
                           _parseHex
                        _readAddress
                           _readPort
                       _writeAddress
               _writeAddressPhysical
                           _writeHex
                         _writePortA
                         _writePortB
                         _writePortC
                         _writePortD
                         _writePortE
                         _writeTrisA
                         _writeTrisB
                         _writeTrisC
                         _writeTrisD
                         _writeTrisE
 ---------------------------------------------------------------------------------
 (2) _writeTrisE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeTrisB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writeHex                                             4     4      0      45
                                             15 COMRAM     4     4      0
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeAddressPhysical                                 3     0      3    1684
                                             18 COMRAM     3     0      3
             _logicAddressToPhysical
                _logicDataToPhysical
                       _writeAddress
 ---------------------------------------------------------------------------------
 (3) _writeAddress                                         3     0      3     460
                                             15 COMRAM     3     0      3
                         _writePortA
                         _writePortB
                         _writePortC
                         _writePortD
                         _writePortE
                         _writeTrisA
 ---------------------------------------------------------------------------------
 (2) _writeTrisA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortE                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortA                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _logicDataToPhysical                                  2     2      0     135
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _logicAddressToPhysical                               4     2      2     543
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _readPort                                             0     0      0       0
                          _readPortA
                          _readPortB
                          _readPortC
                          _readPortD
                          _readPortE
 ---------------------------------------------------------------------------------
 (3) _readPortE                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortD                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readPortB                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readAddress                                          3     1      2     340
                                             15 COMRAM     3     1      2
                          _readPortA
                         _writePortB
                         _writePortC
                         _writePortD
 ---------------------------------------------------------------------------------
 (2) _writePortD                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortC                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _writePortB                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _readPortA                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parseHex                                             1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _error                                                0     0      0      15
                          _writeChar
 ---------------------------------------------------------------------------------
 (3) _writeChar                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _receiveData                                         14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initUart
   _onData
     _error
       _writeChar
     _parseHex
     _readAddress
       _readPortA
       _writePortB
       _writePortC
       _writePortD
     _readPort
       _readPortA
       _readPortB
       _readPortC
       _readPortD
       _readPortE
     _writeAddress
       _writePortA
       _writePortB
       _writePortC
       _writePortD
       _writePortE
       _writeTrisA
     _writeAddressPhysical
       _logicAddressToPhysical
       _logicDataToPhysical
       _writeAddress
         _writePortA
         _writePortB
         _writePortC
         _writePortD
         _writePortE
         _writeTrisA
     _writeHex
       _writeChar
     _writePortA
     _writePortB
     _writePortC
     _writePortD
     _writePortE
     _writeTrisA
     _writeTrisB
     _writeTrisC
     _writeTrisD
     _writeTrisE
   _readChar

 _receiveData (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     400      21       50.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0     100       8      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1A      2B       1       45.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12B       6        0.0%
DATA                 0      0     52B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Jan  7 01:25:16 2018

                 writePortA@data 000F                   writePortB@data 000F  
                 writePortC@data 000F                   writePortD@data 000F  
                 writePortE@data 000F                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                      __CFG_LVP$ON 000000  
                            l122 0EB6                              l118 0DA0  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _adr 001D                              _hex 002A  
                 writeTrisA@data 000F                              wreg 000FE8  
                 writeTrisB@data 000F                       _TXSTA1bits 000FAC  
                 writeTrisC@data 000F                   writeTrisD@data 000F  
                 writeTrisE@data 000F                             l1225 0D6C  
                           l1163 0E52                             l1155 0E40  
                           l1227 0D7A                             l1181 0CFE  
                           l1185 0D0E                             l1177 0CF0  
                           l1189 0D1E                             l1701 08B2  
                           l1801 09E2                             l1721 08EE  
                           l1713 08D2                             l1811 0A04  
                           l1731 0910                             l1707 08C0  
                           l1901 0BAE                             l1725 08FC  
                           l1717 08E0                             l1831 0A4E  
                           l1815 0A14                             l1823 0A32  
                           l1807 09F6                             l1663 0818  
                           l1825 0A38                             l1753 094C  
                           l1745 0936                             l1729 090A  
                           l1905 0BB4                             l1921 0DCA  
                           l1843 0A7C                             l1835 0A5C  
                           l1819 0A24                             l1739 0926  
                           l1691 0880                             l1683 085C  
                           l1675 0840                             l1667 082A  
                           l1861 0AF2                             l1853 0ABA  
                           l1781 09A6                             l1765 097A  
                           l1839 0A6C                             l1847 0A8A  
                           l1791 09C2                             l1775 0996  
                           l1695 089A                             l1687 086E  
                           l1679 084E                             l1857 0AE2  
                           l1849 0A90                             l1769 0984  
                           l1891 0B8E                             l1787 09B8  
                           l1699 08AC                             l1885 0B74  
                           l1899 0BA8                             STR_1 0801  
                           u1487 0B46                             i2l61 004C  
                           i2l64 0076                             _main 0DA4  
                           _temp 0025                             _port 0023  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 002C  
                  __CFG_BORV$190 000000                             prodh 000FF4  
                           prodl 000FF3                             start 00B2  
                  __CFG_IESO$OFF 000000                     ?_readAddress 0010  
                   ___param_bank 000000                     _BAUDCON1bits 000FB8  
            _logicDataToPhysical 0E02                            ?_main 0001  
                          _PORTA 000F80                            _PORTB 000F81  
                          _PORTC 000F82                            _PORTD 000F83  
                          _PORTE 000F84                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000                    __CFG_WRT3$OFF 000000  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                            _error 0EA8  
                          _value 0028                            _state 0029  
          __size_of_writeAddress 003E                            pclath 000FFA  
           ?_logicDataToPhysical 0001                            tablat 000FF5  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                   ?_receiveData 0001                   __CFG_ICPRT$OFF 000000  
                 __CFG_MCLRE$OFF 000000                  __initialization 0BE8  
                   __end_of_main 0DD4                   __CFG_PCLKEN$ON 000000  
                         ??_main 001B                    __activetblptr 000002  
   __end_of_writeAddressPhysical 0E02                     _writeAddress 0D2E  
                 __CFG_SDOMX$RB3 000000                  __CFG_CCP2MX$RC1 000000  
                         _ADCON0 000FC2                           ?_error 0001  
                         _ANSELA 000F5B                           _ANSELC 000F5D  
          ??_logicDataToPhysical 000F                   __CFG_WDTEN$OFF 000000  
                         _RCREG1 000FAE                           _SPBRG1 000FAF  
                         _TXREG1 000FAD                   __CFG_XINST$OFF 000000  
                 __CFG_STVREN$ON 000000                 __end_of_readChar 0DA4  
                         _onData 0814                 __end_of_initUart 0E9C  
               __end_of_readPort 0D2E                           clear_0 0C08  
                         clear_1 0C1C                           clear_2 0C2E  
               __end_of_parseHex 0E56                     __pdataCOMRAM 002A  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
               __end_of_writeHex 0CE2             __CFG_LS48MHZ$SYS24X4 000000  
                     __accesstop 0060          __end_of__initialization 0C34  
                __CFG_PBADEN$OFF 000000                    ___rparam_used 000001  
                 __pcstackCOMRAM 0001                 __CFG_nPWRTEN$OFF 000000  
           __size_of_readAddress 0028                    __end_of_error 0EB4  
      logicDataToPhysical@value0 0010                          ??_error 0010  
                     __pbssBANK1 0100               __size_of_readPortA 0004  
             __size_of_readPortB 0004               __size_of_readPortC 0004  
             __size_of_readPortD 0004               __size_of_readPortE 0004  
           _writeAddressPhysical 0DD4             __size_of_receiveData 00AA  
              __CFG_PLLSEL$PLL4X 000000                     readAddress@d 0012  
                   readChar@data 000F                   readAddress@adr 0010  
                        ?_onData 0001         logicDataToPhysical@value 000F  
       ??_logicAddressToPhysical 0011                        ?_readChar 0001  
                      ?_initUart 0001                        ?_readPort 0001  
             __size_of_writeChar 000C                        ?_parseHex 0001  
          ?_writeAddressPhysical 0013                          __Hparam 0000  
                        __Lparam 0000                     __psmallconst 0800  
                __size_of_onData 03D4                          __pcinit 0BE8  
                        __ramtop 0800                        ?_writeHex 0001  
                        __ptext0 0DA4                          __ptext1 0D6C  
                        __ptext2 0814                          __ptext3 0EC0  
                        __ptext4 0EC8                          __ptext5 0E9C  
                        __ptext6 0ED0                          __ptext7 0C94  
                        __ptext8 0DD4                          __ptext9 0D2E  
                        _command 0024                __end_of_readPortA 0F1C  
              __end_of_readPortB 0F18                __end_of_readPortC 0F14  
              __end_of_readPortD 0F10                __end_of_readPortE 0F0C  
                        _uartBuf 0200                          onData@d 001A  
           end_of_initialization 0C34                       ??_readChar 000F  
                     ??_initUart 000F                    __Lmediumconst 0000  
                     ??_readPort 000F                       ??_parseHex 000F  
                   writeHex@data 0013                          postdec1 000FE5  
                        postinc0 000FEE                       ??_writeHex 0010  
              __end_of_writeChar 0EC0      __end_of_logicDataToPhysical 0E2C  
__size_of_logicAddressToPhysical 0052           ??_writeAddressPhysical 0016  
      logicAddressToPhysical@adr 0011                       _writePortA 0EE8  
                     _writePortB 0F00                       _writePortC 0EF8  
                     _writePortD 0EF0                       _writePortE 0EE0  
                     _writeTrisA 0ED8                       _writeTrisB 0ED0  
                     _writeTrisC 0E9C                       _writeTrisD 0EC8  
                     _writeTrisE 0EC0                    __pidataCOMRAM 0F1C  
                 __end_of_onData 0BE8              start_initialization 0BE8  
                __CFG_nLPBOR$OFF 000000                    ??_readAddress 0012  
         _logicAddressToPhysical 0C42                         ??_onData 0016  
                    __pbssBIGRAM 0200                      __pbssCOMRAM 001B  
                 _uartWriteIndex 001F                writeAddress@value 0012  
                  ??_receiveData 0001                __size_of_readChar 0038  
                writeAddress@adr 0010                __size_of_initUart 001E  
              __size_of_readPort 004C                __size_of_parseHex 002A  
                      __pintcode 0008       logicAddressToPhysical@adr0 000F  
                    ?_writePortA 0001                      ?_writePortB 0001  
                    ?_writePortC 0001                      ?_writePortD 0001  
                    ?_writePortE 0001                      ?_writeTrisA 0001  
                    ?_writeTrisB 0001                      ?_writeTrisC 0001  
                    ?_writeTrisD 0001                      ?_writeTrisE 0001  
            __end_of_readAddress 0E7E                      __smallconst 0800  
                  ?_writeAddress 0010                __size_of_writeHex 004E  
                      _readPortA 0F18                        _readPortB 0F14  
                      _readPortC 0F10                        _readPortD 0F0C  
                      _readPortE 0F08                   __size_of_error 000C  
                    _flashBuffer 0100                         _PIE1bits 000F9D  
                       _PIR1bits 000F9E                         _RCONbits 000FD0  
               __CFG_WDTPS$32768 000000              __end_of_receiveData 00B2  
                  _uartReadIndex 0021                   ??_writeAddress 0013  
              __CFG_CFGPLLEN$OFF 000000                        _writeChar 0EB4  
                     ?_readPortA 0001                       ?_readPortB 0001  
                     ?_readPortC 0001                       ?_readPortD 0001  
                     ?_readPortE 0001              __size_of_writePortA 0008  
            __size_of_writePortB 0008              __size_of_writePortC 0008  
            __size_of_writePortD 0008              __size_of_writePortE 0008  
            __size_of_writeTrisA 0008              __size_of_writeTrisB 0008  
            __size_of_writeTrisC 000C              __size_of_writeTrisD 0008  
            __size_of_writeTrisE 0008        writeAddressPhysical@value 0015  
                       __Hrparam 0000          writeAddressPhysical@adr 0013  
                    _readAddress 0E56                         __Lrparam 0000  
             __CFG_BOREN$SBORDIS 000000                        parseHex@x 000F  
                       _checksum 0027                 _flashBufferIndex 001B  
                     ?_writeChar 0001                         __ptext10 0ED8  
                       __ptext11 0EE0                         __ptext20 0E56  
                       __ptext12 0EE8                         __ptext21 0EF0  
                       __ptext13 0E02                         __ptext22 0EF8  
                       __ptext14 0C42                         __ptext23 0F00  
                       __ptext15 0CE2                         __ptext24 0F18  
                       __ptext16 0F08                         __ptext25 0E2C  
                       __ptext17 0F0C                         __ptext26 0EA8  
                       __ptext18 0F10                         __ptext27 0EB4  
                       __ptext19 0F14                         __ptext28 0E7E  
   __size_of_logicDataToPhysical 002A                         _readChar 0D6C  
                       _initUart 0E7E                         _readPort 0CE2  
                  __size_of_main 0030                      _receiveData 0008  
                       _parseHex 0E2C    __size_of_writeAddressPhysical 002E  
        ?_logicAddressToPhysical 000F                         int$flags 002C  
                       _writeHex 0C94               _checksumCalculated 0026  
                     _INTCONbits 000FF2                      ??_readPortA 000F  
                    ??_readPortB 000F                      ??_readPortC 000F  
                    ??_readPortD 000F                      ??_readPortE 000F  
                       intlevel2 0000                    writeChar@data 000F  
 __end_of_logicAddressToPhysical 0C94                       _RCSTA1bits 000FAB  
           __end_of_writeAddress 0D6C                       _OSCCONbits 000FD3  
           __CFG_CPUDIV$NOCLKDIV 000000                     ??_writePortA 000F  
                   ??_writePortB 000F                     ??_writePortC 000F  
                   ??_writePortD 000F                     ??_writePortE 000F  
                   ??_writeTrisA 000F                     ??_writeTrisB 000F  
                   ??_writeTrisC 000F                     ??_writeTrisD 000F  
                   ??_writeTrisE 000F                      ??_writeChar 000F  
             __CFG_FOSC$INTOSCIO 000000               __end_of_writePortA 0EF0  
             __end_of_writePortB 0F08               __end_of_writePortC 0F00  
             __end_of_writePortD 0EF8               __end_of_writePortE 0EE8  
             __end_of_writeTrisA 0EE0               __end_of_writeTrisB 0ED8  
             __end_of_writeTrisC 0EA8               __end_of_writeTrisD 0ED0  
             __end_of_writeTrisE 0EC8  
